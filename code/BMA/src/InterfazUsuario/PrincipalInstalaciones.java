/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazUsuario;

import GestionDeInstalaciones.GestorInstalacion;
import ServiciosAlmacenamiento.BaseDatos;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class PrincipalInstalaciones extends javax.swing.JFrame {

    private BaseDatos bd;
    private Border bordeError;
    private String consultaInstalacionesMostradas;
    private ResultSet retset;

    /**
     * Creates new form PrincipalInstalaciones
     */
    public PrincipalInstalaciones(JFrame pP, BaseDatos bd) {
        initComponents();
        setLocationRelativeTo(pP);
        this.bd = bd;
        actualizarTablaInstalaciones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelInstalaciones = new javax.swing.JPanel();
        NombreInsLabel = new javax.swing.JLabel();
        nombreIns = new javax.swing.JTextField();
        nombreCalleInst = new javax.swing.JTextField();
        MenuDireccionLabel = new javax.swing.JComboBox();
        NumeroLabel = new javax.swing.JLabel();
        numeroInst = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        capacidadInst = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaInstalacion = new javax.swing.JTable();
        introducirButton = new javax.swing.JButton();
        modificarButton = new javax.swing.JButton();
        eliminarButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        TituloLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        panelInstalaciones.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panelInstalaciones.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        panelInstalaciones.setLayout(new java.awt.GridBagLayout());

        NombreInsLabel.setText("Nombre:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 5);
        panelInstalaciones.add(NombreInsLabel, gridBagConstraints);

        nombreIns.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nombreInsKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 177;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelInstalaciones.add(nombreIns, gridBagConstraints);

        nombreCalleInst.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nombreCalleInstKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 177;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        panelInstalaciones.add(nombreCalleInst, gridBagConstraints);

        MenuDireccionLabel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Calle", "Avenida", "Plaza", "Carretera" }));
        MenuDireccionLabel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MenuDireccionLabelItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelInstalaciones.add(MenuDireccionLabel, gridBagConstraints);

        NumeroLabel.setText("NÂº");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 5);
        panelInstalaciones.add(NumeroLabel, gridBagConstraints);

        numeroInst.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numeroInstKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelInstalaciones.add(numeroInst, gridBagConstraints);

        jLabel5.setText("Direccion");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 5);
        panelInstalaciones.add(jLabel5, gridBagConstraints);

        jLabel6.setText("Capacidad");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 5);
        panelInstalaciones.add(jLabel6, gridBagConstraints);

        capacidadInst.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                capacidadInstKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 67;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelInstalaciones.add(capacidadInst, gridBagConstraints);

        jScrollPane3.setMaximumSize(new java.awt.Dimension(225, 200));
        jScrollPane3.setMinimumSize(new java.awt.Dimension(225, 200));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(225, 200));

        tablaInstalacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaInstalacion.setMaximumSize(new java.awt.Dimension(225, 64));
        tablaInstalacion.setMinimumSize(new java.awt.Dimension(225, 64));
        tablaInstalacion.getTableHeader().setResizingAllowed(false);
        tablaInstalacion.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tablaInstalacion);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelInstalaciones.add(jScrollPane3, gridBagConstraints);

        introducirButton.setText("Introducir");
        introducirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                introducirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelInstalaciones.add(introducirButton, gridBagConstraints);

        modificarButton.setText("Modificar");
        modificarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelInstalaciones.add(modificarButton, gridBagConstraints);

        eliminarButton.setText("Eliminar");
        eliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelInstalaciones.add(eliminarButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panelInstalaciones.add(jSeparator1, gridBagConstraints);

        TituloLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        TituloLabel.setText("Instalaciones");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panelInstalaciones.add(TituloLabel, gridBagConstraints);

        getContentPane().add(panelInstalaciones, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

		/* Metodo constructor el cual llama al frame de introducir una nueva instalaciÃ³n.
		 * @param evt ActionEvent (java.awt.event.ActionEvent) con la acciÃ³n.
		 */

    private void introducirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_introducirButtonActionPerformed
        new AÃ±adirModificarInstalacion(this, this.bd).setVisible(true);
    }//GEN-LAST:event_introducirButtonActionPerformed

		/* Metodo constructor el cual llama al frame de modificar instalaciÃ³n
		 * @param evt ActionEvent (java.awt.event.ActionEvent) con la acciÃ³n.
		 */

    private void modificarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarButtonActionPerformed
        int indiceTabla = tablaInstalacion.getSelectedRow();

				//Comprueba si se ha seleccionado una instalaciÃ³n.
        if (indiceTabla >= 0) {
            String nombre = (String) tablaInstalacion.getValueAt(indiceTabla, 0);
            String capacidad = (String) tablaInstalacion.getValueAt(indiceTabla, 2);
            String localizacion = (String) tablaInstalacion.getValueAt(indiceTabla, 1);
            String consulta_instalacion = "SELECT idInstalacion FROM Instalacion"
                    + " WHERE nombre = '" + nombre + "' AND capacidadEquipos = " + capacidad
                    + " AND localizacion = '" + localizacion + "'";

            ResultSet retsetMostrados = this.bd.ejecutaConsulta(consulta_instalacion);
            try {
                if (retsetMostrados.next()) {
										//AÃ±ade crea el frame para modificar la instalaciÃ³n
                    new AÃ±adirModificarInstalacion(this, this.bd, retsetMostrados.getInt("idInstalacion"), nombre,
                            capacidad, localizacion).setVisible(true);
                }
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (indiceTabla == -1) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar una instalacion", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_modificarButtonActionPerformed

		/* Metodo constructor el cual elimina una instalaciÃ³n
		 * @param evt ActionEvent (java.awt.event.ActionEvent) con la acciÃ³n.
		 */


    private void eliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarButtonActionPerformed
        int indiceTabla = tablaInstalacion.getSelectedRow();
				//Comprueba si se ha seleccionado una instalaciÃ³n.
        if (indiceTabla >= 0) {
            int selection = JOptionPane.showConfirmDialog(this, "Desea eliminar la Instalacion?", "Instalacion usuario", JOptionPane.YES_NO_OPTION);
            if (selection == JOptionPane.YES_OPTION) {
                if (Integer.parseInt(tablaInstalacion.getValueAt(indiceTabla, 2).toString()) <= 0) {
                    eliminarButton.setBorder(bordeError);
                }
                GestorInstalacion.eliminaInstalacion(this.bd, tablaInstalacion.getValueAt(indiceTabla, 0).toString(),
                        Integer.parseInt(tablaInstalacion.getValueAt(indiceTabla, 2).toString()),
                        tablaInstalacion.getValueAt(indiceTabla, 1).toString());
								//Actualiza la informaciÃ³n de la tabla
                actualizarTablaInstalaciones();

            }
        } else if (indiceTabla == -1) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar una instalacion", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_eliminarButtonActionPerformed

		/* Metodo consultor
		 * @param evt KeyEvent (java.awt.event.KeyEvent) con la acciÃ³n.
		 */
		
    private void nombreInsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreInsKeyReleased
        consultarInstalaciones();
    }//GEN-LAST:event_nombreInsKeyReleased

		/* Metodo consultor
		 * @param evt KeyEvent (java.awt.event.KeyEvent) con la acciÃ³n.
		 */

    private void nombreCalleInstKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreCalleInstKeyReleased
        consultarInstalaciones();
    }//GEN-LAST:event_nombreCalleInstKeyReleased

		/* Metodo consultor
		 * @param evt KeyEvent (java.awt.event.KeyEvent) con la acciÃ³n.
		 */

    private void numeroInstKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numeroInstKeyReleased
        consultarInstalaciones();
    }//GEN-LAST:event_numeroInstKeyReleased

		/* Metodo consultor
		 * @param evt KeyEvent (java.awt.event.KeyEvent) con la acciÃ³n.
		 */

    private void capacidadInstKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_capacidadInstKeyReleased
        consultarInstalaciones();
    }//GEN-LAST:event_capacidadInstKeyReleased

		/* Metodo consultor
		 * @param evt KeyEvent (java.awt.event.KeyEvent) con la acciÃ³n.
		 */

    private void MenuDireccionLabelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MenuDireccionLabelItemStateChanged
        consultarInstalaciones();
    }//GEN-LAST:event_MenuDireccionLabelItemStateChanged


		/* 
		 * Metodo consultor para la bÃºsqueda de una instalaciÃ³n de las mostradas
		 */

    private void consultarInstalaciones() {

        String consulta = "SELECT nombre, capacidadEquipos, localizacion FROM Instalacion WHERE ";
        String likeNombre = "";
        String likeCalle = "";
        String likeDireccion = "";
        String likeNumero = "";
        String likeCapacidad = "";

				//ComprobaciÃ³n de los campos que no estÃ¡n vacios.
        if (!nombreIns.getText().isEmpty() || !nombreCalleInst.getText().isEmpty()
                || !numeroInst.getText().isEmpty() || !capacidadInst.getText().isEmpty()
                || !((String)MenuDireccionLabel.getSelectedItem()).equals("-")) {
		
            if (!nombreIns.getText().isEmpty()) {
                likeNombre = "nombre LIKE '%";
                likeNombre = likeNombre + nombreIns.getText() + "%' AND ";
            }

            if (!((String)MenuDireccionLabel.getSelectedItem()).equals("-")) {
                likeCalle = "localizacion LIKE '%";
                likeCalle = likeCalle + (String)MenuDireccionLabel.getSelectedItem() + "%' AND ";
            }
            if (!nombreCalleInst.getText().isEmpty()) {
                likeDireccion = "localizacion LIKE '%";
                likeDireccion = likeDireccion + nombreCalleInst.getText() + "%' AND ";
            }
            if (!numeroInst.getText().isEmpty()) {
                likeNumero = "localizacion LIKE '%";
                likeNumero = likeNumero + numeroInst.getText() + "%' AND ";
            }

            if (!capacidadInst.getText().isEmpty()) {
                likeCapacidad = "capacidadEquipos LIKE '%";
                likeCapacidad = likeCapacidad + capacidadInst.getText() + "%' AND ";
            }

            if (!likeNombre.isEmpty()) {
                consulta = consulta + likeNombre;
            }
            
            if (!likeCalle.isEmpty()) {
                consulta = consulta + likeCalle;
            }
            
            if (!likeDireccion.isEmpty()) {
                consulta = consulta + likeDireccion;
            }
            
            if (!likeNumero.isEmpty()) {
                consulta = consulta + likeNumero;
            }

            if (!likeCapacidad.isEmpty()) {
                consulta = consulta + likeCapacidad;
            }

						//GeneraciÃ³n de la consulta.
            consulta = consulta.substring(0, consulta.length() - 5);
						//RealizaciÃ³n de la consulta.
            ResultSet ret = this.bd.ejecutaConsulta(consulta);

            ArrayList<ArrayList<Object>> dataCollection = new ArrayList<>();
            ArrayList<Object> row;
            try {
                while (ret.next()) {
                    row = new ArrayList<>();
                    row.add(ret.getString("nombre"));
                    row.add(ret.getString("localizacion"));
                    row.add(ret.getString("capacidadEquipos"));
                    dataCollection.add(row);
                }
            } catch (SQLException ex) {
                Logger.getLogger(PrincipalInstalaciones.class.getName()).log(Level.SEVERE, null, ex);
            }

            Object[][] data = new Object[dataCollection.size()][17];
            for (int i = 0; i < dataCollection.size(); i++) {
                data[i] = dataCollection.get(i).toArray(new Object[17]);
            }

            DefaultTableModel dtm = new DefaultTableModel(data, new String[]{"Nombre", "Direccion", "Capacidad para Equipos"}) {
                Class[] types = new Class[]{java.lang.String.class, java.lang.String.class, java.lang.String.class};
                boolean[] canEdit = new boolean[]{false, false, false};

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            };

            tablaInstalacion.setModel(dtm);
        } else {
            actualizarTablaInstalaciones();
        }
    }

		/*
		 * Metodo consultor el cual muestra todas las instalaciones
		 */

    public void actualizarTablaInstalaciones() {
        tablaInstalacion.removeAll();
        try {
                //Genera la consulta con respeto a los campos de la interfaz
            String consulta_instalaciones = leeConsultaInstalacionInterfaz();
            consultaInstalacionesMostradas = consulta_instalaciones;
            retset = GestorInstalacion.consultaInstalacion(this.bd, consulta_instalaciones);

            ArrayList<ArrayList<Object>> dataCollection = new ArrayList<>();
            ArrayList<Object> row;
            while (retset.next()) {
                row = new ArrayList<>();
                row.add(retset.getString("i.nombre"));
                row.add(retset.getString("i.localizacion"));
                row.add(retset.getString("i.capacidadEquipos"));
                dataCollection.add(row);
            }

            Object[][] data = new Object[dataCollection.size()][17];
            for (int i = 0; i < dataCollection.size(); i++) {
                data[i] = dataCollection.get(i).toArray(new Object[17]);
            }

            DefaultTableModel dtm = new DefaultTableModel(data, new String[]{"Nombre", "Direccion", "Capacidad para Equipos"}) {
                Class[] types = new Class[]{java.lang.String.class, java.lang.String.class, java.lang.String.class};
                boolean[] canEdit = new boolean[]{false, false, false};

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            };

            tablaInstalacion.setModel(dtm);
        } catch (SQLException ex) {
            System.out.print(ex.getMessage());
        }
    }

		/*
		 * Metodo creador el cual crea la consulta inicial para mostrar las instalaciones
		 * @return String (cadena) con el atributo interno de la consulta.
		 */
			
    private String leeConsultaInstalacionInterfaz() {
        String consulta_instalaciones = "SELECT i.idInstalacion, i.nombre, i.capacidadEquipos, i.localizacion FROM ";
        String TablasImplicadas = " Instalacion i ";
        String condicionConsulta = " WHERE ";
			
				//Comprueba si los campos de la interfaz estÃ¡ relleno.
        if (!nombreIns.getText().equals("") || MenuDireccionLabel.getSelectedItem() != "-" || !nombreCalleInst.getText().equals("")
                || !numeroInst.getText().equals("") || !capacidadInst.getText().equals("")) {
            if (!nombreIns.getText().equals("")) {
                condicionConsulta = condicionConsulta + " i.nombre= '" + nombreIns.getText() + "' AND ";
            }

            if (!capacidadInst.getText().equals("")) {
                condicionConsulta = condicionConsulta + " i.capacidadEquipos = '" + capacidadInst.getText() + "' AND ";
            }
            if (MenuDireccionLabel.getSelectedItem() != "-" || !nombreCalleInst.getText().equals("") || !numeroInst.getText().equals("")) {
                condicionConsulta = condicionConsulta + " i.localizacion= '" + MenuDireccionLabel.getSelectedItem() + " " + nombreCalleInst.getText()
                        + " " + numeroInst.getText() + "' AND ";
            }


            condicionConsulta = condicionConsulta.substring(0, condicionConsulta.length() - 4);
            TablasImplicadas = TablasImplicadas + condicionConsulta;
        }


        consulta_instalaciones = consulta_instalaciones + TablasImplicadas;

        return consulta_instalaciones;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox MenuDireccionLabel;
    private javax.swing.JLabel NombreInsLabel;
    private javax.swing.JLabel NumeroLabel;
    private javax.swing.JLabel TituloLabel;
    private javax.swing.JTextField capacidadInst;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JButton introducirButton;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton modificarButton;
    private javax.swing.JTextField nombreCalleInst;
    private javax.swing.JTextField nombreIns;
    private javax.swing.JTextField numeroInst;
    private javax.swing.JPanel panelInstalaciones;
    private javax.swing.JTable tablaInstalacion;
    // End of variables declaration//GEN-END:variables
}
