/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InterfazPrincipal.java
 *
 * Created on 16-mar-2013, 16:58:04
 */
package InterfazUsuario;

import GestionDeAlumnos.*;
import GestionDeCategorias.GestorCategorias;
import GestionDeUsuarios.*;
import GestionDeTemporadas.*;
import GestionDeEquipos.*;
import GestionDeInstalaciones.GestorInstalacion;
import GestionDePagos.GestorPagos;
import GestionDePartidos.GestorPartidos;
import ServiciosAlmacenamiento.BaseDatos;
import com.toedter.calendar.JTextFieldDateEditor;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/*
 ******************************************************************************
 (c) Copyright 2013 
 * 
 * Moisés Gautier Gómez
 * Julio Ros Martínez
 * Francisco Javier Gómez del Olmo
 * Francisco Santolalla Quiñonero
 * Carlos Jesús Fernández Basso
 * Alexander Moreno Borrego
 * Jesús Manuel Contreras Siles
 * Diego Muñoz Rio
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************
 */
public class PantallaPrincipal extends javax.swing.JFrame {
    
    BaseDatos accesoBD;
    String usuario;
    Statement stmt;
    ResultSet retset;
    ResultSet ultimaActualizacionAlumno;
    String ultimaConsultaAlumno;
    ResultSet ultimaActualizacionUsuario;
    String ultimaConsultaUsuario;
    String consultaAlumnosMostrados;
    String consultaUsuariosMostrados;
    String consultaInstalacionesMostradas;
    Border bordeError;
    boolean noEntry;
    int idC, idT;
    Object equipoAnterior1, equipoAnterior2;

    /**
     * Creates new form InterfazPrincipal
     */
    public PantallaPrincipal() {
        initComponents();
        setLocationRelativeTo(null);
    }
    
    public PantallaPrincipal(BaseDatos acceso, String usuario) {
        accesoBD = acceso;
        this.usuario = usuario;
        initComponents();
        this.setLocationRelativeTo(null);
        ocultarPaneles();
        menuInicioMouseClicked(null);
        initComponentsSegunUsuario();
    }
    
    private void initComponentsSegunUsuario() {
        if (!GestorUsuarios.tengoPermisosAdministrador(accesoBD, usuario)) {
            System.out.print("\ninitcomponent segun user");
            barraMenu.remove(menuUsuarios);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelInicio = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jButton11 = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jButton12 = new javax.swing.JButton();
        jPanel26 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        cerrarSesion = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        panelUsuarios = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        botonNuevoUsuario = new javax.swing.JButton();
        botonGuardarCambiosUsuario = new javax.swing.JButton();
        deshacerCambiosUsuario = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        textfield_nombreUsuario = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        boton_mostrar_Usuarios = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        textfield_apellidoSegundoUsuario = new javax.swing.JTextField();
        textfield_apellidoPrimeroUsuario = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        consultaEquipoUsuario = new javax.swing.JComboBox();
        consultaGrupoUsuario = new javax.swing.JComboBox();
        consultaCategoriaUsuario = new javax.swing.JComboBox();
        consultaTemporadaUsuario = new javax.swing.JComboBox();
        errorModifMovilUsuario = new javax.swing.JLabel();
        errorModifFijoUsuario = new javax.swing.JLabel();
        consultaEntrenadorUsuario = new javax.swing.JComboBox();
        botonEliminarUsuario = new javax.swing.JButton();
        errorEliminarUsuario = new javax.swing.JLabel();
        verEstadisticasEntrenador = new javax.swing.JButton();
        panelEquipos = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        textNombreEquipo = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        comboCatEquipo = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        comboTempEquipo = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        textEntEquipo = new javax.swing.JTextField();
        botonBuscar = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaEquipos = new javax.swing.JTable();
        botonModificarEquipo = new javax.swing.JButton();
        botonEliminarEquipo = new javax.swing.JButton();
        botonInfoEquipo = new javax.swing.JButton();
        botonNuevoEquipo = new javax.swing.JButton();
        botonMostrarEquipos = new javax.swing.JButton();
        labelEquiposMostrados = new javax.swing.JLabel();
        labelNumeroEquipos = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jComboBox1 = new javax.swing.JComboBox();
        verClasificacionEquipos = new javax.swing.JButton();
        PanelPartidos = new javax.swing.JPanel();
        Partidos = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablaPartidos = new javax.swing.JTable();
        BotonModificarPartido = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        BotonJPartido = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        BotonNPartido = new javax.swing.JButton();
        botonMostrarPartidos = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        comboTemporadaPartidos = new javax.swing.JComboBox();
        comboCategoriaPartidos = new javax.swing.JComboBox();
        jLabel26 = new javax.swing.JLabel();
        botonFiltrarPartido = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        comboEquipoLocal = new javax.swing.JComboBox();
        comboEquipoVisitante = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        fechaPartido = new com.toedter.calendar.JDateChooser();
        jButton6 = new javax.swing.JButton();
        barraMenu = new javax.swing.JMenuBar();
        menuInicio = new javax.swing.JMenu();
        menuEquipos = new javax.swing.JMenu();
        menuUsuarios = new javax.swing.JMenu();
        menuPartidos = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1400, 750));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panelInicio.setLayout(new javax.swing.BoxLayout(panelInicio, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel29.setText("Panel de gestión");
        jPanel1.add(jLabel29);

        panelInicio.add(jPanel1);

        jPanel15.setLayout(new javax.swing.BoxLayout(jPanel15, javax.swing.BoxLayout.LINE_AXIS));

        jPanel16.setMaximumSize(new java.awt.Dimension(170, 33));
        jPanel16.setMinimumSize(new java.awt.Dimension(170, 33));
        jPanel16.setPreferredSize(new java.awt.Dimension(170, 33));
        jPanel16.setLayout(new java.awt.GridBagLayout());

        jButton8.setText("Jugadores");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel16.add(jButton8, new java.awt.GridBagConstraints());

        jPanel15.add(jPanel16);

        jPanel17.setLayout(new java.awt.GridBagLayout());

        jLabel35.setText("Esta opción permite gestionar todos los jugadores, esto es: insertar, modificar o eliminar.");
        jPanel17.add(jLabel35, new java.awt.GridBagConstraints());

        jPanel15.add(jPanel17);

        panelInicio.add(jPanel15);

        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.LINE_AXIS));

        jPanel13.setMaximumSize(new java.awt.Dimension(170, 33));
        jPanel13.setMinimumSize(new java.awt.Dimension(170, 33));
        jPanel13.setPreferredSize(new java.awt.Dimension(170, 33));
        jPanel13.setLayout(new java.awt.GridBagLayout());

        jButton7.setText("Grupos");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton7, new java.awt.GridBagConstraints());

        jPanel12.add(jPanel13);

        jPanel14.setLayout(new java.awt.GridBagLayout());

        jLabel32.setText("Esta opción permite gestionar todos los grupos, esto es: insertar, modificar o eliminar.");
        jPanel14.add(jLabel32, new java.awt.GridBagConstraints());

        jPanel12.add(jPanel14);

        panelInicio.add(jPanel12);

        jPanel21.setLayout(new javax.swing.BoxLayout(jPanel21, javax.swing.BoxLayout.LINE_AXIS));

        jPanel22.setMaximumSize(new java.awt.Dimension(170, 33));
        jPanel22.setMinimumSize(new java.awt.Dimension(170, 33));
        jPanel22.setPreferredSize(new java.awt.Dimension(170, 33));
        jPanel22.setLayout(new java.awt.GridBagLayout());

        jButton11.setText("Actividades");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel22.add(jButton11, new java.awt.GridBagConstraints());

        jPanel21.add(jPanel22);

        jPanel23.setLayout(new java.awt.GridBagLayout());

        jLabel42.setText("Esta opción permite gestionar todos los actividades, esto es: insertar, modificar o eliminar.");
        jPanel23.add(jLabel42, new java.awt.GridBagConstraints());

        jPanel21.add(jPanel23);

        panelInicio.add(jPanel21);

        jPanel24.setLayout(new javax.swing.BoxLayout(jPanel24, javax.swing.BoxLayout.LINE_AXIS));

        jPanel25.setMaximumSize(new java.awt.Dimension(170, 33));
        jPanel25.setMinimumSize(new java.awt.Dimension(170, 33));
        jPanel25.setPreferredSize(new java.awt.Dimension(170, 33));
        jPanel25.setLayout(new java.awt.GridBagLayout());

        jButton12.setText("Pagos");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel25.add(jButton12, new java.awt.GridBagConstraints());

        jPanel24.add(jPanel25);

        jPanel26.setLayout(new java.awt.GridBagLayout());

        jLabel43.setText("Esta opción permite gestionar todos los pagos, esto es: modificar o eliminar.");
        jPanel26.add(jLabel43, new java.awt.GridBagConstraints());

        jPanel24.add(jPanel26);

        panelInicio.add(jPanel24);

        jPanel18.setLayout(new javax.swing.BoxLayout(jPanel18, javax.swing.BoxLayout.LINE_AXIS));

        jPanel19.setMaximumSize(new java.awt.Dimension(170, 33));
        jPanel19.setMinimumSize(new java.awt.Dimension(170, 33));
        jPanel19.setPreferredSize(new java.awt.Dimension(170, 33));
        jPanel19.setLayout(new java.awt.GridBagLayout());

        jButton10.setText("Instalaciones");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel19.add(jButton10, new java.awt.GridBagConstraints());

        jPanel18.add(jPanel19);

        jPanel20.setLayout(new java.awt.GridBagLayout());

        jLabel41.setText("Esta opción permite gestionar todos los instalaciones, esto es: insertar, modificar o eliminar.");
        jPanel20.add(jLabel41, new java.awt.GridBagConstraints());

        jPanel18.add(jPanel20);

        panelInicio.add(jPanel18);

        jPanel9.setLayout(new javax.swing.BoxLayout(jPanel9, javax.swing.BoxLayout.LINE_AXIS));

        jPanel10.setMaximumSize(new java.awt.Dimension(170, 33));
        jPanel10.setMinimumSize(new java.awt.Dimension(170, 33));
        jPanel10.setPreferredSize(new java.awt.Dimension(170, 33));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        jButton4.setText("Temporadas");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel10.add(jButton4, new java.awt.GridBagConstraints());

        jPanel9.add(jPanel10);

        jPanel11.setLayout(new java.awt.GridBagLayout());

        jLabel31.setText("Esta opción permite gestionar todas las temporadas, esto es: insertar, modificar o eliminar.");
        jPanel11.add(jLabel31, new java.awt.GridBagConstraints());

        jPanel9.add(jPanel11);

        panelInicio.add(jPanel9);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jPanel3.setMaximumSize(new java.awt.Dimension(170, 33));
        jPanel3.setMinimumSize(new java.awt.Dimension(170, 33));
        jPanel3.setPreferredSize(new java.awt.Dimension(170, 33));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jButton3.setText("Categorias");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3, new java.awt.GridBagConstraints());

        jPanel2.add(jPanel3);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Esta opción permite gestionar todas las categorias, esto es: insertar, modificar o eliminar.");
        jPanel5.add(jLabel1, new java.awt.GridBagConstraints());

        jPanel2.add(jPanel5);

        panelInicio.add(jPanel2);

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));

        jPanel7.setMaximumSize(new java.awt.Dimension(170, 33));
        jPanel7.setMinimumSize(new java.awt.Dimension(170, 33));
        jPanel7.setPreferredSize(new java.awt.Dimension(170, 33));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        cerrarSesion.setText("Cerrar Sesión");
        cerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarSesionActionPerformed(evt);
            }
        });
        jPanel7.add(cerrarSesion, new java.awt.GridBagConstraints());

        jPanel6.add(jPanel7);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel30.setText("Salir del panel de gestión.");
        jPanel8.add(jLabel30, new java.awt.GridBagConstraints());

        jPanel6.add(jPanel8);

        panelInicio.add(jPanel6);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 623;
        gridBagConstraints.ipady = 662;
        gridBagConstraints.weighty = 0.2;
        getContentPane().add(panelInicio, gridBagConstraints);

        panelUsuarios.setVisible(false);
        panelUsuarios.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel18.setText("Resultados de los Usuarios:");
        panelUsuarios.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, 20));

        botonNuevoUsuario.setText("Nuevo Usuario");
        botonNuevoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoUsuarioActionPerformed(evt);
            }
        });
        panelUsuarios.add(botonNuevoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, -1, -1));

        botonGuardarCambiosUsuario.setText("Guardar Cambios");
        botonGuardarCambiosUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarCambiosUsuarioActionPerformed(evt);
            }
        });
        panelUsuarios.add(botonGuardarCambiosUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 610, -1, -1));

        deshacerCambiosUsuario.setText("Deshacer Cambios");
        deshacerCambiosUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deshacerCambiosUsuarioActionPerformed(evt);
            }
        });
        panelUsuarios.add(deshacerCambiosUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 610, -1, -1));

        jLabel19.setText("Buscar Usuarios por:");
        panelUsuarios.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 36, -1, -1));

        jLabel20.setText("Equipo");
        panelUsuarios.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, -1, -1));

        jLabel33.setText("Grupo");
        panelUsuarios.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, -1, -1));

        jLabel34.setText("Tipo Usuario");
        panelUsuarios.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 40, -1, -1));

        jLabel36.setText("Nombre");
        panelUsuarios.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 36, -1, -1));
        panelUsuarios.add(textfield_nombreUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 201, -1));

        jScrollPane2.setAutoscrolls(true);

        tablaUsuarios.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Primer Apellido", "Segundo Apellido", "DNI", "Clave", "Tipo Usuario", "Numero Cuenta", "Tel. Movil", "Tel. Fijo", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaUsuarios);
        tablaUsuarios.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        panelUsuarios.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 1260, 350));

        boton_mostrar_Usuarios.setText("Mostrar Usuarios");
        boton_mostrar_Usuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_mostrar_UsuariosActionPerformed(evt);
            }
        });
        panelUsuarios.add(boton_mostrar_Usuarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, -1));

        jLabel37.setText("Categoria");
        panelUsuarios.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 100, -1, -1));
        panelUsuarios.add(textfield_apellidoSegundoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 60, 201, -1));
        panelUsuarios.add(textfield_apellidoPrimeroUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, 201, -1));

        jLabel38.setText("Apellido Primero");
        panelUsuarios.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, -1, -1));

        jLabel39.setText("Apellido Segundo");
        panelUsuarios.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 40, -1, -1));

        jLabel40.setText("Temporada");
        panelUsuarios.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 100, -1, -1));

        consultaEquipoUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        panelUsuarios.add(consultaEquipoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 100, -1));

        consultaGrupoUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        panelUsuarios.add(consultaGrupoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 120, 100, -1));

        consultaCategoriaUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        panelUsuarios.add(consultaCategoriaUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 120, 100, -1));

        panelUsuarios.add(consultaTemporadaUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 120, 100, -1));

        errorModifMovilUsuario.setForeground(new java.awt.Color(255, 0, 51));
        errorModifMovilUsuario.setText("Error Tel.Movil");
        errorModifMovilUsuario.setVisible(false);
        panelUsuarios.add(errorModifMovilUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 210, -1, -1));

        errorModifFijoUsuario.setForeground(new java.awt.Color(255, 0, 51));
        errorModifFijoUsuario.setText("Error Tel.Fijo");
        errorModifFijoUsuario.setVisible(false);
        panelUsuarios.add(errorModifFijoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 210, -1, -1));

        consultaEntrenadorUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Entrenador", "Administrador" }));
        panelUsuarios.add(consultaEntrenadorUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 60, -1, -1));

        botonEliminarUsuario.setText("Eliminar Usuario");
        botonEliminarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarUsuarioActionPerformed(evt);
            }
        });
        panelUsuarios.add(botonEliminarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 610, -1, -1));

        errorEliminarUsuario.setForeground(new java.awt.Color(255, 0, 102));
        errorEliminarUsuario.setText("No ha seleccionado ningún usuario para ser eliminado");
        panelUsuarios.add(errorEliminarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 610, -1, -1));
        errorEliminarUsuario.setVisible(false);

        verEstadisticasEntrenador.setText("Estadisticas");
        verEstadisticasEntrenador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verEstadisticasEntrenadorActionPerformed(evt);
            }
        });
        panelUsuarios.add(verEstadisticasEntrenador, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 160, 100, -1));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 164;
        gridBagConstraints.ipady = 92;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 0, 22, 0);
        getContentPane().add(panelUsuarios, gridBagConstraints);

        panelEquipos.setVisible(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Equipos");

        jLabel10.setText("Nombre:");

        textNombreEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNombreEquipoActionPerformed(evt);
            }
        });

        jLabel11.setText("Categoria:");

        comboCatEquipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Categoria-" }));
        comboCatEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCatEquipoActionPerformed(evt);
            }
        });

        jLabel12.setText("Temporada:");

        comboTempEquipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Temporada-" }));

        jLabel13.setText("Primer Entrenador:");

        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        tablaEquipos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Categoria", "Temporada", "Primer Entrenador", "Segundo Entrenador", "Sexo"
            }
        ));
        jScrollPane5.setViewportView(tablaEquipos);

        botonModificarEquipo.setText("Modificar");
        botonModificarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarEquipoActionPerformed(evt);
            }
        });

        botonEliminarEquipo.setText("Eliminar");
        botonEliminarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarEquipoActionPerformed(evt);
            }
        });

        botonInfoEquipo.setText("Info");

        botonNuevoEquipo.setText("Nuevo");
        botonNuevoEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoEquipoActionPerformed(evt);
            }
        });

        botonMostrarEquipos.setText("Mostrar Todos");
        botonMostrarEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarEquiposActionPerformed(evt);
            }
        });

        labelEquiposMostrados.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelEquiposMostrados.setText("Numero de equipos:");

        labelNumeroEquipos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Entrenador-" }));

        verClasificacionEquipos.setText("Clasificacion");
        verClasificacionEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verClasificacionEquiposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelEquiposLayout = new javax.swing.GroupLayout(panelEquipos);
        panelEquipos.setLayout(panelEquiposLayout);
        panelEquiposLayout.setHorizontalGroup(
            panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEquiposLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
                    .addGroup(panelEquiposLayout.createSequentialGroup()
                        .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(panelEquiposLayout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelEquiposLayout.createSequentialGroup()
                                        .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelEquiposLayout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(textNombreEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel11)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(comboCatEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel12))
                                            .addGroup(panelEquiposLayout.createSequentialGroup()
                                                .addComponent(jLabel13)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(textEntEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(comboTempEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelEquiposLayout.createSequentialGroup()
                                        .addGap(51, 51, 51)
                                        .addComponent(botonBuscar)
                                        .addGap(56, 56, 56)
                                        .addComponent(botonMostrarEquipos)
                                        .addGap(62, 62, 62)
                                        .addComponent(verClasificacionEquipos))))
                            .addGroup(panelEquiposLayout.createSequentialGroup()
                                .addGap(157, 157, 157)
                                .addComponent(labelEquiposMostrados)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelNumeroEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelEquiposLayout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(botonModificarEquipo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                    .addComponent(botonInfoEquipo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonEliminarEquipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonNuevoEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelEquiposLayout.setVerticalGroup(
            panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEquiposLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel8)
                .addGap(59, 59, 59)
                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(comboTempEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(textNombreEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(comboCatEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(textEntEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonBuscar)
                    .addComponent(botonMostrarEquipos)
                    .addComponent(verClasificacionEquipos))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEquiposLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelEquiposMostrados)
                            .addComponent(labelNumeroEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelEquiposLayout.createSequentialGroup()
                        .addComponent(botonNuevoEquipo)
                        .addGap(18, 18, 18)
                        .addComponent(botonInfoEquipo)
                        .addGap(18, 18, 18)
                        .addComponent(botonModificarEquipo)
                        .addGap(18, 18, 18)
                        .addComponent(botonEliminarEquipo)))
                .addGap(80, 80, 80))
        );

        this.labelEquiposMostrados.setVisible(false);

        getContentPane().add(panelEquipos, new java.awt.GridBagConstraints());

        PanelPartidos.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Partidos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Partidos.setText("Partidos");

        tablaPartidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Hora", "Categoría", "Temporada", "Equipo Local", "Equipo Visitante", "Resultado Local", "Resultado Visitante"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane8.setViewportView(tablaPartidos);

        BotonModificarPartido.setText("Modificar Partido");
        BotonModificarPartido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonModificarPartidoActionPerformed(evt);
            }
        });

        jButton9.setText("Eliminar Partido");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        BotonJPartido.setText("Jugar Partido");
        BotonJPartido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonJPartidoActionPerformed(evt);
            }
        });

        BotonNPartido.setText("Nuevo Partido");
        BotonNPartido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonNPartidoActionPerformed(evt);
            }
        });

        botonMostrarPartidos.setText("Mostrar Partidos");
        botonMostrarPartidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarPartidosActionPerformed(evt);
            }
        });

        jLabel16.setText("Buscar");

        comboTemporadaPartidos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboTemporadaPartidos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboTemporadaPartidosItemStateChanged(evt);
            }
        });

        comboCategoriaPartidos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCategoriaPartidos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCategoriaPartidosItemStateChanged(evt);
            }
        });

        jLabel26.setText("Equipo Local");

        botonFiltrarPartido.setText("Filtrar Partidos");
        botonFiltrarPartido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFiltrarPartidoActionPerformed(evt);
            }
        });

        jLabel27.setText("Equipo Visitante");

        comboEquipoLocal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboEquipoLocal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboEquipoLocalItemStateChanged(evt);
            }
        });

        comboEquipoVisitante.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboEquipoVisitante.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboEquipoVisitanteItemStateChanged(evt);
            }
        });

        jLabel28.setText("Fecha");

        fechaPartido.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fechaPartidoFocusLost(evt);
            }
        });

        jButton6.setText("Introducir XML al Partido");

        javax.swing.GroupLayout PanelPartidosLayout = new javax.swing.GroupLayout(PanelPartidos);
        PanelPartidos.setLayout(PanelPartidosLayout);
        PanelPartidosLayout.setHorizontalGroup(
            PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPartidosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelPartidosLayout.createSequentialGroup()
                        .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelPartidosLayout.createSequentialGroup()
                                .addComponent(BotonNPartido)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BotonModificarPartido)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton9))
                            .addGroup(PanelPartidosLayout.createSequentialGroup()
                                .addComponent(botonMostrarPartidos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonFiltrarPartido)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(PanelPartidosLayout.createSequentialGroup()
                        .addComponent(Partidos)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPartidosLayout.createSequentialGroup()
                        .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PanelPartidosLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboTemporadaPartidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboCategoriaPartidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboEquipoLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboEquipoVisitante, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel28)
                                .addGap(18, 18, 18)
                                .addComponent(fechaPartido, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelPartidosLayout.createSequentialGroup()
                                .addComponent(jScrollPane8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(BotonJPartido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(36, 36, 36))))
        );
        PanelPartidosLayout.setVerticalGroup(
            PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPartidosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Partidos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(comboTemporadaPartidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboCategoriaPartidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel26)
                        .addComponent(jLabel27)
                        .addComponent(comboEquipoLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboEquipoVisitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel28))
                    .addComponent(fechaPartido, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PanelPartidosLayout.createSequentialGroup()
                        .addComponent(BotonJPartido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonMostrarPartidos)
                    .addComponent(botonFiltrarPartido))
                .addGap(19, 19, 19)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonNPartido)
                    .addComponent(BotonModificarPartido)
                    .addComponent(jButton9))
                .addContainerGap())
        );

        getContentPane().add(PanelPartidos, new java.awt.GridBagConstraints());

        menuInicio.setText("Inicio");
        menuInicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuInicioMouseClicked(evt);
            }
        });
        menuInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInicioActionPerformed(evt);
            }
        });
        barraMenu.add(menuInicio);

        menuEquipos.setText("Equipos");
        menuEquipos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuEquiposMouseClicked(evt);
            }
        });
        barraMenu.add(menuEquipos);

        menuUsuarios.setText("Usuarios");
        menuUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuUsuariosMouseClicked(evt);
            }
        });
        barraMenu.add(menuUsuarios);

        menuPartidos.setText("Partidos");
        menuPartidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuPartidosMouseClicked(evt);
            }
        });
        barraMenu.add(menuPartidos);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
private void menuInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInicioActionPerformed
}//GEN-LAST:event_menuInicioActionPerformed
            
private void menuInicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuInicioMouseClicked
    
    ocultarPaneles();
    panelInicio.setVisible(true);
}//GEN-LAST:event_menuInicioMouseClicked
    
    private String leeConsultaPartidos() {
        String consultaPartido = "SELECT";
        
        return consultaPartido;
    }
    
    public void ocultarMensajesError() {
        errorModifMovilUsuario.setVisible(false);
        errorModifFijoUsuario.setVisible(false);
        errorEliminarUsuario.setVisible(false);
    }
            
    private boolean isInteger(String cadena) {
        try {
            int num;
            num = Integer.parseInt(cadena);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
        
private void cerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarSesionActionPerformed
    this.dispose();
    new Acceso().setVisible(true);
}//GEN-LAST:event_cerrarSesionActionPerformed
    
private void menuUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuUsuariosMouseClicked
    /*panelInicio.setVisible(false);
     panelJugadores.setVisible(false);
     panelTemporadas.setVisible(false);
     panelUsuarios.setVisible(true);
     panelGrupos.setVisible(false);*/
    ocultarPaneles();
    panelUsuarios.setVisible(true);
    
    ResultSet consulta;
    
    try {
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM grupo");
        consultaGrupoUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaGrupoUsuario.addItem(consulta.getInt(1));
        }
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM equipo");
        consultaEquipoUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaEquipoUsuario.addItem(consulta.getInt(1));
        }
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM categoria");
        consultaCategoriaUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaCategoriaUsuario.addItem(consulta.getString("tipo"));
        }
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM temporada");
        consultaTemporadaUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaTemporadaUsuario.addItem(consulta.getString("curso"));
        }
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }
}//GEN-LAST:event_menuUsuariosMouseClicked
    
private void botonNuevoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoUsuarioActionPerformed
    ocultarMensajesError();
    new AltaUsuario(accesoBD).setVisible(true);
}//GEN-LAST:event_botonNuevoUsuarioActionPerformed
    
private void botonGuardarCambiosUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarCambiosUsuarioActionPerformed
    ResultSet retsetMostrados;
    ocultarMensajesError();
    //compruebo si se ha mostrado algún resultado antes de guardar los cambios, ya que si no se han mostrado no se ha podido modificar nada
    if (tablaUsuarios.getValueAt(0, 0) == null) {
        return;
    }
    try {
        String consultaUsuario = leeConsultaUsuariosInterfaz();
        retsetMostrados = GestorUsuarios.consultarUsuario(accesoBD, consultaUsuario);
        ultimaActualizacionUsuario = GestorUsuarios.consultarUsuario(accesoBD, consultaUsuario);
        ultimaConsultaUsuario = consultaUsuario;
        int i = 0;
        String updateFila;
        while (retsetMostrados.next()) {
            updateFila = "UPDATE usuario SET ";
            boolean fila_editada = false;
            if (!retsetMostrados.getString("u.nombre").equals(tablaUsuarios.getValueAt(i, 0))) {
                fila_editada = true;
                if (tablaUsuarios.getValueAt(i, 0).toString().length() < 45) {
                    updateFila = updateFila + " nombre='" + tablaUsuarios.getValueAt(i, 0) + "', ";
                } else {
                    updateFila = updateFila + " nombre='" + tablaUsuarios.getValueAt(i, 0).toString().substring(0, 45) + "', ";
                }
            }
            if (!retsetMostrados.getString("u.primerApellido").equals(tablaUsuarios.getValueAt(i, 1))) {
                fila_editada = true;
                if (tablaUsuarios.getValueAt(i, 1).toString().length() < 75) {
                    updateFila = updateFila + " primerApellido='" + tablaUsuarios.getValueAt(i, 1) + "', ";
                } else {
                    updateFila = updateFila + " primerApellido='" + tablaUsuarios.getValueAt(i, 1).toString().substring(0, 75) + "', ";
                }
            }
            if (!retsetMostrados.getString("u.segundoApellido").equals(tablaUsuarios.getValueAt(i, 2))) {
                fila_editada = true;
                if (tablaUsuarios.getValueAt(i, 2).toString().length() < 45) {
                    updateFila = updateFila + " segundoApellido='" + tablaUsuarios.getValueAt(i, 2) + "', ";
                } else {
                    updateFila = updateFila + " segundoApellido='" + tablaUsuarios.getValueAt(i, 2).toString().substring(0, 45) + "', ";
                }
            }
            if (!retsetMostrados.getString("u.dni").equals(tablaUsuarios.getValueAt(i, 3))) {
                fila_editada = true;
                if (tablaUsuarios.getValueAt(i, 3).toString().length() < 12) {
                    updateFila = updateFila + " dni='" + tablaUsuarios.getValueAt(i, 3) + "', ";
                } else {
                    updateFila = updateFila + " dni='" + tablaUsuarios.getValueAt(i, 3).toString().substring(0, 12) + "', ";
                }
            }
            if (tablaUsuarios.getValueAt(i, 9) != null) {
                if (retsetMostrados.getString("u.email") != null) {
                    if (!retsetMostrados.getString("u.email").equals(tablaUsuarios.getValueAt(i, 9))) {
                        fila_editada = true;
                        if (tablaUsuarios.getValueAt(i, 9).toString().length() < 45) {
                            updateFila = updateFila + " email='" + tablaUsuarios.getValueAt(i, 9) + "', ";
                        } else {
                            updateFila = updateFila + " email='" + tablaUsuarios.getValueAt(i, 9).toString().substring(0, 45) + "', ";
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaUsuarios.getValueAt(i, 9).toString().length() < 45) {
                        updateFila = updateFila + " email='" + tablaUsuarios.getValueAt(i, 9) + "', ";
                    } else {
                        updateFila = updateFila + " email='" + tablaUsuarios.getValueAt(i, 9).toString().substring(0, 44) + "', ";
                    }
                }
            } else {
                if (retsetMostrados.getString("u.email") != null) {
                    fila_editada = true;
                    updateFila = updateFila + " email=null, ";
                }
            }
            
            if (tablaUsuarios.getValueAt(i, 4) != null) {
                if (retsetMostrados.getString("u.clave") != null) {
                    if (!retsetMostrados.getString("u.clave").equals(tablaUsuarios.getValueAt(i, 4))) {
                        fila_editada = true;
                        if (tablaUsuarios.getValueAt(i, 4).toString().length() < 30) {
                            updateFila = updateFila + " clave='" + tablaUsuarios.getValueAt(i, 4) + "', ";
                        } else {
                            updateFila = updateFila + " clave='" + tablaUsuarios.getValueAt(i, 4).toString().substring(0, 30) + "', ";
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaUsuarios.getValueAt(i, 4).toString().length() < 30) {
                        updateFila = updateFila + " clave='" + tablaUsuarios.getValueAt(i, 4) + "', ";
                    } else {
                        updateFila = updateFila + " clave='" + tablaUsuarios.getValueAt(i, 4).toString().substring(0, 30) + "', ";
                    }
                }
            } else {
                if (retsetMostrados.getString("u.clave") != null) {
                    fila_editada = true;
                    updateFila = updateFila + " clave=null, ";
                }
            }
            if (tablaUsuarios.getValueAt(i, 6) != null) {
                if (retsetMostrados.getString("u.numeroCuenta") != null) {
                    if (!retsetMostrados.getString("u.numeroCuenta").equals(tablaUsuarios.getValueAt(i, 6))) {
                        fila_editada = true;
                        if (tablaUsuarios.getValueAt(i, 6).toString().length() < 45) {
                            updateFila = updateFila + " numeroCuenta='" + tablaUsuarios.getValueAt(i, 6) + "', ";
                        } else {
                            updateFila = updateFila + " numeroCuenta='" + tablaUsuarios.getValueAt(i, 6).toString().substring(0, 45) + "', ";
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaUsuarios.getValueAt(i, 6).toString().length() < 45) {
                        updateFila = updateFila + " numeroCuenta='" + tablaUsuarios.getValueAt(i, 6) + "', ";
                    } else {
                        updateFila = updateFila + " numeroCuenta='" + tablaUsuarios.getValueAt(i, 6).toString().substring(0, 45) + "', ";
                    }
                }
            } else {
                if (retsetMostrados.getString("u.numeroCuenta") != null) {
                    fila_editada = true;
                    updateFila = updateFila + " numeroCuenta=null, ";
                }
            }
            if (tablaUsuarios.getValueAt(i, 7) != null) {
                if (isInteger((String) tablaUsuarios.getValueAt(i, 7))) {
                    if (retsetMostrados.getString("u.telmovil") != null) {
                        if (!retsetMostrados.getString("u.telmovil").equals(tablaUsuarios.getValueAt(i, 7))) {
                            fila_editada = true;
                            updateFila = updateFila + " telmovil=" + tablaUsuarios.getValueAt(i, 7) + ", ";
                        }
                    } else {
                        fila_editada = true;
                        updateFila = updateFila + " telmovil=" + tablaUsuarios.getValueAt(i, 7) + ", ";
                    }
                } else {
                    //errorModifMovilUsuario.setVisible(true);
                }
            } else {
                if (retsetMostrados.getString("u.telmovil") != null) {
                    fila_editada = true;
                    updateFila = updateFila + " telmovil=null, ";
                }
            }
            if (tablaUsuarios.getValueAt(i, 8) != null) {
                if (isInteger((String) tablaUsuarios.getValueAt(i, 8))) {
                    if (retsetMostrados.getString("u.telFijo") != null) {
                        if (!retsetMostrados.getString("u.telFijo").equals(tablaUsuarios.getValueAt(i, 8))) {
                            fila_editada = true;
                            updateFila = updateFila + " telFijo=" + tablaUsuarios.getValueAt(i, 8) + ", ";
                        }
                    } else {
                        fila_editada = true;
                        updateFila = updateFila + " telFijo=" + tablaUsuarios.getValueAt(i, 8) + ", ";
                    }
                } else {
                    //errorModifFijoUsuario.setVisible(true);
                }
            } else {
                if (retsetMostrados.getString("u.telFijo") != null) {
                    fila_editada = true;
                    updateFila = updateFila + " telFijo=null, ";
                }
            }
            updateFila = updateFila.substring(0, updateFila.length() - 2);
            updateFila = updateFila + " WHERE usuario.idusuario=" + retsetMostrados.getString("u.idUsuario");
            if (fila_editada == true) {
                GestorUsuarios.actualizaUsuario(accesoBD, updateFila);
                System.out.print("\nModificado " + i + " act\n " + updateFila);
            }
            i++;
        }
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }
}//GEN-LAST:event_botonGuardarCambiosUsuarioActionPerformed
    
private void deshacerCambiosUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deshacerCambiosUsuarioActionPerformed
    ResultSet estadoActual;
    estadoActual = GestorUsuarios.consultarUsuario(accesoBD, ultimaConsultaUsuario);
    ocultarMensajesError();
    try {
        String updateFila;
        while (estadoActual.next()) {
            ultimaActualizacionUsuario.next();
            updateFila = "UPDATE usuario SET ";
            boolean fila_editada = false;
            if (!ultimaActualizacionUsuario.getString("u.nombre").equals(estadoActual.getString("u.nombre"))) {
                fila_editada = true;
                updateFila = updateFila + " nombre='" + ultimaActualizacionUsuario.getString("u.nombre") + "', ";
            }
            if (!ultimaActualizacionUsuario.getString("u.primerApellido").equals(estadoActual.getString("u.primerApellido"))) {
                fila_editada = true;
                updateFila = updateFila + " primerApellido='" + ultimaActualizacionUsuario.getString("u.primerApellido") + "', ";
            }
            if (!ultimaActualizacionUsuario.getString("u.segundoApellido").equals(estadoActual.getString("u.segundoApellido"))) {
                fila_editada = true;
                updateFila = updateFila + " segundoApellido='" + ultimaActualizacionUsuario.getString("u.segundoApellido") + "', ";
            }
            if (!ultimaActualizacionUsuario.getString("u.dni").equals(estadoActual.getString("u.dni"))) {
                fila_editada = true;
                updateFila = updateFila + " dni='" + ultimaActualizacionUsuario.getString("u.dni") + "', ";
            }
            if (ultimaActualizacionUsuario.getString("u.email") != null) { //antes no estaba a null
                if (estadoActual.getString("u.email") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionUsuario.getString("u.email").equals(estadoActual.getString("u.email"))) {
                        fila_editada = true;
                        updateFila = updateFila + " email='" + ultimaActualizacionUsuario.getString("u.email") + "', ";
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    updateFila = updateFila + " email='" + ultimaActualizacionUsuario.getString("u.email") + "', ";
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("u.email") != null) {    //ahora no esta a null
                    fila_editada = true;
                    updateFila = updateFila + " email=null, ";
                }
            }
            if (ultimaActualizacionUsuario.getString("u.numerocuenta") != null) { //antes no estaba a null
                if (estadoActual.getString("u.numerocuenta") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionUsuario.getString("u.numerocuenta").equals(estadoActual.getString("u.numerocuenta"))) {
                        fila_editada = true;
                        updateFila = updateFila + " numerocuenta='" + ultimaActualizacionUsuario.getString("u.numerocuenta") + "', ";
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    updateFila = updateFila + " numerocuenta='" + ultimaActualizacionUsuario.getString("u.numerocuenta") + "', ";
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("u.numerocuenta") != null) {    //ahora no esta a null
                    fila_editada = true;
                    updateFila = updateFila + " numerocuenta=null, ";
                }
            }
            if (ultimaActualizacionUsuario.getString("u.telmovil") != null) { //antes no estaba a null
                if (estadoActual.getString("u.telmovil") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionUsuario.getString("u.telmovil").equals(estadoActual.getString("u.telmovil"))) {
                        fila_editada = true;
                        updateFila = updateFila + " telmovil=" + ultimaActualizacionUsuario.getString("u.telmovil") + ", ";
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    updateFila = updateFila + " telmovil=" + ultimaActualizacionUsuario.getString("u.telmovil") + ", ";
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("u.telmovil") != null) {    //ahora no esta a null
                    fila_editada = true;
                    updateFila = updateFila + " telmovil=null, ";
                }
            }
            if (ultimaActualizacionUsuario.getString("u.telfijo") != null) { //antes no estaba a null
                if (estadoActual.getString("u.telfijo") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionUsuario.getString("u.telfijo").equals(estadoActual.getString("u.telfijo"))) {
                        fila_editada = true;
                        updateFila = updateFila + " telfijo=" + ultimaActualizacionUsuario.getString("u.telfijo") + ", ";
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    updateFila = updateFila + " telfijo=" + ultimaActualizacionUsuario.getString("u.telfijo") + ", ";
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("u.telfijo") != null) {    //ahora no esta a null
                    fila_editada = true;
                    updateFila = updateFila + " telfijo=null, ";
                }
            }
            if (ultimaActualizacionUsuario.getString("u.clave") != null) { //antes no estaba a null
                if (estadoActual.getString("u.clave") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionUsuario.getString("u.clave").equals(estadoActual.getString("u.clave"))) {
                        fila_editada = true;
                        updateFila = updateFila + " clave='" + ultimaActualizacionUsuario.getString("u.clave") + "', ";
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    updateFila = updateFila + " clave='" + ultimaActualizacionUsuario.getString("u.clave") + "', ";
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("u.clave") != null) {    //ahora no esta a null
                    fila_editada = true;
                    updateFila = updateFila + " clave=null, ";
                }
            }
            updateFila = updateFila.substring(0, updateFila.length() - 2);
            updateFila = updateFila + " WHERE usuario.idusuario=" + ultimaActualizacionUsuario.getString("u.idusuario");
            if (fila_editada == true) {
                System.out.print("\nVuelta atras  act\n " + updateFila);
                GestorUsuarios.actualizaUsuario(accesoBD, updateFila);
            }
        }
        
        boton_mostrar_UsuariosActionPerformed(null);
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }
    
}//GEN-LAST:event_deshacerCambiosUsuarioActionPerformed
    private String leeConsultaUsuariosInterfaz() {
        String consulta_usuarios = "select u.idUsuario, u.nombre, u.primerApellido, u.segundoApellido, u.DNI, u.clave, u.entrenador, u.numeroCuenta, u.telMovil, u.telFijo, u.email"
                + " FROM ";
        String tablasImplicadas = " usuario u ";
        String condicionesConsulta = " WHERE ";
        
        if (!textfield_nombreUsuario.getText().equals("") || !textfield_apellidoPrimeroUsuario.getText().equals("") || !textfield_apellidoSegundoUsuario.getText().equals("")
                || !consultaEntrenadorUsuario.getSelectedItem().equals("") || !consultaEquipoUsuario.getSelectedItem().equals("") || !consultaGrupoUsuario.getSelectedItem().equals("")
                || !consultaCategoriaUsuario.getSelectedItem().equals("") || !consultaTemporadaUsuario.getSelectedItem().equals("")) {
            if (!textfield_nombreUsuario.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " u.nombre='" + textfield_nombreUsuario.getText() + "' AND ";
            }
            if (!textfield_apellidoPrimeroUsuario.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " u.primerapellido='" + textfield_apellidoPrimeroUsuario.getText() + "' AND ";
            }
            if (!textfield_apellidoSegundoUsuario.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " u.segundoapellido='" + textfield_apellidoSegundoUsuario.getText() + "' AND ";
            }
            if (!consultaEntrenadorUsuario.getSelectedItem().equals("")) {
                if (consultaEntrenadorUsuario.getSelectedItem().equals("Entrenador")) {
                    condicionesConsulta = condicionesConsulta + " u.entrenador=" + true + " AND ";
                } else {
                    condicionesConsulta = condicionesConsulta + " u.entrenador=" + false + " AND ";
                }
            }
            if (!consultaGrupoUsuario.getSelectedItem().equals("") || !consultaCategoriaUsuario.getSelectedItem().equals("") || !consultaTemporadaUsuario.getSelectedItem().equals("")) {
                tablasImplicadas = tablasImplicadas + " , grupo ";
                condicionesConsulta = condicionesConsulta + " grupo.usuario_idusuario=u.idusuario AND ";
                if (!consultaGrupoUsuario.getSelectedItem().equals("")) {
                    condicionesConsulta = condicionesConsulta + " grupo.idGrupo=" + consultaGrupoUsuario.getSelectedItem() + " AND ";
                }
                if (!consultaCategoriaUsuario.getSelectedItem().equals("")) {
                    tablasImplicadas = tablasImplicadas + " , categoria ";
                    condicionesConsulta = condicionesConsulta + " grupo.Categoria_idCategoria=categoria.idCategoria AND categoria.tipo='" + consultaCategoriaUsuario.getSelectedItem() + "' AND ";
                }
                if (!consultaTemporadaUsuario.getSelectedItem().equals("")) {
                    tablasImplicadas = tablasImplicadas + " , temporada ";
                    condicionesConsulta = condicionesConsulta + " grupo.Temporada_idTemporada=temporada.idTemporada and temporada.curso='" + consultaTemporadaUsuario.getSelectedItem() + "' AND ";
                }
            }
            if (!consultaEquipoUsuario.getSelectedItem().equals("")) {
                tablasImplicadas = tablasImplicadas + " , rango ";
                condicionesConsulta = condicionesConsulta + " rango.usuario_idusuario=u.idusuario AND rango.equipo_idequipo=" + consultaEquipoUsuario.getSelectedItem() + " AND ";
            }
            
            condicionesConsulta = condicionesConsulta.substring(0, condicionesConsulta.length() - 4);
            tablasImplicadas = tablasImplicadas + condicionesConsulta;
        }
        consulta_usuarios = consulta_usuarios + tablasImplicadas;
        
        return consulta_usuarios;
    }
private void boton_mostrar_UsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_mostrar_UsuariosActionPerformed
    try {
        ocultarMensajesError();
        String consulta_usuarios = leeConsultaUsuariosInterfaz();
        consultaUsuariosMostrados = consulta_usuarios;
        System.out.print("\nLA consulta " + consulta_usuarios);
        retset = GestorUsuarios.consultarUsuario(accesoBD, consulta_usuarios);
        //retset = accesoBD.ejecutaConsulta(consulta_alumnos);
        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null}
        },
                new String[]{
            "Nombre", "Primer Apellido", "Segundo Apellido", "DNI", "Clave", "Tipo Usuario", "Numero Cuenta", "Tel. Movil", "Tel. Fijo", "Email"
        }) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                true, true, true, true, true, false, true, true, true, true
            };
            
            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
            
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
        modelo_tabla = tablaUsuarios.getModel();
        int i = 0;
        while (retset.next()) {
            if (i < 25) {
                tablaUsuarios.setValueAt(retset.getString("u.nombre"), i, 0);
                tablaUsuarios.setValueAt(retset.getString("u.primerApellido"), i, 1);
                tablaUsuarios.setValueAt(retset.getString("u.segundoApellido"), i, 2);
                tablaUsuarios.setValueAt(retset.getString("u.dni"), i, 3);
                tablaUsuarios.setValueAt(retset.getString("u.clave"), i, 4);
                if (retset.getString("u.entrenador").equals("0")) {
                    tablaUsuarios.setValueAt("Administrador", i, 5);
                } else {
                    tablaUsuarios.setValueAt("Entrenador", i, 5);
                }
                
                tablaUsuarios.setValueAt(retset.getString("u.numerocuenta"), i, 6);
                tablaUsuarios.setValueAt(retset.getString("u.telmovil"), i, 7);
                tablaUsuarios.setValueAt(retset.getString("u.telfijo"), i, 8);
                tablaUsuarios.setValueAt(retset.getString("u.email"), i, 9);
            } else {
                javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaUsuarios.getModel();
                Object nuevo[] = {"", "", ""};
                temp.addRow(nuevo);
                tablaUsuarios.setValueAt(retset.getString("u.nombre"), i, 0);
                tablaUsuarios.setValueAt(retset.getString("u.primerApellido"), i, 1);
                tablaUsuarios.setValueAt(retset.getString("u.segundoApellido"), i, 2);
                tablaUsuarios.setValueAt(retset.getString("u.dni"), i, 3);
                tablaUsuarios.setValueAt(retset.getString("u.clave"), i, 4);
                if (retset.getString("u.entrenador").equals("0")) {
                    tablaUsuarios.setValueAt("Administrador", i, 5);
                } else {
                    tablaUsuarios.setValueAt("Entrenador", i, 5);
                }
                tablaUsuarios.setValueAt(retset.getString("u.numerocuenta"), i, 6);
                tablaUsuarios.setValueAt(retset.getString("u.telmovil"), i, 7);
                tablaUsuarios.setValueAt(retset.getString("u.telfijo"), i, 8);
                tablaUsuarios.setValueAt(retset.getString("u.email"), i, 9);
            }
            i++;
        }
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }
    
}//GEN-LAST:event_boton_mostrar_UsuariosActionPerformed
        
private void botonEliminarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarUsuarioActionPerformed
    ocultarMensajesError();
    int selection = JOptionPane.showConfirmDialog(this, "Desea eliminar el usuario?", "Eliminar usuario", JOptionPane.YES_NO_OPTION);
    if (selection == JOptionPane.YES_OPTION) {
        
        if (tablaUsuarios.getSelectedRow() == -1) {
            errorEliminarUsuario.setVisible(true);
        } else {
            int posTabla = tablaUsuarios.getSelectedRow();
            
            try {
                ResultSet usuariosMostrados = GestorAlumnos.consultarAlumno(accesoBD, consultaUsuariosMostrados);
                int i = 0;
                while (i <= posTabla) {
                    usuariosMostrados.next();
                    i++;
                }
                
                GestorUsuarios.eliminaUsuario(accesoBD,
                        usuariosMostrados.getString("u.nombre"), usuariosMostrados.getString("u.primerApellido"), usuariosMostrados.getString("u.segundoApellido"),
                        usuariosMostrados.getString("u.dni"), usuariosMostrados.getString("u.clave"), usuariosMostrados.getBoolean("u.entrenador"),
                        usuariosMostrados.getInt("u.telMovil"), usuariosMostrados.getInt("u.telFijo"), usuariosMostrados.getString("u.email"),
                        usuariosMostrados.getString("u.numeroCuenta"));
                
                
                boton_mostrar_UsuariosActionPerformed(null);
            } catch (SQLException ex) {
                System.out.print(ex.getMessage());
            }
        }
    }
}//GEN-LAST:event_botonEliminarUsuarioActionPerformed
            
    
    
                        
    private void textNombreEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNombreEquipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNombreEquipoActionPerformed
    
    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        try {
            actualizaTablaEquiposFiltro(textNombreEquipo.getText(), comboTempEquipo.getSelectedItem().toString(), comboCatEquipo.getSelectedItem().toString(),
                    textEntEquipo.getText());
            labelEquiposMostrados.setVisible(true);
            labelNumeroEquipos.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_botonBuscarActionPerformed
    
    private void menuEquiposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuEquiposMouseClicked
        ocultarPaneles();
        panelEquipos.setVisible(true);
        
        try {
            actualizaComboCatEquipo();
            actualizaComboTempEquipo();
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuEquiposMouseClicked
                    
    private void comboCatEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCatEquipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCatEquipoActionPerformed
    
    private void botonNuevoEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoEquipoActionPerformed
        try {
            new NuevoEquipo(accesoBD).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonNuevoEquipoActionPerformed
        
    private void botonMostrarEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarEquiposActionPerformed
        try {
            actualizaTablaEquipos();
            labelEquiposMostrados.setVisible(true);
            labelNumeroEquipos.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonMostrarEquiposActionPerformed
    
    private void botonEliminarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarEquipoActionPerformed
    }//GEN-LAST:event_botonEliminarEquipoActionPerformed
                                            
    private void menuPartidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuPartidosMouseClicked
        // TODO add your handling code here:
        ocultarPaneles();
        idC = idT = 0;
        noEntry = true;
        tablaPartidos.setEnabled(false);
        ((JTextFieldDateEditor) fechaPartido.getComponents()[1]).setEditable(false);
        try {
            actualizaComboTemporadaPartidos();
            actualizaComboCategoriaPartidos();
            List<String> equipos = new ArrayList<String>();
            equipos = getListaEquipos(idC, idT);
            actualizaComboEquipoPartidos(equipos, 1);
            actualizaComboEquipoPartidos(equipos, 2);
        } catch (SQLException e) {
            Logger.getLogger(AñadirModificarTemporada.class.getName()).log(Level.SEVERE, null, e);
        }
        noEntry = false;
        PanelPartidos.setVisible(true);
    }//GEN-LAST:event_menuPartidosMouseClicked
                        
    private void botonFiltrarPartidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFiltrarPartidoActionPerformed
        // TODO add your handling code here:
        String fecha, temporada, categoria, equipoLoc, equipoVis;
        if (fechaPartido.getDate() != null) {
            java.sql.Date sqlFechaPartido = new java.sql.Date(fechaPartido.getDate().getTime());
            fecha = sqlFechaPartido.toString();
        } else {
            fecha = null;
        }
        if (comboTemporadaPartidos.getSelectedItem() != "-Temporada-") {
            temporada = comboTemporadaPartidos.getSelectedItem().toString();
        } else {
            temporada = null;
        }
        
        if (comboCategoriaPartidos.getSelectedItem() != "-Categoria-") {
            categoria = comboCategoriaPartidos.getSelectedItem().toString();
        } else {
            categoria = null;
        }
        
        if (comboEquipoLocal.getSelectedItem() != "-Equipo Local-") {
            equipoLoc = comboEquipoLocal.getSelectedItem().toString();
        } else {
            equipoLoc = null;
        }
        
        if (comboEquipoVisitante.getSelectedItem() != "-Equipo Visitante-") {
            equipoVis = comboEquipoVisitante.getSelectedItem().toString();
        } else {
            equipoVis = null;
        }
        try {
            actualizaTablaPartidosFiltro(fecha, temporada, categoria, equipoLoc, equipoVis);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonFiltrarPartidoActionPerformed
    
    private void BotonNPartidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonNPartidoActionPerformed
        // TODO add your handling code here:
        ocultarMensajesError();
        try {
            new NuevoPartido(accesoBD, this).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BotonNPartidoActionPerformed
    
    private void BotonJPartidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonJPartidoActionPerformed
        // TODO add your handling code here:
        ocultarMensajesError();
        new JugarPartido().setVisible(true);
    }//GEN-LAST:event_BotonJPartidoActionPerformed
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed
    
    private void BotonModificarPartidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonModificarPartidoActionPerformed
        // TODO add your handling code here:
        ocultarMensajesError();
        new ModificarPartido().setVisible(true);
    }//GEN-LAST:event_BotonModificarPartidoActionPerformed
    
    private void fechaPartidoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fechaPartidoFocusLost
        /*Date dateFromDateChooser = fechaPartido.getDate();
         String dateString = String.format("%1$tY-%1$tm-%1$td", dateFromDateChooser);
         if (dateString.equals("null-null-null")) {
         fechaPartido.setBorder(bordeError);
         } else {
         fechaPartido.setBorder(bordeDatePicker);
         }*/
    }//GEN-LAST:event_fechaPartidoFocusLost
    
    private void botonMostrarPartidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarPartidosActionPerformed
        // TODO add your handling code here:

        actualizaTablaPartidos();
        
    }//GEN-LAST:event_botonMostrarPartidosActionPerformed
    
    private void actualizaTablaPartidos() {
        List<List<String>> lpar = new ArrayList<List<String>>();
        try {
            lpar = GestorPartidos.getListaPartidos(accesoBD);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultTableModel dtm = new DefaultTableModel();
        dtm.addColumn("Fecha");
        dtm.addColumn("Hora");
        dtm.addColumn("Categoría");
        dtm.addColumn("Temporada");
        dtm.addColumn("Equipo Local");
        dtm.addColumn("Equipo Visitante");
        dtm.addColumn("Resultado Local");
        dtm.addColumn("Resultado Visitante");
        
        String aux;
        Object[] fila = new Object[8];
        for (List<String> it : lpar) {
            aux = it.get(0);
            fila[0] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[1] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[2] = getCategoria(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[3] = getTemporada(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[4] = getEquipo(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[5] = getEquipo(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[6] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[7] = aux;
            dtm.addRow(fila);
        }
        
        tablaPartidos.setModel(dtm);
        
    }
    
    private void actualizaTablaPartidosFiltro(String fecha, String temporada, String categoria, String equipoLoc, String equipoVis) throws SQLException {
        List<List<String>> lpar = new ArrayList<List<String>>();
        int idCat = 0;
        idCat = GestorCategorias.getIdCategoria(accesoBD, categoria);
        System.out.println();
        System.out.println(equipoLoc);
        try {
            lpar = GestorPartidos.getListaPartidosFiltro(accesoBD, fecha, String.valueOf(GestorTemporadas.getIdTemporada(accesoBD, temporada)),
                    String.valueOf(idCat), String.valueOf(GestorEquipos.getIdEquipo(accesoBD, equipoLoc, categoria)),
                    String.valueOf(GestorEquipos.getIdEquipo(accesoBD, equipoVis, categoria)));
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultTableModel dtm = new DefaultTableModel();
        dtm.addColumn("Fecha");
        dtm.addColumn("Hora");
        dtm.addColumn("Categoría");
        dtm.addColumn("Temporada");
        dtm.addColumn("Equipo Local");
        dtm.addColumn("Equipo Visitante");
        dtm.addColumn("Resultado Local");
        dtm.addColumn("Resultado Visitante");
        
        String aux;
        Object[] fila = new Object[8];
        for (List<String> it : lpar) {
            aux = it.get(0);
            fila[0] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[1] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[2] = getCategoria(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[3] = getTemporada(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[4] = getEquipo(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[5] = getEquipo(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[6] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[7] = aux;
            dtm.addRow(fila);
        }
        
        tablaPartidos.setModel(dtm);
        
    }
    
    private void mostrarMensajeError(String mensaje) {
        JOptionPane.showMessageDialog(null,
                mensaje, "Error",
                JOptionPane.ERROR_MESSAGE);
    }
    
    private void botonModificarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarEquipoActionPerformed
        // TODO add your handling code here:

        if (tablaEquipos.getSelectedRow() > 1) {
            String nombreEquipo = (String) tablaEquipos.getValueAt(tablaEquipos.getSelectedRow(), 0);
            String selecCat = (String) tablaEquipos.getValueAt(tablaEquipos.getSelectedRow(), 1);
            String selecTemp = (String) tablaEquipos.getValueAt(tablaEquipos.getSelectedRow(), 2);
            String primerEntr = (String) tablaEquipos.getValueAt(tablaEquipos.getSelectedRow(), 3);
            String segundoEntr = (String) tablaEquipos.getValueAt(tablaEquipos.getSelectedRow(), 4);
            
            if (!nombreEquipo.isEmpty() || !selecCat.isEmpty() || !selecTemp.isEmpty() || !primerEntr.isEmpty() || !segundoEntr.isEmpty()) {
                ocultarMensajesError();
                
                try {
                    new ModificarEquipo(accesoBD, nombreEquipo, selecCat, selecTemp, primerEntr, segundoEntr).setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                mostrarMensajeError("Falta algún campo por editar");
            }
            
        } else {
            mostrarMensajeError("No se ha seleccionado ninguna fila de la tabla");
        }
    }//GEN-LAST:event_botonModificarEquipoActionPerformed

    //***************************************JAVI******************************************************//
    private void verEstadisticasEntrenadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verEstadisticasEntrenadorActionPerformed
        
        String usuarioElegido;
        ocultarMensajesError();
        ResultSet retset = null;
        
        int i = tablaUsuarios.getSelectedRow();
        if (i == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione un entrenador para ver estadisticas");
        } else {
            String nombre = (String) tablaUsuarios.getValueAt(i, 0);
            String primerApellido = (String) tablaUsuarios.getValueAt(i, 1);
            String segundoApellido = (String) tablaUsuarios.getValueAt(i, 2);
            String DNI = (String) tablaUsuarios.getValueAt(i, 3);
            
            String tipo = (String) tablaUsuarios.getValueAt(i, 5);
            
            usuarioElegido = nombre + " " + primerApellido + " " + segundoApellido;
            
            try {
                retset = GestorUsuarios.consultarEstadisticasEntrenador(accesoBD, nombre, primerApellido, segundoApellido, DNI);
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if (retset == null || !"Entrenador".equals(tipo)) {
                if (!"Entrenador".equals(tipo)) {
                    JOptionPane.showMessageDialog(null, "Este usuario no tiene estadisticas ya que no es entrenador");
                } else {
                    JOptionPane.showMessageDialog(null, "No hay datos que mostrar para el usuario");
                }
            } else {
                new EstadisticasEntrenador(accesoBD, retset, usuarioElegido).setVisible(true);
            }
            
        }
    }//GEN-LAST:event_verEstadisticasEntrenadorActionPerformed
        
    private void verClasificacionEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verClasificacionEquiposActionPerformed
        
        ocultarMensajesError();
        new ClasificacionLiga(accesoBD).setVisible(true);
    }//GEN-LAST:event_verClasificacionEquiposActionPerformed
    
    private void comboCategoriaPartidosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCategoriaPartidosItemStateChanged
        // TODO add your handling code here:
        if (!noEntry) {
            if (comboCategoriaPartidos.getSelectedItem() != "-Categoria-") {
                try {
                    idC = GestorCategorias.getIdCategoria(accesoBD, comboCategoriaPartidos.getSelectedItem().toString());
                } catch (SQLException ex) {
                    Logger.getLogger(NuevoPartido.class.getName()).log(Level.SEVERE, null, ex);
                }
                List<String> equipos = new ArrayList<String>();
                try {
                    noEntry = true;
                    equipos = getListaEquipos(idC, idT);
                    actualizaComboEquipoPartidos(equipos, 1);
                    actualizaComboEquipoPartidos(equipos, 2);
                    noEntry = false;
                } catch (SQLException ex) {
                    Logger.getLogger(NuevoPartido.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                idC = 0;
                List<String> equipos = new ArrayList<String>();
                try {
                    noEntry = true;
                    equipos = getListaEquipos(idC, idT);
                    actualizaComboEquipoPartidos(equipos, 1);
                    actualizaComboEquipoPartidos(equipos, 2);
                    noEntry = false;
                } catch (SQLException ex) {
                    Logger.getLogger(NuevoPartido.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            equipoAnterior1 = "";
            equipoAnterior2 = "";
        }
    }//GEN-LAST:event_comboCategoriaPartidosItemStateChanged
    
    private void comboTemporadaPartidosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboTemporadaPartidosItemStateChanged
        // TODO add your handling code here:
        if (!noEntry) {
            if (comboTemporadaPartidos.getSelectedItem() != "-Temporada-") {
                try {
                    idT = GestorTemporadas.getIdTemporada(accesoBD, comboTemporadaPartidos.getSelectedItem().toString());
                } catch (SQLException ex) {
                    Logger.getLogger(NuevoPartido.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_comboTemporadaPartidosItemStateChanged
    
    private void comboEquipoLocalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboEquipoLocalItemStateChanged
        // TODO add your handling code here:
        if (!noEntry) {
            if (comboEquipoLocal.getSelectedItem() != "-Equipo Local-") {
                if (equipoAnterior1 == "") {
                    equipoAnterior1 = comboEquipoLocal.getSelectedItem();
                    comboEquipoVisitante.removeItem(equipoAnterior1);
                    
                } else {
                    comboEquipoVisitante.addItem(equipoAnterior1);
                    equipoAnterior1 = comboEquipoLocal.getSelectedItem();
                    comboEquipoVisitante.removeItem(equipoAnterior1);
                }
            } else {
                if (equipoAnterior1 != "") {
                    comboEquipoVisitante.addItem(equipoAnterior1);
                    equipoAnterior1 = "";
                }
            }
        }
    }//GEN-LAST:event_comboEquipoLocalItemStateChanged
    
    private void comboEquipoVisitanteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboEquipoVisitanteItemStateChanged
        // TODO add your handling code here:
        if (!noEntry) {
            if (comboEquipoVisitante.getSelectedItem() != "-Equipo Visitante-") {
                if (equipoAnterior2 == "") {
                    equipoAnterior2 = comboEquipoVisitante.getSelectedItem();
                    comboEquipoLocal.removeItem(equipoAnterior2);
                    
                } else {
                    comboEquipoLocal.addItem(equipoAnterior2);
                    equipoAnterior2 = comboEquipoVisitante.getSelectedItem();
                    comboEquipoLocal.removeItem(equipoAnterior2);
                }
            } else {
                if (equipoAnterior2 != "") {
                    comboEquipoLocal.addItem(equipoAnterior2);
                    equipoAnterior2 = "";
                }
            }
        }
    }//GEN-LAST:event_comboEquipoVisitanteItemStateChanged
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        new PrincipalCategorias(this, this.accesoBD).setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        new PrincipalTemporadas(this, this.accesoBD).setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        new PrincipalGrupos(this, this.accesoBD).setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        new PrincipalJugadores(this, this.accesoBD).setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        new PrincipalInstalaciones(this, this.accesoBD).setVisible(true);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        new PrincipalActividades(this, this.accesoBD).setVisible(true);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        new PrincipalPagos(this, this.accesoBD).setVisible(true);
    }//GEN-LAST:event_jButton12ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonJPartido;
    private javax.swing.JButton BotonModificarPartido;
    private javax.swing.JButton BotonNPartido;
    private javax.swing.JPanel PanelPartidos;
    private javax.swing.JLabel Partidos;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonEliminarEquipo;
    private javax.swing.JButton botonEliminarUsuario;
    private javax.swing.JButton botonFiltrarPartido;
    private javax.swing.JButton botonGuardarCambiosUsuario;
    private javax.swing.JButton botonInfoEquipo;
    private javax.swing.JButton botonModificarEquipo;
    private javax.swing.JButton botonMostrarEquipos;
    private javax.swing.JButton botonMostrarPartidos;
    private javax.swing.JButton botonNuevoEquipo;
    private javax.swing.JButton botonNuevoUsuario;
    private javax.swing.JButton boton_mostrar_Usuarios;
    private javax.swing.JButton cerrarSesion;
    private javax.swing.JComboBox comboCatEquipo;
    private javax.swing.JComboBox comboCategoriaPartidos;
    private javax.swing.JComboBox comboEquipoLocal;
    private javax.swing.JComboBox comboEquipoVisitante;
    private javax.swing.JComboBox comboTempEquipo;
    private javax.swing.JComboBox comboTemporadaPartidos;
    private javax.swing.JComboBox consultaCategoriaUsuario;
    private javax.swing.JComboBox consultaEntrenadorUsuario;
    private javax.swing.JComboBox consultaEquipoUsuario;
    private javax.swing.JComboBox consultaGrupoUsuario;
    private javax.swing.JComboBox consultaTemporadaUsuario;
    private javax.swing.JButton deshacerCambiosUsuario;
    private javax.swing.JLabel errorEliminarUsuario;
    private javax.swing.JLabel errorModifFijoUsuario;
    private javax.swing.JLabel errorModifMovilUsuario;
    private com.toedter.calendar.JDateChooser fechaPartido;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel labelEquiposMostrados;
    private javax.swing.JLabel labelNumeroEquipos;
    private javax.swing.JMenu menuEquipos;
    private javax.swing.JMenu menuInicio;
    private javax.swing.JMenu menuPartidos;
    private javax.swing.JMenu menuUsuarios;
    private javax.swing.JPanel panelEquipos;
    private javax.swing.JPanel panelInicio;
    private javax.swing.JPanel panelUsuarios;
    private javax.swing.JTable tablaEquipos;
    private javax.swing.JTable tablaPartidos;
    private javax.swing.JTable tablaUsuarios;
    private javax.swing.JTextField textEntEquipo;
    private javax.swing.JTextField textNombreEquipo;
    private javax.swing.JTextField textfield_apellidoPrimeroUsuario;
    private javax.swing.JTextField textfield_apellidoSegundoUsuario;
    private javax.swing.JTextField textfield_nombreUsuario;
    private javax.swing.JButton verClasificacionEquipos;
    private javax.swing.JButton verEstadisticasEntrenador;
    // End of variables declaration//GEN-END:variables

    private void ocultarPaneles() {
        panelInicio.setVisible(false);
        panelUsuarios.setVisible(false);
        panelEquipos.setVisible(false);
        PanelPartidos.setVisible(false);
    }
    
    ResultSet ejecutarConsulta(String query) {
        return accesoBD.ejecutaConsulta(query);
    }
    
    void ejecutarActualizacion(String query) throws SQLException {
        accesoBD.ejecutaActualizacion(query);
    }
    
    private void actualizaComboTempEquipo() throws SQLException {
        comboTempEquipo.removeAllItems();
        comboTempEquipo.addItem("-Temporada-");
        
        String query = "SELECT curso FROM Temporada";
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while (res.next()) {
            comboTempEquipo.addItem(res.getString(1));
        }
    }
    
    private void actualizaComboTemporadaPartidos() throws SQLException {
        comboTemporadaPartidos.removeAllItems();
        comboTemporadaPartidos.addItem("-Temporada-");
        
        String query = "SELECT curso FROM Temporada";
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while (res.next()) {
            comboTemporadaPartidos.addItem(res.getString(1));
        }
    }
    
    private void actualizaComboCatEquipo() throws SQLException {
        comboCatEquipo.removeAllItems();
        comboCatEquipo.addItem("-Categoria-");
        
        String query = "SELECT tipo FROM Categoria";
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while (res.next()) {
            comboCatEquipo.addItem(res.getString(1));
        }
    }
    
    private void actualizaComboCategoriaPartidos() throws SQLException {
        comboCategoriaPartidos.removeAllItems();
        comboCategoriaPartidos.addItem("-Categoría-");
        
        String query = "SELECT tipo FROM Categoria";
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while (res.next()) {
            comboCategoriaPartidos.addItem(res.getString(1));
        }
    }
    
    void actualizaComboEquipoPartidos(List<String> equipos, int numEquipo) throws SQLException {
        if (numEquipo == 1) {
            comboEquipoLocal.removeAllItems();
            comboEquipoLocal.addItem("-Equipo Local-");
            for (String s : equipos) {
                comboEquipoLocal.addItem(s);
            }
        } else {
            comboEquipoVisitante.removeAllItems();
            comboEquipoVisitante.addItem("-Equipo Visitante-");
            for (String s : equipos) {
                comboEquipoVisitante.addItem(s);
            }
        }
    }
    
    List<List<String>> getListaCategorias() throws SQLException {
        List<List<String>> cats = new ArrayList<List<String>>();
        cats = GestorCategorias.getListaCategorias(accesoBD);
        return cats;
    }

    /*
     * Metodo provisional hasta que se implemente "CATEGORIA"
     */
    /*List<String> getListaCategorias() throws SQLException {
     List<String> cats = new ArrayList<String>();
     String query = "SELECT tipo FROM Categoria";
     ResultSet res = accesoBD.ejecutaConsulta(query);
     while (res.next()) {
     cats.add(res.getString(1));
     }

     return cats;
     }*/
    public List<String> getListaEntrenadores(String sEnt) {
        List<String> ents = new ArrayList<String>();
        try {
            ents = GestorUsuarios.getEntrenadores(accesoBD, sEnt);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return ents;
    }
    /*
     * Futuro getListaEquipos (pa cuando esté)
     */
    /*List<String> getListaEquipos(String s) throws SQLException {
     List<String> equipos = new ArrayList<String>();
     equipos = GestorEquipo.getListaEquipos(accesoBD);
     return equipos.
     }*/

    /*
     * Método provisional para obtener equipos
     */
    List<String> getListaEquipos(int idCat, int idTemp) throws SQLException {
        List<String> equipos = new ArrayList<String>();
        String query;
        if (idCat == 0 && idTemp != 0) {
            query = "SELECT nombre FROM Equipo WHERE (temporada_idTemporada = " + idTemp + ");";
        } else if (idCat != 0 && idTemp == 0) {
            query = "SELECT nombre FROM Equipo WHERE (Categoria_IdCategoria = " + idCat + ");";
        } else {
            query = "SELECT nombre FROM Equipo WHERE (Categoria_IdCategoria = " + idCat + " AND temporada_idTemporada = " + idTemp + ");";
        }
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while (res.next()) {
            equipos.add(res.getString(1));
        }
        return equipos;
    }
    
    public void actualizaTablaEquiposFiltro(String nombre, String temporada, String categoria, String entrenador) throws SQLException {
    }
    
    public void actualizaTablaEquipos() throws SQLException {
        List<Equipo> equipos = new ArrayList<Equipo>();
        equipos = GestorEquipos.getListaEquipos(accesoBD);
        
        DefaultTableModel dtm = new DefaultTableModel();
        dtm.addColumn("Nombre");
        dtm.addColumn("Categoria");
        dtm.addColumn("Temporada");
        dtm.addColumn("Primer Entrenador");
        dtm.addColumn("Segundo Entrenador");
        dtm.addColumn("Sexo");
        
        String aux;
        Object[] fila = new Object[6];
        for (Equipo it : equipos) {
            aux = it.getCategoria();
            fila[0] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[1] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[2] = getCategoria(aux.substring(0, aux.indexOf(",")));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[3] = getEntrenador(aux.substring(0, aux.indexOf(",")));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[4] = getTemporada(aux);
            dtm.addRow(fila);
        }
        
        tablaEquipos.setModel(dtm);
        
        
        
        
    }
    
    private String getCategoria(String s) throws SQLException {
        
        String cat = GestorCategorias.getCategoria(accesoBD, Integer.parseInt(s));
        
        return cat;
    }
    
    private String getEntrenador(String s) throws SQLException {
        
        return GestorUsuarios.getEntrenador(accesoBD, s);
    }
    
    private String getTemporada(String s) throws SQLException {
        
        return GestorTemporadas.getTemporada(accesoBD, s);
    }
    
    private String getEquipo(String s) throws SQLException {
        return GestorEquipos.getEquipo(accesoBD, s);
    }
    
    List<String> getListaTemps() throws SQLException {
        return GestorTemporadas.getListaTemporadas(accesoBD);
    }
    
    List<String> getListaInstalaciones(String s) throws SQLException {
        return GestorInstalacion.getListaInstalaciones(accesoBD);
    }
}
