/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InterfazPrincipal.java
 *
 * Created on 16-mar-2013, 16:58:04
 */
package InterfazUsuario;

import GestionActividades.GestorActividad;
import GestionDeAlumnos.*;
import GestionDeCategorias.Categoria;
import GestionDeCategorias.GestorCategorias;
import GestionDeGrupos.GestorGrupos;
import GestionDeUsuarios.*;
import GestionDeTemporadas.*;
import GestionDeEquipos.*;
import GestionDeGrupos.Grupo;
import GestionDeInstalaciones.GestorInstalacion;
import GestionDePagos.GestorPagos;
import GestionDePagos.PagoActividad;
import GestionDePagos.PagoTemporada;
import GestionDePartidos.GestorPartidos;
import GestionDePartidos.Partido;
import ServiciosAlmacenamiento.BaseDatos;
import java.awt.event.ActionEvent;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Francisco
 */

/*
 ******************************************************************************
 (c) Copyright 2013 
 * 
 * Moisés Gautier Gómez
 * Julio Ros Martínez
 * Francisco Javier Gómez del Olmo
 * Francisco Santolalla Quiñonero
 * Carlos Jesús Fernández Basso
 * Alexander Moreno Borrego
 * Jesús Manuel Contreras Siles
 * Diego Muñoz Rio
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************
 */
public class PantallaPrincipal extends javax.swing.JFrame {

    BaseDatos accesoBD;
    String usuario;
    Statement stmt;
    ResultSet retset;
    ResultSet ultimaActualizacionAlumno;
    String ultimaConsultaAlumno;
    ResultSet ultimaActualizacionUsuario;
    String ultimaConsultaUsuario;
    String consultaAlumnosMostrados;
    String consultaUsuariosMostrados;
    String consultaInstalacionesMostradas;
    String consultaActividadesMostradas;
    Border bordeError;
    String consultaPagosMostrados;
    boolean noEntry;

    /**
     * Creates new form InterfazPrincipal
     */
    public PantallaPrincipal() {
        initComponents();
    }

    public PantallaPrincipal(BaseDatos acceso, String usuario) {
        accesoBD = acceso;
        this.usuario = usuario;
        initComponents();
        this.setLocationRelativeTo(null);
        ocultarPaneles();
        menuInicioMouseClicked(null);
        initComponentsSegunUsuario();
    }

    private void initComponentsSegunUsuario() {
        if (!GestorUsuarios.tengoPermisosAdministrador(accesoBD, usuario)) {
            System.out.print("\ninitcomponent segun user");
            barraMenu.remove(menuUsuarios);
            panelJugadores.remove(botonNuevoAlumno);
            panelJugadores.remove(botonEliminarAlumno);
            panelJugadores.remove(botonEliminarUsuario);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelInicio = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cerrarSesion = new javax.swing.JButton();
        panelJugadores = new javax.swing.JPanel();
        resultadosAlLabel = new javax.swing.JLabel();
        botonNuevoAlumno = new javax.swing.JButton();
        botonGuardarCambiosAl = new javax.swing.JButton();
        deshacerCambiosAlumno = new javax.swing.JButton();
        buscarAlLabel = new javax.swing.JLabel();
        equipoAlLabel = new javax.swing.JLabel();
        grupoAlLabel = new javax.swing.JLabel();
        edadAlLabel = new javax.swing.JLabel();
        entrenadorAlLabel = new javax.swing.JLabel();
        nombreAlLabel = new javax.swing.JLabel();
        nombreAl = new javax.swing.JTextField();
        edadAl = new javax.swing.JTextField();
        panelResulAl = new javax.swing.JScrollPane();
        tablaAlumnos = new javax.swing.JTable();
        botonMostrarAlumnos = new javax.swing.JButton();
        categoriaAlLabel = new javax.swing.JLabel();
        segundoApellidoAl = new javax.swing.JTextField();
        primerApellidoAl = new javax.swing.JTextField();
        primerApellidoLabel = new javax.swing.JLabel();
        segundoApellidoLabel = new javax.swing.JLabel();
        temporadaLabel = new javax.swing.JLabel();
        consultaEntrenador = new javax.swing.JComboBox();
        consultaEquipo = new javax.swing.JComboBox();
        consultaGrupo = new javax.swing.JComboBox();
        consultaCategoria = new javax.swing.JComboBox();
        consultaTemporada = new javax.swing.JComboBox();
        errorModifMovil = new javax.swing.JLabel();
        errorModifFijo = new javax.swing.JLabel();
        errorModifCP = new javax.swing.JLabel();
        botonEliminarAlumno = new javax.swing.JButton();
        mensajeErrorEliminarAlumno = new javax.swing.JLabel();
        estadisticasJugador = new javax.swing.JButton();
        panelUsuarios = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        botonNuevoUsuario = new javax.swing.JButton();
        botonGuardarCambiosUsuario = new javax.swing.JButton();
        deshacerCambiosUsuario = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        textfield_nombreUsuario = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        boton_mostrar_Usuarios = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        textfield_apellidoSegundoUsuario = new javax.swing.JTextField();
        textfield_apellidoPrimeroUsuario = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        consultaEquipoUsuario = new javax.swing.JComboBox();
        consultaGrupoUsuario = new javax.swing.JComboBox();
        consultaCategoriaUsuario = new javax.swing.JComboBox();
        consultaTemporadaUsuario = new javax.swing.JComboBox();
        errorModifMovilUsuario = new javax.swing.JLabel();
        errorModifFijoUsuario = new javax.swing.JLabel();
        consultaEntrenadorUsuario = new javax.swing.JComboBox();
        botonEliminarUsuario = new javax.swing.JButton();
        errorEliminarUsuario = new javax.swing.JLabel();
        verEstadisticasEntrenador = new javax.swing.JButton();
        panelTemporadas = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        botonNuevaTemp = new javax.swing.JButton();
        comboTempo = new javax.swing.JComboBox();
        botonModTem = new javax.swing.JButton();
        botonElimTemp = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        estadisticasTemporada = new javax.swing.JButton();
        panelGrupos = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboTempEntr = new javax.swing.JComboBox();
        comboCatGrup = new javax.swing.JComboBox();
        comboEntGrup = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaGrupos = new javax.swing.JTable();
        botonConsGrupo = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        botonNuevoGrupEnt = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        tfGrupEnt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        panelInstalaciones = new javax.swing.JPanel();
        TituloLabel = new javax.swing.JLabel();
        BuscarporLabel = new javax.swing.JLabel();
        NombreInsLabel = new javax.swing.JLabel();
        nombreIns = new javax.swing.JTextField();
        nombreCalleInst = new javax.swing.JTextField();
        MenuDireccionLabel = new javax.swing.JComboBox();
        NumeroLabel = new javax.swing.JLabel();
        numeroInst = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        capacidadInst = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaInstalacion = new javax.swing.JTable();
        introducirButton = new javax.swing.JButton();
        modificarButton = new javax.swing.JButton();
        eliminarButton = new javax.swing.JButton();
        panelEquipos = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        textNombreEquipo = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        comboCatEquipo = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        comboTempEquipo = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        textEntEquipo = new javax.swing.JTextField();
        botonBuscar = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaEquipos = new javax.swing.JTable();
        botonModificarEquipo = new javax.swing.JButton();
        botonEliminarEquipo = new javax.swing.JButton();
        botonInfoEquipo = new javax.swing.JButton();
        botonNuevoEquipo = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        labelEquiposMostrados = new javax.swing.JLabel();
        labelNumeroEquipos = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jComboBox1 = new javax.swing.JComboBox();
        panelPagos = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        pago_temporada = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        pago_temporadaActividad = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        pago_nombre = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        pago_primer_apellido = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        pago_segundo_apellido = new javax.swing.JTextField();
        pagos_etiqGrupo = new javax.swing.JLabel();
        pago_grupo = new javax.swing.JComboBox();
        pagos_botonMostrar = new javax.swing.JButton();
        pagos_botonDeudores = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablaPagos = new javax.swing.JTable();
        pagos_botonModificar = new javax.swing.JButton();
        pagos_etiqActividad = new javax.swing.JLabel();
        pagos_actividad = new javax.swing.JTextField();
        panelActividades = new javax.swing.JPanel();
        actividadesLabel = new javax.swing.JLabel();
        buscarLabel = new javax.swing.JLabel();
        nombreLabel = new javax.swing.JLabel();
        nombreTextField = new javax.swing.JTextField();
        fechaInicioLabel = new javax.swing.JLabel();
        fechaInicioDateChooser = new com.toedter.calendar.JDateChooser();
        fechaFinLabel = new javax.swing.JLabel();
        fechaFinDateChooser = new com.toedter.calendar.JDateChooser();
        Insertar = new javax.swing.JButton();
        Eliminar = new javax.swing.JButton();
        Modificar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        actividadesTable = new javax.swing.JTable();
        Informacion = new javax.swing.JButton();
        AñaridAlumno = new javax.swing.JButton();
        panelCategorias = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        botonNuevaCat = new javax.swing.JButton();
        botonModCat = new javax.swing.JButton();
        botonElimCat = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablaCategorias = new javax.swing.JTable();
        PanelPartidos = new javax.swing.JPanel();
        Partidos = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablaPartidos = new javax.swing.JTable();
        BotonModificarPartido = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        BotonJPartido = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        BotonNPartido = new javax.swing.JButton();
        botonMostrarPartidos = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        comboTemporadaPartidos = new javax.swing.JComboBox();
        comboCategoriaPartidos = new javax.swing.JComboBox();
        jLabel26 = new javax.swing.JLabel();
        botonFiltrarPartido = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        comboEquipoLocal = new javax.swing.JComboBox();
        comboEquipoVisitante = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        fechaPartido = new com.toedter.calendar.JDateChooser();
        jButton6 = new javax.swing.JButton();
        barraMenu = new javax.swing.JMenuBar();
        menuInicio = new javax.swing.JMenu();
        menuJugadores = new javax.swing.JMenu();
        menuEquipos = new javax.swing.JMenu();
        menuUsuarios = new javax.swing.JMenu();
        menuEntrenamientos = new javax.swing.JMenu();
        menuActividades = new javax.swing.JMenu();
        menuTemporadas = new javax.swing.JMenu();
        menuPagos = new javax.swing.JMenu();
        menuCategorias = new javax.swing.JMenu();
        menuInstalaciones = new javax.swing.JMenu();
        menuPartidos = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1400, 750));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Bienvenido a la aplicacion");

        cerrarSesion.setText("Cerrar Sesión");
        cerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarSesionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInicioLayout = new javax.swing.GroupLayout(panelInicio);
        panelInicio.setLayout(panelInicioLayout);
        panelInicioLayout.setHorizontalGroup(
            panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInicioLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cerrarSesion)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(633, Short.MAX_VALUE))
        );
        panelInicioLayout.setVerticalGroup(
            panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInicioLayout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cerrarSesion)
                .addContainerGap(673, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 623;
        gridBagConstraints.ipady = 662;
        gridBagConstraints.weighty = 0.2;
        getContentPane().add(panelInicio, gridBagConstraints);

        panelJugadores.setVisible(false);
        panelJugadores.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        resultadosAlLabel.setText("Resultados de los alumnos:");
        panelJugadores.add(resultadosAlLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, 20));

        botonNuevoAlumno.setText("Nuevo Alumno");
        botonNuevoAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoAlumnoActionPerformed(evt);
            }
        });
        panelJugadores.add(botonNuevoAlumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, -1, -1));

        botonGuardarCambiosAl.setText("Guardar Cambios");
        botonGuardarCambiosAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarCambiosAlActionPerformed(evt);
            }
        });
        panelJugadores.add(botonGuardarCambiosAl, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 610, -1, -1));

        deshacerCambiosAlumno.setText("Deshacer Cambios");
        deshacerCambiosAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deshacerCambiosAlumnoActionPerformed(evt);
            }
        });
        panelJugadores.add(deshacerCambiosAlumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 610, -1, -1));

        buscarAlLabel.setText("Buscar alumnos por:");
        panelJugadores.add(buscarAlLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 36, -1, -1));

        equipoAlLabel.setText("Equipo");
        panelJugadores.add(equipoAlLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, -1, -1));

        grupoAlLabel.setText("Grupo");
        panelJugadores.add(grupoAlLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, -1, -1));

        edadAlLabel.setText("Edad");
        panelJugadores.add(edadAlLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 40, -1, -1));

        entrenadorAlLabel.setText("Entrenador");
        panelJugadores.add(entrenadorAlLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 100, -1, -1));

        nombreAlLabel.setText("Nombre");
        panelJugadores.add(nombreAlLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 36, -1, -1));
        panelJugadores.add(nombreAl, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 201, -1));
        panelJugadores.add(edadAl, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 60, 80, -1));

        panelResulAl.setAutoscrolls(true);

        tablaAlumnos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Primer Apellido", "Segundo Apellido", "Fecha Nacimiento", "Email", "Talla", "Numero Cuenta", "Tel. Movil", "Tel. Fijo", "Provincia", "Localidad", "Domicilio", "CP", "Nombre Padre", "Nombre Madre", "Colegio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablaAlumnos.setColumnSelectionAllowed(true);
        panelResulAl.setViewportView(tablaAlumnos);
        tablaAlumnos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaAlumnos.getColumnModel().getColumn(0).setMaxWidth(45);

        panelJugadores.add(panelResulAl, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 1260, 350));

        botonMostrarAlumnos.setText("Mostrar Alumnos");
        botonMostrarAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarAlumnosActionPerformed(evt);
            }
        });
        panelJugadores.add(botonMostrarAlumnos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, -1));

        categoriaAlLabel.setText("Categoria");
        panelJugadores.add(categoriaAlLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 100, -1, -1));
        panelJugadores.add(segundoApellidoAl, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 60, 201, -1));
        panelJugadores.add(primerApellidoAl, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, 201, -1));

        primerApellidoLabel.setText("Apellido Primero");
        panelJugadores.add(primerApellidoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, -1, -1));

        segundoApellidoLabel.setText("Apellido Segundo");
        panelJugadores.add(segundoApellidoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 40, -1, -1));

        temporadaLabel.setText("Temporada");
        panelJugadores.add(temporadaLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 100, -1, -1));

        consultaEntrenador.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        panelJugadores.add(consultaEntrenador, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 120, 200, -1));

        consultaEquipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        panelJugadores.add(consultaEquipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 100, -1));

        consultaGrupo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        panelJugadores.add(consultaGrupo, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 120, 100, -1));

        consultaCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        panelJugadores.add(consultaCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 120, 100, -1));

        panelJugadores.add(consultaTemporada, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 120, 100, -1));

        errorModifMovil.setForeground(new java.awt.Color(255, 0, 51));
        errorModifMovil.setText("Error Tel.Movil");
        errorModifMovil.setVisible(false);
        panelJugadores.add(errorModifMovil, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 210, -1, -1));

        errorModifFijo.setForeground(new java.awt.Color(255, 0, 51));
        errorModifFijo.setText("Error Tel.Fijo");
        errorModifFijo.setVisible(false);
        panelJugadores.add(errorModifFijo, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 210, -1, -1));

        errorModifCP.setForeground(new java.awt.Color(255, 0, 51));
        errorModifCP.setText("Error CP");
        errorModifCP.setVisible(false);
        panelJugadores.add(errorModifCP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 210, -1, -1));

        botonEliminarAlumno.setText("Eliminar Alumno");
        botonEliminarAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarAlumnoActionPerformed(evt);
            }
        });
        panelJugadores.add(botonEliminarAlumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 610, 140, -1));

        mensajeErrorEliminarAlumno.setForeground(new java.awt.Color(255, 0, 51));
        mensajeErrorEliminarAlumno.setText("No ha seleccionado ningún alumno para ser eliminado");
        panelJugadores.add(mensajeErrorEliminarAlumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 610, -1, -1));
        mensajeErrorEliminarAlumno.setVisible(false);

        estadisticasJugador.setText("Estadisticas");
        estadisticasJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadisticasJugadorActionPerformed(evt);
            }
        });
        panelJugadores.add(estadisticasJugador, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 160, 100, -1));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 164;
        gridBagConstraints.ipady = 92;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 0, 22, 0);
        getContentPane().add(panelJugadores, gridBagConstraints);

        panelUsuarios.setVisible(false);
        panelUsuarios.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel18.setText("Resultados de los Usuarios:");
        panelUsuarios.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, 20));

        botonNuevoUsuario.setText("Nuevo Usuario");
        botonNuevoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoUsuarioActionPerformed(evt);
            }
        });
        panelUsuarios.add(botonNuevoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, -1, -1));

        botonGuardarCambiosUsuario.setText("Guardar Cambios");
        botonGuardarCambiosUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarCambiosUsuarioActionPerformed(evt);
            }
        });
        panelUsuarios.add(botonGuardarCambiosUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 610, -1, -1));

        deshacerCambiosUsuario.setText("Deshacer Cambios");
        deshacerCambiosUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deshacerCambiosUsuarioActionPerformed(evt);
            }
        });
        panelUsuarios.add(deshacerCambiosUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 610, -1, -1));

        jLabel19.setText("Buscar Usuarios por:");
        panelUsuarios.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 36, -1, -1));

        jLabel20.setText("Equipo");
        panelUsuarios.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, -1, -1));

        jLabel33.setText("Grupo");
        panelUsuarios.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, -1, -1));

        jLabel34.setText("Tipo Usuario");
        panelUsuarios.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 40, -1, -1));

        jLabel36.setText("Nombre");
        panelUsuarios.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 36, -1, -1));
        panelUsuarios.add(textfield_nombreUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 201, -1));

        jScrollPane2.setAutoscrolls(true);

        tablaUsuarios.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Primer Apellido", "Segundo Apellido", "DNI", "Clave", "Tipo Usuario", "Numero Cuenta", "Tel. Movil", "Tel. Fijo", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaUsuarios);
        tablaUsuarios.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        panelUsuarios.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 1260, 350));

        boton_mostrar_Usuarios.setText("Mostrar Usuarios");
        boton_mostrar_Usuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_mostrar_UsuariosActionPerformed(evt);
            }
        });
        panelUsuarios.add(boton_mostrar_Usuarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, -1));

        jLabel37.setText("Categoria");
        panelUsuarios.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 100, -1, -1));
        panelUsuarios.add(textfield_apellidoSegundoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 60, 201, -1));
        panelUsuarios.add(textfield_apellidoPrimeroUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, 201, -1));

        jLabel38.setText("Apellido Primero");
        panelUsuarios.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, -1, -1));

        jLabel39.setText("Apellido Segundo");
        panelUsuarios.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 40, -1, -1));

        jLabel40.setText("Temporada");
        panelUsuarios.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 100, -1, -1));

        consultaEquipoUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        panelUsuarios.add(consultaEquipoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 100, -1));

        consultaGrupoUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        panelUsuarios.add(consultaGrupoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 120, 100, -1));

        consultaCategoriaUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        panelUsuarios.add(consultaCategoriaUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 120, 100, -1));

        panelUsuarios.add(consultaTemporadaUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 120, 100, -1));

        errorModifMovilUsuario.setForeground(new java.awt.Color(255, 0, 51));
        errorModifMovilUsuario.setText("Error Tel.Movil");
        errorModifMovilUsuario.setVisible(false);
        panelUsuarios.add(errorModifMovilUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 210, -1, -1));

        errorModifFijoUsuario.setForeground(new java.awt.Color(255, 0, 51));
        errorModifFijoUsuario.setText("Error Tel.Fijo");
        errorModifFijoUsuario.setVisible(false);
        panelUsuarios.add(errorModifFijoUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 210, -1, -1));

        consultaEntrenadorUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Entrenador", "Administrador" }));
        panelUsuarios.add(consultaEntrenadorUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 60, -1, -1));

        botonEliminarUsuario.setText("Eliminar Usuario");
        botonEliminarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarUsuarioActionPerformed(evt);
            }
        });
        panelUsuarios.add(botonEliminarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 610, -1, -1));

        errorEliminarUsuario.setForeground(new java.awt.Color(255, 0, 102));
        errorEliminarUsuario.setText("No ha seleccionado ningún usuario para ser eliminado");
        panelUsuarios.add(errorEliminarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 610, -1, -1));
        errorEliminarUsuario.setVisible(false);

        verEstadisticasEntrenador.setText("Estadisticas");
        verEstadisticasEntrenador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verEstadisticasEntrenadorActionPerformed(evt);
            }
        });
        panelUsuarios.add(verEstadisticasEntrenador, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 160, 100, -1));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 164;
        gridBagConstraints.ipady = 92;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 0, 22, 0);
        getContentPane().add(panelUsuarios, gridBagConstraints);

        panelTemporadas.setVisible(false);
        panelTemporadas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelTemporadas.setLocation(150, 100);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Temporadas");

        botonNuevaTemp.setText("Nueva");
        botonNuevaTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevaTempActionPerformed(evt);
            }
        });

        botonModTem.setText("Modificar");
        botonModTem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModTemActionPerformed(evt);
            }
        });

        botonElimTemp.setText("Eliminar");
        botonElimTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonElimTempActionPerformed(evt);
            }
        });

        estadisticasTemporada.setText("Estadisticas");
        estadisticasTemporada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadisticasTemporadaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTemporadasLayout = new javax.swing.GroupLayout(panelTemporadas);
        panelTemporadas.setLayout(panelTemporadasLayout);
        panelTemporadasLayout.setHorizontalGroup(
            panelTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTemporadasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addGroup(panelTemporadasLayout.createSequentialGroup()
                        .addComponent(comboTempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botonModTem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonElimTemp))
                    .addComponent(jSeparator1)
                    .addGroup(panelTemporadasLayout.createSequentialGroup()
                        .addComponent(botonNuevaTemp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(estadisticasTemporada, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTemporadasLayout.setVerticalGroup(
            panelTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTemporadasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(13, 13, 13)
                .addGroup(panelTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboTempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonModTem)
                    .addComponent(botonElimTemp))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelTemporadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonNuevaTemp)
                    .addComponent(estadisticasTemporada))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(panelTemporadas, new java.awt.GridBagConstraints());

        panelGrupos.setVisible(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("Buscar:");

        comboEntGrup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Entrenador-" }));
        comboEntGrup.setMaximumSize(new java.awt.Dimension(174, 20));
        comboEntGrup.setMinimumSize(new java.awt.Dimension(174, 20));
        comboEntGrup.setPreferredSize(new java.awt.Dimension(174, 20));

        tablaGrupos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Numero Alumnos", "Categoria", "Entrenador", "Instalacion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaGrupos);

        botonConsGrupo.setText("Consultar");
        botonConsGrupo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConsGrupoActionPerformed(evt);
            }
        });

        jButton5.setText("Eliminar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        botonNuevoGrupEnt.setText("Nuevo");
        botonNuevoGrupEnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoGrupEntActionPerformed(evt);
            }
        });

        jLabel7.setText("Filtrar entrenador:");

        tfGrupEnt.setText("Buscar...");
        tfGrupEnt.setMaximumSize(new java.awt.Dimension(70, 20));
        tfGrupEnt.setMinimumSize(new java.awt.Dimension(70, 20));
        tfGrupEnt.setPreferredSize(new java.awt.Dimension(70, 20));
        tfGrupEnt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfGrupEntMouseClicked(evt);
            }
        });
        tfGrupEnt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfGrupEntKeyTyped(evt);
            }
        });

        jButton1.setText("Filtrar Grupos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Mostrar todos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonConsGrupo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(botonNuevoGrupEnt)
                                .addGap(0, 430, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2)
                                        .addGap(0, 251, Short.MAX_VALUE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(comboTempEntr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboCatGrup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfGrupEnt, javax.swing.GroupLayout.DEFAULT_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboEntGrup, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(49, 49, 49)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboTempEntr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboEntGrup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(tfGrupEnt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCatGrup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonConsGrupo)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonNuevoGrupEnt)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Grupos de Entrenamiento");

        javax.swing.GroupLayout panelGruposLayout = new javax.swing.GroupLayout(panelGrupos);
        panelGrupos.setLayout(panelGruposLayout);
        panelGruposLayout.setHorizontalGroup(
            panelGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGruposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelGruposLayout.setVerticalGroup(
            panelGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGruposLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        getContentPane().add(panelGrupos, gridBagConstraints);

        panelInstalaciones.setVisible(false);
        panelInstalaciones.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        panelInstalaciones.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        TituloLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        TituloLabel.setText("Instalaciones");

        BuscarporLabel.setText("Buscar instalacion");

        NombreInsLabel.setText("Nombre");

        nombreIns.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreInsKeyTyped(evt);
            }
        });

        nombreCalleInst.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreCalleInstKeyTyped(evt);
            }
        });

        MenuDireccionLabel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Calle", "Avenida", "Plaza", "Carretera" }));
        MenuDireccionLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuDireccionLabelActionPerformed(evt);
            }
        });

        NumeroLabel.setText("Nº");

        jLabel5.setText("Direccion");

        jLabel6.setText("Capacidad");

        capacidadInst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capacidadInstActionPerformed(evt);
            }
        });
        capacidadInst.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                capacidadInstKeyTyped(evt);
            }
        });

        tablaInstalacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "nombre", "Direccion", "Capacidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablaInstalacion);

        introducirButton.setText("Introducir");
        introducirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                introducirButtonActionPerformed(evt);
            }
        });

        modificarButton.setText("Modificar");
        modificarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarButtonActionPerformed(evt);
            }
        });

        eliminarButton.setText("Eliminar");
        eliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInstalacionesLayout = new javax.swing.GroupLayout(panelInstalaciones);
        panelInstalaciones.setLayout(panelInstalacionesLayout);
        panelInstalacionesLayout.setHorizontalGroup(
            panelInstalacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInstalacionesLayout.createSequentialGroup()
                .addGroup(panelInstalacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInstalacionesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelInstalacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BuscarporLabel)
                            .addComponent(TituloLabel)))
                    .addGroup(panelInstalacionesLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(NombreInsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nombreIns, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelInstalacionesLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(panelInstalacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelInstalacionesLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(capacidadInst, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(introducirButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(modificarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eliminarButton))
                            .addGroup(panelInstalacionesLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(MenuDireccionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(nombreCalleInst, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NumeroLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numeroInst, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panelInstalacionesLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelInstalacionesLayout.setVerticalGroup(
            panelInstalacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInstalacionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TituloLabel)
                .addGap(39, 39, 39)
                .addComponent(BuscarporLabel)
                .addGap(25, 25, 25)
                .addGroup(panelInstalacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NombreInsLabel)
                    .addComponent(nombreIns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(panelInstalacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreCalleInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MenuDireccionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NumeroLabel)
                    .addComponent(numeroInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(10, 10, 10)
                .addGroup(panelInstalacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(capacidadInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(introducirButton)
                    .addComponent(modificarButton)
                    .addComponent(eliminarButton))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        getContentPane().add(panelInstalaciones, gridBagConstraints);

        panelEquipos.setVisible(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Equipos");

        jLabel10.setText("Nombre:");

        textNombreEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNombreEquipoActionPerformed(evt);
            }
        });

        jLabel11.setText("Categoria:");

        comboCatEquipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Categoria-" }));
        comboCatEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCatEquipoActionPerformed(evt);
            }
        });

        jLabel12.setText("Temporada:");

        comboTempEquipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Temporada-" }));

        jLabel13.setText("Primer Entrenador:");

        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        tablaEquipos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Categoria", "Temporada", "Primer Entrenador", "Segundo Entrenador"
            }
        ));
        jScrollPane5.setViewportView(tablaEquipos);

        botonModificarEquipo.setText("Modificar");
        botonModificarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarEquipoActionPerformed(evt);
            }
        });

        botonEliminarEquipo.setText("Eliminar");
        botonEliminarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarEquipoActionPerformed(evt);
            }
        });

        botonInfoEquipo.setText("Info");

        botonNuevoEquipo.setText("Nuevo");
        botonNuevoEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoEquipoActionPerformed(evt);
            }
        });

        jButton3.setText("Mostrar Todos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        labelEquiposMostrados.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelEquiposMostrados.setText("Numero de equipos:");

        labelNumeroEquipos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Entrenador-" }));

        javax.swing.GroupLayout panelEquiposLayout = new javax.swing.GroupLayout(panelEquipos);
        panelEquipos.setLayout(panelEquiposLayout);
        panelEquiposLayout.setHorizontalGroup(
            panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEquiposLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addGroup(panelEquiposLayout.createSequentialGroup()
                        .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(panelEquiposLayout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(botonBuscar)
                                .addGap(45, 45, 45)
                                .addComponent(jButton3))
                            .addGroup(panelEquiposLayout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelEquiposLayout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(textNombreEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(comboCatEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel12))
                                    .addGroup(panelEquiposLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(textEntEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboTempEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelEquiposLayout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(botonModificarEquipo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonInfoEquipo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonEliminarEquipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonNuevoEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelEquiposLayout.createSequentialGroup()
                                .addGap(157, 157, 157)
                                .addComponent(labelEquiposMostrados)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelNumeroEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelEquiposLayout.setVerticalGroup(
            panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEquiposLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel8)
                .addGap(59, 59, 59)
                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(comboTempEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(textNombreEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(comboCatEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(textEntEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonBuscar)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelEquiposLayout.createSequentialGroup()
                        .addComponent(botonNuevoEquipo)
                        .addGap(18, 18, 18)
                        .addComponent(botonInfoEquipo)
                        .addGap(18, 18, 18)
                        .addComponent(botonModificarEquipo)
                        .addGap(18, 18, 18)
                        .addComponent(botonEliminarEquipo)))
                .addGap(18, 18, 18)
                .addGroup(panelEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelEquiposMostrados)
                    .addComponent(labelNumeroEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(80, 80, 80))
        );

        this.labelEquiposMostrados.setVisible(false);

        getContentPane().add(panelEquipos, new java.awt.GridBagConstraints());

        panelPagos.setVisible(false);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("Pagos");

        jLabel9.setText("Buscar Pagos por:");

        pago_temporada.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        pago_temporada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pago_temporadaActionPerformed(evt);
            }
        });

        jLabel14.setText("Temporada");

        jLabel21.setText("Grupos/Actividad");

        pago_temporadaActividad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        pago_temporadaActividad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pago_temporadaActividadActionPerformed(evt);
            }
        });
        pago_temporadaActividad.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Temporada"}));

        pago_temporadaActividad.addItem("Actividad");

        jLabel22.setText("Buscar Pagos por Alumno:");

        jLabel23.setText("Nombre");

        pago_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pago_nombreActionPerformed(evt);
            }
        });

        jLabel24.setText("Primer Apellido");

        jLabel25.setText("Segundo Apellido");

        pagos_etiqGrupo.setText("Grupos por temporada");

        pago_grupo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        pago_grupo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pago_grupoActionPerformed(evt);
            }
        });

        pagos_botonMostrar.setText("Mostrar");
        pagos_botonMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagos_botonMostrarActionPerformed(evt);
            }
        });

        pagos_botonDeudores.setText("Mostrar solo Deudores");
        pagos_botonDeudores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagos_botonDeudoresActionPerformed(evt);
            }
        });

        tablaPagos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Primer Apellido", "Segundo Apellido", "Importe", "Fecha", "Pagado/Debido", "Email", "Tel. Fijo", "Tel. Movil", "Temporada"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tablaPagos);

        pagos_botonModificar.setText("Modificar Pago");
        pagos_botonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagos_botonModificarActionPerformed(evt);
            }
        });

        pagos_etiqActividad.setText("Nombre de la Actividad");
        pagos_etiqActividad.setVisible(false);

        pagos_actividad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagos_actividadActionPerformed(evt);
            }
        });
        pagos_actividad.setVisible(false);

        javax.swing.GroupLayout panelPagosLayout = new javax.swing.GroupLayout(panelPagos);
        panelPagos.setLayout(panelPagosLayout);
        panelPagosLayout.setHorizontalGroup(
            panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPagosLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pagos_botonModificar)
                    .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelPagosLayout.createSequentialGroup()
                            .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel22))
                            .addGap(68, 68, 68)
                            .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel23)
                                .addComponent(pago_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pago_temporadaActividad, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(23, 23, 23)
                            .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pago_primer_apellido, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel14)
                                .addComponent(pago_temporada, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(44, 44, 44)
                            .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel25)
                                    .addComponent(pago_segundo_apellido))
                                .addGroup(panelPagosLayout.createSequentialGroup()
                                    .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(pagos_etiqGrupo)
                                        .addComponent(pago_grupo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(30, 30, 30)
                                    .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(pagos_actividad)
                                        .addComponent(pagos_etiqActividad)))))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelPagosLayout.createSequentialGroup()
                            .addComponent(pagos_botonMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(45, 45, 45)
                            .addComponent(pagos_botonDeudores))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelPagosLayout.setVerticalGroup(
            panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPagosLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel15)
                .addGap(26, 26, 26)
                .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(panelPagosLayout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(18, 18, 18)
                        .addComponent(pago_temporadaActividad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelPagosLayout.createSequentialGroup()
                        .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(pagos_etiqGrupo)
                            .addComponent(pagos_etiqActividad))
                        .addGap(18, 18, 18)
                        .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pago_temporada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pago_grupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pagos_actividad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(42, 42, 42)
                .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25))
                .addGap(26, 26, 26)
                .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pago_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pago_primer_apellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pago_segundo_apellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(panelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pagos_botonMostrar)
                    .addComponent(pagos_botonDeudores))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(pagos_botonModificar)
                .addGap(40, 40, 40))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(panelPagos, gridBagConstraints);

        panelInstalaciones.setVisible(false);
        panelActividades.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        panelActividades.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        panelActividades.setMinimumSize(new java.awt.Dimension(1300, 640));

        actividadesLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        actividadesLabel.setText("Actividades");

        buscarLabel.setText("Buscar por");

        nombreLabel.setText("Nombre");

        nombreTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreTextFieldKeyTyped(evt);
            }
        });

        fechaInicioLabel.setText("Fecha inicio");

        fechaInicioDateChooser.setDateFormatString("dd-MM-yyyy");
        fechaInicioDateChooser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fechaInicioDateChooserKeyTyped(evt);
            }
        });

        fechaFinLabel.setText("Fecha Fin");

        fechaFinDateChooser.setDateFormatString("dd-MM-yyyy");

        Insertar.setText("Insertar");
        Insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertarActionPerformed(evt);
            }
        });

        Eliminar.setText("Eliminar");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        Modificar.setText("Modificar");
        Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarActionPerformed(evt);
            }
        });

        actividadesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Fecha de Inicio", "Fecha Fin"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(actividadesTable);

        Informacion.setText("Info");
        Informacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InformacionActionPerformed(evt);
            }
        });

        AñaridAlumno.setText("Añadir Alumno");
        AñaridAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñaridAlumnoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelActividadesLayout = new javax.swing.GroupLayout(panelActividades);
        panelActividades.setLayout(panelActividadesLayout);
        panelActividadesLayout.setHorizontalGroup(
            panelActividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelActividadesLayout.createSequentialGroup()
                .addGroup(panelActividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelActividadesLayout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(fechaFinLabel)
                        .addGap(18, 18, 18)
                        .addComponent(fechaFinDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelActividadesLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(panelActividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buscarLabel)
                            .addComponent(actividadesLabel)))
                    .addGroup(panelActividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(panelActividadesLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(AñaridAlumno)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(Informacion))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelActividadesLayout.createSequentialGroup()
                            .addGap(81, 81, 81)
                            .addGroup(panelActividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelActividadesLayout.createSequentialGroup()
                                    .addComponent(fechaInicioLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(fechaInicioDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelActividadesLayout.createSequentialGroup()
                                    .addComponent(nombreLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(nombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelActividadesLayout.createSequentialGroup()
                                    .addComponent(Insertar)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Eliminar)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Modificar))
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(929, Short.MAX_VALUE))
        );
        panelActividadesLayout.setVerticalGroup(
            panelActividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelActividadesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(actividadesLabel)
                .addGap(38, 38, 38)
                .addComponent(buscarLabel)
                .addGap(3, 3, 3)
                .addGroup(panelActividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreLabel)
                    .addComponent(nombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelActividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fechaInicioLabel)
                    .addComponent(fechaInicioDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaFinLabel)
                    .addComponent(fechaFinDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelActividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Insertar)
                    .addComponent(Eliminar)
                    .addComponent(Modificar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelActividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AñaridAlumno)
                    .addComponent(Informacion))
                .addContainerGap(379, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.ipadx = 164;
        gridBagConstraints.ipady = 92;
        getContentPane().add(panelActividades, gridBagConstraints);

        panelCategorias.setVisible(false);
        panelCategorias.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelCategorias.setLocation(150, 100);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setText("Categorias");

        botonNuevaCat.setText("Nueva");
        botonNuevaCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevaCatActionPerformed(evt);
            }
        });

        botonModCat.setText("Modificar");
        botonModCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModCatActionPerformed(evt);
            }
        });

        botonElimCat.setText("Eliminar");
        botonElimCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonElimCatActionPerformed(evt);
            }
        });

        tablaCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tablaCategorias);

        javax.swing.GroupLayout panelCategoriasLayout = new javax.swing.GroupLayout(panelCategorias);
        panelCategorias.setLayout(panelCategoriasLayout);
        panelCategoriasLayout.setHorizontalGroup(
            panelCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCategoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel17)
                    .addGroup(panelCategoriasLayout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botonModCat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonElimCat))
                    .addComponent(botonNuevaCat)
                    .addComponent(jSeparator5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelCategoriasLayout.setVerticalGroup(
            panelCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCategoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonModCat)
                        .addComponent(botonElimCat))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonNuevaCat)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(panelCategorias, new java.awt.GridBagConstraints());

        panelCategorias.setVisible(false);
        PanelPartidos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelCategorias.setLocation(150, 100);

        Partidos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Partidos.setText("Partidos");

        tablaPartidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Hora", "Categoría", "Temporada", "Equipo Local", "Equipo Visitante", "Resultado Local", "Resultado Visitante"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane8.setViewportView(tablaPartidos);

        BotonModificarPartido.setText("Modificar Partido");
        BotonModificarPartido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonModificarPartidoActionPerformed(evt);
            }
        });

        jButton9.setText("Eliminar Partido");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        BotonJPartido.setText("Jugar Partido");
        BotonJPartido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonJPartidoActionPerformed(evt);
            }
        });

        BotonNPartido.setText("Nuevo Partido");
        BotonNPartido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonNPartidoActionPerformed(evt);
            }
        });

        botonMostrarPartidos.setText("Mostrar Partidos");
        botonMostrarPartidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarPartidosActionPerformed(evt);
            }
        });

        jLabel16.setText("Buscar");

        comboTemporadaPartidos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboCategoriaPartidos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel26.setText("Equipo Local");

        botonFiltrarPartido.setText("Filtrar Partidos");
        botonFiltrarPartido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFiltrarPartidoActionPerformed(evt);
            }
        });

        jLabel27.setText("Equipo Visitante");

        comboEquipoLocal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboEquipoVisitante.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel28.setText("Fecha");

        fechaPartido.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fechaPartidoFocusLost(evt);
            }
        });

        jButton6.setText("Introducir XML al Partido");

        javax.swing.GroupLayout PanelPartidosLayout = new javax.swing.GroupLayout(PanelPartidos);
        PanelPartidos.setLayout(PanelPartidosLayout);
        PanelPartidosLayout.setHorizontalGroup(
            PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPartidosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelPartidosLayout.createSequentialGroup()
                        .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelPartidosLayout.createSequentialGroup()
                                .addComponent(BotonNPartido)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BotonModificarPartido)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton9))
                            .addGroup(PanelPartidosLayout.createSequentialGroup()
                                .addComponent(botonMostrarPartidos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonFiltrarPartido)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(PanelPartidosLayout.createSequentialGroup()
                        .addComponent(jScrollPane8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BotonJPartido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(36, 36, 36))
                    .addGroup(PanelPartidosLayout.createSequentialGroup()
                        .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Partidos)
                            .addGroup(PanelPartidosLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboTemporadaPartidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboCategoriaPartidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboEquipoLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboEquipoVisitante, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fechaPartido, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        PanelPartidosLayout.setVerticalGroup(
            PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPartidosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Partidos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(comboTemporadaPartidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboCategoriaPartidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel26)
                        .addComponent(jLabel27)
                        .addComponent(comboEquipoLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboEquipoVisitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel28))
                    .addComponent(fechaPartido, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PanelPartidosLayout.createSequentialGroup()
                        .addComponent(BotonJPartido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonMostrarPartidos)
                    .addComponent(botonFiltrarPartido))
                .addGap(19, 19, 19)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelPartidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonNPartido)
                    .addComponent(BotonModificarPartido)
                    .addComponent(jButton9))
                .addContainerGap())
        );

        getContentPane().add(PanelPartidos, new java.awt.GridBagConstraints());

        menuInicio.setText("Inicio");
        menuInicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuInicioMouseClicked(evt);
            }
        });
        menuInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInicioActionPerformed(evt);
            }
        });
        barraMenu.add(menuInicio);

        menuJugadores.setText("Jugadores");
        menuJugadores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuJugadoresMouseClicked(evt);
            }
        });
        menuJugadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuJugadoresActionPerformed(evt);
            }
        });
        barraMenu.add(menuJugadores);

        menuEquipos.setText("Equipos");
        menuEquipos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuEquiposMouseClicked(evt);
            }
        });
        barraMenu.add(menuEquipos);

        menuUsuarios.setText("Usuarios");
        menuUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuUsuariosMouseClicked(evt);
            }
        });
        barraMenu.add(menuUsuarios);

        menuEntrenamientos.setText("Grupos Entrenamiento");
        menuEntrenamientos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuEntrenamientosMouseClicked(evt);
            }
        });
        barraMenu.add(menuEntrenamientos);

        menuActividades.setText("Actividades");
        menuActividades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuActividadesMouseClicked(evt);
            }
        });
        barraMenu.add(menuActividades);

        menuTemporadas.setText("Temporadas");
        menuTemporadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuTemporadasMouseClicked(evt);
            }
        });
        barraMenu.add(menuTemporadas);

        menuPagos.setText("Pagos");
        menuPagos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuPagosMouseClicked(evt);
            }
        });
        menuPagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPagosActionPerformed(evt);
            }
        });
        barraMenu.add(menuPagos);

        menuCategorias.setText("Categorías");
        menuCategorias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuCategoriasMouseClicked(evt);
            }
        });
        barraMenu.add(menuCategorias);

        menuInstalaciones.setText("Instalaciones");
        menuInstalaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuInstalacionesMouseClicked(evt);
            }
        });
        menuInstalaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInstalacionesActionPerformed(evt);
            }
        });
        barraMenu.add(menuInstalaciones);

        menuPartidos.setText("Partidos");
        menuPartidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuPartidosMouseClicked(evt);
            }
        });
        barraMenu.add(menuPartidos);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void botonGuardarCambiosAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarCambiosAlActionPerformed
    ResultSet retsetMostrados;
    int i = 0;
    boolean fila_editada = false, algunaFilaEditada = false, error = false;
    ocultarMensajesError();
    //compruebo si se ha mostrado algún resultado antes de guardar los cambios, ya que si no se han mostrado no se ha podido modificar nada
    if (tablaAlumnos.getValueAt(0, 0) == null) {
        return;
    }
    try {
        String consulta_alumnos = leeConsultaAlumnosInterfaz();
        retsetMostrados = GestorAlumnos.consultarAlumno(accesoBD, consulta_alumnos);
        ultimaActualizacionAlumno = GestorAlumnos.consultarAlumno(accesoBD, consulta_alumnos);
        ultimaConsultaAlumno = consulta_alumnos;

        String idAlumno = null, nombre = null, primerApellido = null,
                segundoApellido = null, fechaNac = null, talla = null,
                nombrePadre = null, nombreMadre = null, email = null,
                numeroCuenta = null, telFijo = null, telMovil = null,
                provincia = null, localidad = null, domicilio = null,
                codPostal = null, colegio = null, observaciones = null;

        while (retsetMostrados.next()) {
            if (!retsetMostrados.getString("a.nombre").equals(tablaAlumnos.getValueAt(i, 0))) {
                fila_editada = true;
                if (tablaAlumnos.getValueAt(i, 0).toString().length() < 45) {
                    nombre = tablaAlumnos.getValueAt(i, 0).toString();
                } else {
                    nombre = tablaAlumnos.getValueAt(i, 0).toString().substring(0, 45);
                }
            }
            if (!retsetMostrados.getString("a.primerApellido").equals(tablaAlumnos.getValueAt(i, 1))) {
                fila_editada = true;
                if (tablaAlumnos.getValueAt(i, 1).toString().length() < 45) {
                    primerApellido = tablaAlumnos.getValueAt(i, 1).toString();
                } else {
                    primerApellido = tablaAlumnos.getValueAt(i, 1).toString().substring(0, 45);
                }
            }
            if (!retsetMostrados.getString("a.segundoApellido").equals(tablaAlumnos.getValueAt(i, 2))) {
                fila_editada = true;
                if (tablaAlumnos.getValueAt(i, 2).toString().length() < 45) {
                    segundoApellido = tablaAlumnos.getValueAt(i, 2).toString();
                } else {
                    segundoApellido = tablaAlumnos.getValueAt(i, 2).toString().substring(0, 45);
                }
            }
            if (!retsetMostrados.getString("a.fechaNacimiento").equals(tablaAlumnos.getValueAt(i, 3))) {
                fila_editada = true;
                fechaNac = tablaAlumnos.getValueAt(i, 3).toString();
            }
            if (!retsetMostrados.getString("a.talla").equals(tablaAlumnos.getValueAt(i, 5))) {
                fila_editada = true;
                if (tablaAlumnos.getValueAt(i, 5).toString().length() < 12) {
                    talla = tablaAlumnos.getValueAt(i, 5).toString();
                } else {
                    talla = tablaAlumnos.getValueAt(i, 5).toString().substring(0, 12);
                }
            }
            if (!retsetMostrados.getString("a.nombrepadre").equals(tablaAlumnos.getValueAt(i, 13))) {
                fila_editada = true;
                if (tablaAlumnos.getValueAt(i, 13).toString().length() < 100) {
                    nombrePadre = tablaAlumnos.getValueAt(i, 13).toString();
                } else {
                    nombrePadre = tablaAlumnos.getValueAt(i, 13).toString().substring(0, 100);
                }
            }
            if (!retsetMostrados.getString("a.nombremadre").equals(tablaAlumnos.getValueAt(i, 14))) {
                fila_editada = true;
                if (tablaAlumnos.getValueAt(i, 14).toString().length() < 100) {
                    nombreMadre = tablaAlumnos.getValueAt(i, 14).toString();
                } else {
                    nombreMadre = tablaAlumnos.getValueAt(i, 14).toString().substring(0, 100);
                }
            }
            if (tablaAlumnos.getValueAt(i, 4) != null) {
                if (retsetMostrados.getString("a.email") != null) {
                    if (!retsetMostrados.getString("a.email").equals(tablaAlumnos.getValueAt(i, 4))) {
                        fila_editada = true;
                        if (tablaAlumnos.getValueAt(i, 4).toString().length() < 75) {
                            email = tablaAlumnos.getValueAt(i, 4).toString();
                        } else {
                            email = tablaAlumnos.getValueAt(i, 4).toString().substring(0, 75);
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaAlumnos.getValueAt(i, 4).toString().length() < 75) {
                        email = tablaAlumnos.getValueAt(i, 4).toString();
                    } else {
                        email = tablaAlumnos.getValueAt(i, 4).toString().substring(0, 75);
                    }
                }
            } else {
                if (retsetMostrados.getString("a.email") != null) {
                    fila_editada = true;
                    email = "NULL";
                }
            }
            if (tablaAlumnos.getValueAt(i, 6) != null) {
                if (retsetMostrados.getString("a.numeroCuenta") != null) {
                    if (!retsetMostrados.getString("a.numeroCuenta").equals(tablaAlumnos.getValueAt(i, 6))) {
                        fila_editada = true;
                        if (tablaAlumnos.getValueAt(i, 6).toString().length() < 40) {
                            numeroCuenta = tablaAlumnos.getValueAt(i, 6).toString();
                        } else {
                            numeroCuenta = tablaAlumnos.getValueAt(i, 6).toString().substring(0, 40);
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaAlumnos.getValueAt(i, 6).toString().length() < 40) {
                        numeroCuenta = tablaAlumnos.getValueAt(i, 6).toString();
                    } else {
                        numeroCuenta = tablaAlumnos.getValueAt(i, 6).toString().substring(0, 40);
                    }
                }
            } else {
                if (retsetMostrados.getString("a.numeroCuenta") != null) {
                    fila_editada = true;
                    numeroCuenta = "NULL";
                }
            }
            if (tablaAlumnos.getValueAt(i, 7) != null) {
                if (isInteger((String) tablaAlumnos.getValueAt(i, 7))) {
                    if (retsetMostrados.getString("a.telmovil") != null) {
                        if (!retsetMostrados.getString("a.telmovil").equals(tablaAlumnos.getValueAt(i, 7))) {
                            fila_editada = true;
                            if (tablaAlumnos.getValueAt(i, 7).toString().length() < 45) {
                                telMovil = tablaAlumnos.getValueAt(i, 7).toString();
                            } else {
                                telMovil = tablaAlumnos.getValueAt(i, 7).toString().substring(0, 45);
                            }
                        }
                    } else {
                        fila_editada = true;
                        if (tablaAlumnos.getValueAt(i, 7).toString().length() < 45) {
                            telMovil = tablaAlumnos.getValueAt(i, 7).toString();
                        } else {
                            telMovil = tablaAlumnos.getValueAt(i, 7).toString().substring(0, 45);
                        }
                    }
                } else {
                    errorModifMovil.setVisible(true);
                }
            } else {
                if (retsetMostrados.getString("a.telmovil") != null) {
                    fila_editada = true;
                    telMovil = "NULL";
                }
            }
            if (tablaAlumnos.getValueAt(i, 8) != null) {
                if (isInteger((String) tablaAlumnos.getValueAt(i, 8))) {
                    if (retsetMostrados.getString("a.telfijo") != null) {
                        if (!retsetMostrados.getString("a.telfijo").equals(tablaAlumnos.getValueAt(i, 8))) {
                            fila_editada = true;
                            if (tablaAlumnos.getValueAt(i, 8).toString().length() < 45) {
                                telFijo = tablaAlumnos.getValueAt(i, 8).toString();
                            } else {
                                telFijo = tablaAlumnos.getValueAt(i, 8).toString().substring(0, 45);
                            }
                        }
                    } else {
                        fila_editada = true;
                        telFijo = tablaAlumnos.getValueAt(i, 8).toString();
                    }
                } else {
                    errorModifFijo.setVisible(true);
                }
            } else {
                if (retsetMostrados.getString("a.telfijo") != null) {
                    fila_editada = true;
                    telFijo = "NULL";
                }
            }
            if (tablaAlumnos.getValueAt(i, 9) != null) {
                if (retsetMostrados.getString("a.provincia") != null) {
                    if (!retsetMostrados.getString("a.provincia").equals(tablaAlumnos.getValueAt(i, 9))) {
                        fila_editada = true;
                        if (tablaAlumnos.getValueAt(i, 9).toString().length() < 70) {
                            provincia = tablaAlumnos.getValueAt(i, 9).toString();
                        } else {
                            provincia = tablaAlumnos.getValueAt(i, 9).toString().substring(0, 70);
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaAlumnos.getValueAt(i, 9).toString().length() < 70) {
                        provincia = tablaAlumnos.getValueAt(i, 9).toString();
                    } else {
                        provincia = tablaAlumnos.getValueAt(i, 9).toString().substring(0, 70);
                    }
                }
            } else {
                if (retsetMostrados.getString("a.provincia") != null) {
                    fila_editada = true;
                    provincia = "NULL";
                }
            }
            if (tablaAlumnos.getValueAt(i, 10) != null) {
                if (retsetMostrados.getString("a.localidad") != null) {
                    if (!retsetMostrados.getString("a.localidad").equals(tablaAlumnos.getValueAt(i, 10))) {
                        fila_editada = true;
                        if (tablaAlumnos.getValueAt(i, 10).toString().length() < 45) {
                            localidad = tablaAlumnos.getValueAt(i, 10).toString();
                        } else {
                            localidad = tablaAlumnos.getValueAt(i, 10).toString().substring(0, 45);
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaAlumnos.getValueAt(i, 10).toString().length() < 45) {
                        localidad = tablaAlumnos.getValueAt(i, 10).toString();
                    } else {
                        localidad = tablaAlumnos.getValueAt(i, 10).toString().substring(0, 45);
                    }
                }
            } else {
                if (retsetMostrados.getString("a.localidad") != null) {
                    fila_editada = true;
                    localidad = "NULL";
                }
            }
            if (tablaAlumnos.getValueAt(i, 11) != null) {
                if (retsetMostrados.getString("a.domicilio") != null) {
                    if (!retsetMostrados.getString("a.domicilio").equals(tablaAlumnos.getValueAt(i, 11))) {
                        fila_editada = true;
                        if (tablaAlumnos.getValueAt(i, 11).toString().length() < 100) {
                            domicilio = tablaAlumnos.getValueAt(i, 11).toString();
                        } else {
                            domicilio = tablaAlumnos.getValueAt(i, 11).toString().substring(0, 100) + "', ";
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaAlumnos.getValueAt(i, 11).toString().length() < 100) {
                        domicilio = tablaAlumnos.getValueAt(i, 11).toString();
                    } else {
                        domicilio = tablaAlumnos.getValueAt(i, 11).toString().substring(0, 100);
                    }
                }
            } else {
                if (retsetMostrados.getString("a.domicilio") != null) {
                    fila_editada = true;
                    domicilio = "NULL";
                }
            }
            if (tablaAlumnos.getValueAt(i, 12) != null) {
                if (isInteger((String) tablaAlumnos.getValueAt(i, 12))) {
                    if (retsetMostrados.getString("a.codigopostal") != null) {
                        if (!retsetMostrados.getString("a.codigopostal").equals(tablaAlumnos.getValueAt(i, 12))) {
                            fila_editada = true;
                            codPostal = tablaAlumnos.getValueAt(i, 12).toString();
                        }
                    } else {
                        fila_editada = true;
                        codPostal = tablaAlumnos.getValueAt(i, 12).toString();
                    }
                } else {
                    errorModifCP.setVisible(true);
                }
            } else {
                if (retsetMostrados.getString("a.codigopostal") != null) {
                    fila_editada = true;
                    codPostal = "NULL";
                }
            }
            if (tablaAlumnos.getValueAt(i, 15) != null) {
                if (retsetMostrados.getString("a.colegio") != null) {
                    if (!retsetMostrados.getString("a.colegio").equals(tablaAlumnos.getValueAt(i, 15))) {
                        fila_editada = true;
                        if (tablaAlumnos.getValueAt(i, 15).toString().length() < 45) {
                            colegio = tablaAlumnos.getValueAt(i, 15).toString();
                        } else {
                            colegio = tablaAlumnos.getValueAt(i, 15).toString().substring(0, 45);
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaAlumnos.getValueAt(i, 15).toString().length() < 45) {
                        colegio = tablaAlumnos.getValueAt(i, 15).toString();
                    } else {
                        colegio = tablaAlumnos.getValueAt(i, 15).toString().substring(0, 45);
                    }
                }
            } else {
                if (retsetMostrados.getString("a.colegio") != null) {
                    fila_editada = true;
                    colegio = "NULL";
                }
            }
            idAlumno = retsetMostrados.getString("a.idalumno");
            if (fila_editada == true) {
                error = GestorAlumnos.modificarDatos(accesoBD, idAlumno, nombre, primerApellido, segundoApellido, fechaNac,
                        numeroCuenta, domicilio, localidad, codPostal, provincia, colegio,
                        nombrePadre, nombreMadre, telFijo, telMovil, email, observaciones, talla);
                idAlumno = nombre = primerApellido = segundoApellido = null;
                fechaNac = talla = nombrePadre = nombreMadre = null;
                email = numeroCuenta = telFijo = telMovil = provincia = null;
                localidad = domicilio = codPostal = colegio = observaciones = null;
            }
            i++;
        }
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }
}//GEN-LAST:event_botonGuardarCambiosAlActionPerformed

private void menuInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInicioActionPerformed
}//GEN-LAST:event_menuInicioActionPerformed

private void menuJugadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuJugadoresActionPerformed
}//GEN-LAST:event_menuJugadoresActionPerformed

private void menuJugadoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuJugadoresMouseClicked
    /*panelInicio.setVisible(false);
     panelJugadores.setVisible(true);
     panelUsuarios.setVisible(false);
     panelTemporadas.setVisible(false);
     panelGrupos.setVisible(false);*/
    ocultarPaneles();
    panelJugadores.setVisible(true);
    ResultSet consulta;

    try {
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM grupo");
        consultaGrupo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaGrupo.addItem(consulta.getInt(1));
        }
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM equipo");
        consultaEquipo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaEquipo.addItem(consulta.getInt(1));
        }
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM categoria");
        consultaCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaCategoria.addItem(consulta.getString("tipo"));
        }
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM temporada");
        consultaTemporada.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaTemporada.addItem(consulta.getString("curso"));
        }
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM usuario where usuario.entrenador=true");
        consultaEntrenador.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaEntrenador.addItem(consulta.getString("nombre") + " " + consulta.getString("primerApellido"));
        }

    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }
}//GEN-LAST:event_menuJugadoresMouseClicked

private void menuInicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuInicioMouseClicked

    ocultarPaneles();
    panelInicio.setVisible(true);
}//GEN-LAST:event_menuInicioMouseClicked

    private String leeConsultaAlumnosInterfaz() {
        String consulta_alumnos = "SELECT a.idAlumno, a.talla, a.nombre, a.primerApellido, a.segundoApellido, a.nombrePadre, a.nombreMadre, a.numeroCuenta,"
                + "a.telMovil, a.telFijo, a.observaciones, a.provincia, a.localidad, a.codigoPostal, a.colegio, a.domicilio, a.email, a.fechaNacimiento, "
                + "a.sexo FROM ";
        String tablasImplicadas = " alumno a ";
        String condicionesConsulta = " WHERE ";

        if (!nombreAl.getText().equals("") || !primerApellidoAl.getText().equals("") || !segundoApellidoAl.getText().equals("")
                || !edadAl.getText().equals("") || !consultaEquipo.getSelectedItem().equals("") || !consultaGrupo.getSelectedItem().equals("")
                || !consultaCategoria.getSelectedItem().equals("") || !consultaTemporada.getSelectedItem().equals("") || !consultaEntrenador.getSelectedItem().equals("")) {
            if (!nombreAl.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.nombre='" + nombreAl.getText() + "' AND ";
            }
            if (!primerApellidoAl.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.primerapellido='" + primerApellidoAl.getText() + "' AND ";
            }
            if (!segundoApellidoAl.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.segundoapellido='" + segundoApellidoAl.getText() + "' AND ";
            }
            if (!edadAl.getText().equals("") && isInteger(edadAl.getText())) {
                Calendar cal1 = Calendar.getInstance();  //con la hora actual del sistema calculamos la edad del alumno
                int diaAct, mesAct, anoAct;
                String fechaAnt, fechaPost;
                diaAct = cal1.get(Calendar.DATE);
                mesAct = cal1.get(Calendar.MONTH) + 1;
                anoAct = cal1.get(Calendar.YEAR) - Integer.parseInt(edadAl.getText());
                fechaAnt = anoAct + "-" + mesAct + "-" + diaAct;
                fechaPost = (anoAct - 1) + "-" + mesAct + "-" + diaAct;
                condicionesConsulta = condicionesConsulta + " a.fechaNacimiento <= '" + fechaAnt + "' AND " + " a.fechaNacimiento > '" + fechaPost + "' AND ";
            }
            if (!consultaGrupo.getSelectedItem().equals("") || !consultaCategoria.getSelectedItem().equals("") || !consultaTemporada.getSelectedItem().equals("") || !consultaEntrenador.getSelectedItem().equals("")) {
                tablasImplicadas = tablasImplicadas + " , alumnogrupo ";
                condicionesConsulta = condicionesConsulta + " alumnogrupo.alumno_idalumno=a.idalumno AND ";
                if (!consultaGrupo.getSelectedItem().equals("")) {
                    condicionesConsulta = condicionesConsulta + " alumnogrupo.Grupo_idGrupo=" + consultaGrupo.getSelectedItem() + " AND ";
                }
                if (!consultaCategoria.getSelectedItem().equals("")) {
                    tablasImplicadas = tablasImplicadas + " , categoria ";
                    condicionesConsulta = condicionesConsulta + " alumnogrupo.Grupo_Categoria_idCategoria=categoria.idCategoria AND categoria.tipo='" + consultaCategoria.getSelectedItem() + "' AND ";
                }
                if (!consultaEntrenador.getSelectedItem().equals("")) {
                    tablasImplicadas = tablasImplicadas + " , usuario ";
                    String nombre, apellido;
                    int espacios;
                    espacios = consultaEntrenador.getSelectedItem().toString().indexOf(" ");
                    condicionesConsulta = condicionesConsulta + " alumnogrupo.Grupo_Usuario_idUsuario=usuario.idUsuario and concat(usuario.nombre, ' ', usuario.primerApellido)='" + consultaEntrenador.getSelectedItem() + "' AND ";
                }
            }
            if (!consultaEquipo.getSelectedItem().equals("")) {
                tablasImplicadas = tablasImplicadas + " , alumnoequipo ";
                condicionesConsulta = condicionesConsulta + " alumnoequipo.Alumno_idAlumno=a.idalumno AND alumnoequipo.Equipo_idEquipo=" + consultaEquipo.getSelectedItem() + " AND ";
            }
            if (!consultaTemporada.getSelectedItem().equals("")) {
                tablasImplicadas = tablasImplicadas + " , alumnotemporada, temporada ";
                condicionesConsulta = condicionesConsulta + " alumnotemporada.alumno_idalumno=a.idalumno and alumnotemporada.temporada_idtemporada=temporada.idTemporada and temporada.curso='" + consultaTemporada.getSelectedItem() + "' AND ";
            }

            condicionesConsulta = condicionesConsulta.substring(0, condicionesConsulta.length() - 4);
            tablasImplicadas = tablasImplicadas + condicionesConsulta;
        }
        consulta_alumnos = consulta_alumnos + tablasImplicadas;

        return consulta_alumnos;
    }
    
    private String leeConsultaPartidos(){
        String consultaPartido = "SELECT";
        
        return consultaPartido;
    }

    public void ocultarMensajesError() {
        mensajeErrorEliminarAlumno.setVisible(false);
        errorModifMovil.setVisible(false);
        errorModifFijo.setVisible(false);
        errorModifCP.setVisible(false);
        errorModifMovilUsuario.setVisible(false);
        errorModifFijoUsuario.setVisible(false);
        errorEliminarUsuario.setVisible(false);
    }

private void botonMostrarAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarAlumnosActionPerformed
    try {
        String consulta_alumnos = leeConsultaAlumnosInterfaz();
        consultaAlumnosMostrados = consulta_alumnos;
        System.out.print("\nLA consulta a " + consulta_alumnos + "  y qui termina");
        retset = GestorAlumnos.consultarAlumno(accesoBD, consulta_alumnos);
        ocultarMensajesError();
        tablaAlumnos.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
        },
                new String[]{
            "Nombre", "Primer Apellido", "Segundo Apellido", "Fecha Nacimiento", "Email", "Talla", "Numero Cuenta", "Tel. Movil", "Tel. Fijo", "Provincia", "Localidad", "Domicilio", "CP", "Nombre Padre", "Nombre Madre", "Colegio"
        }));
        javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
        modelo_tabla = tablaAlumnos.getModel();
        int i = 0;
        while (retset.next()) {



            if (i < 25) {
                tablaAlumnos.setValueAt(retset.getString("a.nombre"), i, 0);
                tablaAlumnos.setValueAt(retset.getString("a.primerApellido"), i, 1);
                tablaAlumnos.setValueAt(retset.getString("a.segundoApellido"), i, 2);
                tablaAlumnos.setValueAt(retset.getString("fechaNacimiento"), i, 3);

                tablaAlumnos.setValueAt(retset.getString("a.email"), i, 4);
                tablaAlumnos.setValueAt(retset.getString("a.talla"), i, 5);
                tablaAlumnos.setValueAt(retset.getString("a.numerocuenta"), i, 6);
                tablaAlumnos.setValueAt(retset.getString("a.telmovil"), i, 7);
                tablaAlumnos.setValueAt(retset.getString("a.telfijo"), i, 8);
                tablaAlumnos.setValueAt(retset.getString("a.provincia"), i, 9);
                tablaAlumnos.setValueAt(retset.getString("a.localidad"), i, 10);
                tablaAlumnos.setValueAt(retset.getString("a.domicilio"), i, 11);
                tablaAlumnos.setValueAt(retset.getString("a.codigopostal"), i, 12);
                tablaAlumnos.setValueAt(retset.getString("a.nombrepadre"), i, 13);
                tablaAlumnos.setValueAt(retset.getString("a.nombremadre"), i, 14);
                tablaAlumnos.setValueAt(retset.getString("a.colegio"), i, 15);
            } else {
                javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaAlumnos.getModel();
                Object nuevo[] = {"", "", ""};
                temp.addRow(nuevo);
                tablaAlumnos.setValueAt(retset.getString("a.nombre"), i, 0);
                tablaAlumnos.setValueAt(retset.getString("a.primerApellido"), i, 1);
                tablaAlumnos.setValueAt(retset.getString("a.segundoApellido"), i, 2);
                tablaAlumnos.setValueAt(retset.getString("fechaNacimiento"), i, 3);

                tablaAlumnos.setValueAt(retset.getString("a.email"), i, 4);
                tablaAlumnos.setValueAt(retset.getString("a.talla"), i, 5);
                tablaAlumnos.setValueAt(retset.getString("a.numerocuenta"), i, 6);
                tablaAlumnos.setValueAt(retset.getString("a.telmovil"), i, 7);
                tablaAlumnos.setValueAt(retset.getString("a.telfijo"), i, 8);
                tablaAlumnos.setValueAt(retset.getString("a.provincia"), i, 9);
                tablaAlumnos.setValueAt(retset.getString("a.localidad"), i, 10);
                tablaAlumnos.setValueAt(retset.getString("a.domicilio"), i, 11);
                tablaAlumnos.setValueAt(retset.getString("a.codigopostal"), i, 12);
                tablaAlumnos.setValueAt(retset.getString("a.nombrepadre"), i, 13);
                tablaAlumnos.setValueAt(retset.getString("a.nombremadre"), i, 14);
                tablaAlumnos.setValueAt(retset.getString("a.colegio"), i, 15);
            }
            i++;
        }
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }

}//GEN-LAST:event_botonMostrarAlumnosActionPerformed

private void botonNuevoAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoAlumnoActionPerformed
    ocultarMensajesError();
    new AltaAlumno(accesoBD).setVisible(true);
}//GEN-LAST:event_botonNuevoAlumnoActionPerformed

    private boolean isInteger(String cadena) {
        try {
            int num;
            num = Integer.parseInt(cadena);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

private void deshacerCambiosAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deshacerCambiosAlumnoActionPerformed
    ResultSet estadoActual;
    estadoActual = GestorAlumnos.consultarAlumno(accesoBD, ultimaConsultaAlumno);
    ocultarMensajesError();
    String idAlumno = null, nombre = null, primerApellido = null,
            segundoApellido = null, fechaNac = null, talla = null,
            nombrePadre = null, nombreMadre = null, email = null,
            numeroCuenta = null, telFijo = null, telMovil = null,
            provincia = null, localidad = null, domicilio = null,
            codPostal = null, colegio = null, observaciones = null;
    try {
        while (estadoActual.next()) {
            ultimaActualizacionAlumno.next();
            boolean fila_editada = false;
            if (!ultimaActualizacionAlumno.getString("a.nombre").equals(estadoActual.getString("a.nombre"))) {
                fila_editada = true;
                nombre = ultimaActualizacionAlumno.getString("a.nombre");
            }
            if (!ultimaActualizacionAlumno.getString("a.primerApellido").equals(estadoActual.getString("a.primerApellido"))) {
                fila_editada = true;
                primerApellido = ultimaActualizacionAlumno.getString("a.primerApellido");
            }
            if (!ultimaActualizacionAlumno.getString("a.segundoApellido").equals(estadoActual.getString("a.segundoApellido"))) {
                fila_editada = true;
                segundoApellido = ultimaActualizacionAlumno.getString("a.segundoApellido");
            }
            if (!ultimaActualizacionAlumno.getString("a.fechaNacimiento").equals(estadoActual.getString("a.fechaNacimiento"))) {
                fila_editada = true;
                fechaNac = ultimaActualizacionAlumno.getString("a.fechaNacimiento");
            }
            if (!ultimaActualizacionAlumno.getString("a.nombrepadre").equals(estadoActual.getString("a.nombrepadre"))) {
                fila_editada = true;
                nombrePadre = ultimaActualizacionAlumno.getString("a.nombrepadre");
            }
            if (!ultimaActualizacionAlumno.getString("a.nombremadre").equals(estadoActual.getString("a.nombremadre"))) {
                fila_editada = true;
                nombreMadre = ultimaActualizacionAlumno.getString("a.nombremadre");
            }
            if (ultimaActualizacionAlumno.getString("a.email") != null) { //antes no estaba a null
                if (estadoActual.getString("a.email") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionAlumno.getString("a.email").equals(estadoActual.getString("a.email"))) {
                        fila_editada = true;
                        email = ultimaActualizacionAlumno.getString("a.email");
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    email = ultimaActualizacionAlumno.getString("a.email");
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("a.email") != null) {    //ahora no esta a null
                    fila_editada = true;
                    email = "NULL";
                }
            }
            if (ultimaActualizacionAlumno.getString("a.talla") != null) { //antes no estaba a null
                if (estadoActual.getString("a.talla") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionAlumno.getString("a.talla").equals(estadoActual.getString("a.talla"))) {
                        fila_editada = true;
                        talla = ultimaActualizacionAlumno.getString("a.talla");
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    talla = ultimaActualizacionAlumno.getString("a.talla");
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("a.talla") != null) {    //ahora no esta a null
                    fila_editada = true;
                    talla = "NULL";
                }
            }
            if (ultimaActualizacionAlumno.getString("a.numerocuenta") != null) { //antes no estaba a null
                if (estadoActual.getString("a.numerocuenta") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionAlumno.getString("a.numerocuenta").equals(estadoActual.getString("a.numerocuenta"))) {
                        fila_editada = true;
                        numeroCuenta = ultimaActualizacionAlumno.getString("a.numerocuenta");
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    numeroCuenta = ultimaActualizacionAlumno.getString("a.numerocuenta");
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("a.numerocuenta") != null) {    //ahora no esta a null
                    fila_editada = true;
                    numeroCuenta = "NULL";
                }
            }
            if (ultimaActualizacionAlumno.getString("a.telmovil") != null) { //antes no estaba a null
                if (estadoActual.getString("a.telmovil") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionAlumno.getString("a.telmovil").equals(estadoActual.getString("a.telmovil"))) {
                        fila_editada = true;
                        telMovil = ultimaActualizacionAlumno.getString("a.telmovil");
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    telMovil = ultimaActualizacionAlumno.getString("a.telmovil");
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("a.telmovil") != null) {    //ahora no esta a null
                    fila_editada = true;
                    telMovil = "NULL";
                }
            }
            if (ultimaActualizacionAlumno.getString("a.telfijo") != null) { //antes no estaba a null
                if (estadoActual.getString("a.telfijo") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionAlumno.getString("a.telfijo").equals(estadoActual.getString("a.telfijo"))) {
                        fila_editada = true;
                        telFijo = ultimaActualizacionAlumno.getString("a.telfijo");
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    telFijo = ultimaActualizacionAlumno.getString("a.telfijo");
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("a.telfijo") != null) {    //ahora no esta a null
                    fila_editada = true;
                    telFijo = "NULL";
                }
            }
            if (ultimaActualizacionAlumno.getString("a.provincia") != null) { //antes no estaba a null
                if (estadoActual.getString("a.provincia") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionAlumno.getString("a.provincia").equals(estadoActual.getString("a.provincia"))) {
                        fila_editada = true;
                        provincia = ultimaActualizacionAlumno.getString("a.provincia");
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    provincia = ultimaActualizacionAlumno.getString("a.provincia");
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("a.provincia") != null) {    //ahora no esta a null
                    fila_editada = true;
                    provincia = "NULL";
                }
            }
            if (ultimaActualizacionAlumno.getString("a.localidad") != null) { //antes no estaba a null
                if (estadoActual.getString("a.localidad") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionAlumno.getString("a.localidad").equals(estadoActual.getString("a.localidad"))) {
                        fila_editada = true;
                        localidad = ultimaActualizacionAlumno.getString("a.localidad");
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    localidad = ultimaActualizacionAlumno.getString("a.localidad");
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("a.localidad") != null) {    //ahora no esta a null
                    fila_editada = true;
                    localidad = "NULL";
                }
            }
            if (ultimaActualizacionAlumno.getString("a.domicilio") != null) { //antes no estaba a null
                if (estadoActual.getString("a.domicilio") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionAlumno.getString("a.domicilio").equals(estadoActual.getString("a.domicilio"))) {
                        fila_editada = true;
                        domicilio = ultimaActualizacionAlumno.getString("a.domicilio");
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    domicilio = ultimaActualizacionAlumno.getString("a.domicilio");
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("a.domicilio") != null) {    //ahora no esta a null
                    fila_editada = true;
                    domicilio = "NULL";
                }
            }
            if (ultimaActualizacionAlumno.getString("a.codigopostal") != null) { //antes no estaba a null
                if (estadoActual.getString("a.codigopostal") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionAlumno.getString("a.codigopostal").equals(estadoActual.getString("a.codigopostal"))) {
                        fila_editada = true;
                        codPostal = ultimaActualizacionAlumno.getString("a.codigopostal");
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    codPostal = ultimaActualizacionAlumno.getString("a.codigopostal");
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("a.codigopostal") != null) {    //ahora no esta a null
                    fila_editada = true;
                    codPostal = "NULL";
                }
            }
            if (ultimaActualizacionAlumno.getString("a.colegio") != null) { //antes no estaba a null
                if (estadoActual.getString("a.colegio") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionAlumno.getString("a.colegio").equals(estadoActual.getString("a.colegio"))) {
                        fila_editada = true;
                        colegio = ultimaActualizacionAlumno.getString("a.colegio");
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    colegio = ultimaActualizacionAlumno.getString("a.colegio");
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("a.colegio") != null) {    //ahora no esta a null
                    fila_editada = true;
                    colegio = "NULL";
                }
            }
            idAlumno = ultimaActualizacionAlumno.getString("a.idalumno");
            if (fila_editada == true) {
                GestorAlumnos.modificarDatos(accesoBD, idAlumno, nombre, primerApellido, segundoApellido, fechaNac,
                        numeroCuenta, domicilio, localidad, codPostal, provincia, colegio,
                        nombrePadre, nombreMadre, telFijo, telMovil, email, observaciones, talla);
                idAlumno = nombre = primerApellido = segundoApellido = null;
                fechaNac = talla = nombrePadre = nombreMadre = null;
                email = numeroCuenta = telFijo = telMovil = provincia = null;
                localidad = domicilio = codPostal = colegio = observaciones = null;
            }
        }

        botonMostrarAlumnosActionPerformed(null);
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }

}//GEN-LAST:event_deshacerCambiosAlumnoActionPerformed

private void cerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarSesionActionPerformed
    this.dispose();
    new Acceso().setVisible(true);
}//GEN-LAST:event_cerrarSesionActionPerformed

private void menuUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuUsuariosMouseClicked
    /*panelInicio.setVisible(false);
     panelJugadores.setVisible(false);
     panelTemporadas.setVisible(false);
     panelUsuarios.setVisible(true);
     panelGrupos.setVisible(false);*/
    ocultarPaneles();
    panelUsuarios.setVisible(true);

    ResultSet consulta;

    try {
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM grupo");
        consultaGrupoUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaGrupoUsuario.addItem(consulta.getInt(1));
        }
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM equipo");
        consultaEquipoUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaEquipoUsuario.addItem(consulta.getInt(1));
        }
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM categoria");
        consultaCategoriaUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaCategoriaUsuario.addItem(consulta.getString("tipo"));
        }
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM temporada");
        consultaTemporadaUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            consultaTemporadaUsuario.addItem(consulta.getString("curso"));
        }
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }
}//GEN-LAST:event_menuUsuariosMouseClicked

private void botonNuevoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoUsuarioActionPerformed
    ocultarMensajesError();
    new AltaUsuario(accesoBD).setVisible(true);
}//GEN-LAST:event_botonNuevoUsuarioActionPerformed

private void botonGuardarCambiosUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarCambiosUsuarioActionPerformed
    ResultSet retsetMostrados;
    ocultarMensajesError();
    //compruebo si se ha mostrado algún resultado antes de guardar los cambios, ya que si no se han mostrado no se ha podido modificar nada
    if (tablaUsuarios.getValueAt(0, 0) == null) {
        return;
    }
    try {
        String consultaUsuario = leeConsultaUsuariosInterfaz();
        retsetMostrados = GestorUsuarios.consultarUsuario(accesoBD, consultaUsuario);
        ultimaActualizacionUsuario = GestorUsuarios.consultarUsuario(accesoBD, consultaUsuario);
        ultimaConsultaUsuario = consultaUsuario;
        int i = 0;
        String updateFila;
        while (retsetMostrados.next()) {
            updateFila = "UPDATE usuario SET ";
            boolean fila_editada = false;
            if (!retsetMostrados.getString("u.nombre").equals(tablaUsuarios.getValueAt(i, 0))) {
                fila_editada = true;
                if (tablaUsuarios.getValueAt(i, 0).toString().length() < 45) {
                    updateFila = updateFila + " nombre='" + tablaUsuarios.getValueAt(i, 0) + "', ";
                } else {
                    updateFila = updateFila + " nombre='" + tablaUsuarios.getValueAt(i, 0).toString().substring(0, 45) + "', ";
                }
            }
            if (!retsetMostrados.getString("u.primerApellido").equals(tablaUsuarios.getValueAt(i, 1))) {
                fila_editada = true;
                if (tablaUsuarios.getValueAt(i, 1).toString().length() < 75) {
                    updateFila = updateFila + " primerApellido='" + tablaUsuarios.getValueAt(i, 1) + "', ";
                } else {
                    updateFila = updateFila + " primerApellido='" + tablaUsuarios.getValueAt(i, 1).toString().substring(0, 75) + "', ";
                }
            }
            if (!retsetMostrados.getString("u.segundoApellido").equals(tablaUsuarios.getValueAt(i, 2))) {
                fila_editada = true;
                if (tablaUsuarios.getValueAt(i, 2).toString().length() < 45) {
                    updateFila = updateFila + " segundoApellido='" + tablaUsuarios.getValueAt(i, 2) + "', ";
                } else {
                    updateFila = updateFila + " segundoApellido='" + tablaUsuarios.getValueAt(i, 2).toString().substring(0, 45) + "', ";
                }
            }
            if (!retsetMostrados.getString("u.dni").equals(tablaUsuarios.getValueAt(i, 3))) {
                fila_editada = true;
                if (tablaUsuarios.getValueAt(i, 3).toString().length() < 12) {
                    updateFila = updateFila + " dni='" + tablaUsuarios.getValueAt(i, 3) + "', ";
                } else {
                    updateFila = updateFila + " dni='" + tablaUsuarios.getValueAt(i, 3).toString().substring(0, 12) + "', ";
                }
            }
            if (tablaUsuarios.getValueAt(i, 9) != null) {
                if (retsetMostrados.getString("u.email") != null) {
                    if (!retsetMostrados.getString("u.email").equals(tablaUsuarios.getValueAt(i, 9))) {
                        fila_editada = true;
                        if (tablaUsuarios.getValueAt(i, 9).toString().length() < 45) {
                            updateFila = updateFila + " email='" + tablaUsuarios.getValueAt(i, 9) + "', ";
                        } else {
                            updateFila = updateFila + " email='" + tablaUsuarios.getValueAt(i, 9).toString().substring(0, 45) + "', ";
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaUsuarios.getValueAt(i, 9).toString().length() < 45) {
                        updateFila = updateFila + " email='" + tablaUsuarios.getValueAt(i, 9) + "', ";
                    } else {
                        updateFila = updateFila + " email='" + tablaUsuarios.getValueAt(i, 9).toString().substring(0, 44) + "', ";
                    }
                }
            } else {
                if (retsetMostrados.getString("u.email") != null) {
                    fila_editada = true;
                    updateFila = updateFila + " email=null, ";
                }
            }

            if (tablaUsuarios.getValueAt(i, 4) != null) {
                if (retsetMostrados.getString("u.clave") != null) {
                    if (!retsetMostrados.getString("u.clave").equals(tablaUsuarios.getValueAt(i, 4))) {
                        fila_editada = true;
                        if (tablaUsuarios.getValueAt(i, 4).toString().length() < 30) {
                            updateFila = updateFila + " clave='" + tablaUsuarios.getValueAt(i, 4) + "', ";
                        } else {
                            updateFila = updateFila + " clave='" + tablaUsuarios.getValueAt(i, 4).toString().substring(0, 30) + "', ";
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaUsuarios.getValueAt(i, 4).toString().length() < 30) {
                        updateFila = updateFila + " clave='" + tablaUsuarios.getValueAt(i, 4) + "', ";
                    } else {
                        updateFila = updateFila + " clave='" + tablaUsuarios.getValueAt(i, 4).toString().substring(0, 30) + "', ";
                    }
                }
            } else {
                if (retsetMostrados.getString("u.clave") != null) {
                    fila_editada = true;
                    updateFila = updateFila + " clave=null, ";
                }
            }
            if (tablaUsuarios.getValueAt(i, 6) != null) {
                if (retsetMostrados.getString("u.numeroCuenta") != null) {
                    if (!retsetMostrados.getString("u.numeroCuenta").equals(tablaUsuarios.getValueAt(i, 6))) {
                        fila_editada = true;
                        if (tablaUsuarios.getValueAt(i, 6).toString().length() < 45) {
                            updateFila = updateFila + " numeroCuenta='" + tablaUsuarios.getValueAt(i, 6) + "', ";
                        } else {
                            updateFila = updateFila + " numeroCuenta='" + tablaUsuarios.getValueAt(i, 6).toString().substring(0, 45) + "', ";
                        }
                    }
                } else {
                    fila_editada = true;
                    if (tablaUsuarios.getValueAt(i, 6).toString().length() < 45) {
                        updateFila = updateFila + " numeroCuenta='" + tablaUsuarios.getValueAt(i, 6) + "', ";
                    } else {
                        updateFila = updateFila + " numeroCuenta='" + tablaUsuarios.getValueAt(i, 6).toString().substring(0, 45) + "', ";
                    }
                }
            } else {
                if (retsetMostrados.getString("u.numeroCuenta") != null) {
                    fila_editada = true;
                    updateFila = updateFila + " numeroCuenta=null, ";
                }
            }
            if (tablaUsuarios.getValueAt(i, 7) != null) {
                if (isInteger((String) tablaUsuarios.getValueAt(i, 7))) {
                    if (retsetMostrados.getString("u.telmovil") != null) {
                        if (!retsetMostrados.getString("u.telmovil").equals(tablaUsuarios.getValueAt(i, 7))) {
                            fila_editada = true;
                            updateFila = updateFila + " telmovil=" + tablaUsuarios.getValueAt(i, 7) + ", ";
                        }
                    } else {
                        fila_editada = true;
                        updateFila = updateFila + " telmovil=" + tablaUsuarios.getValueAt(i, 7) + ", ";
                    }
                } else {
                    //errorModifMovilUsuario.setVisible(true);
                }
            } else {
                if (retsetMostrados.getString("u.telmovil") != null) {
                    fila_editada = true;
                    updateFila = updateFila + " telmovil=null, ";
                }
            }
            if (tablaUsuarios.getValueAt(i, 8) != null) {
                if (isInteger((String) tablaUsuarios.getValueAt(i, 8))) {
                    if (retsetMostrados.getString("u.telFijo") != null) {
                        if (!retsetMostrados.getString("u.telFijo").equals(tablaUsuarios.getValueAt(i, 8))) {
                            fila_editada = true;
                            updateFila = updateFila + " telFijo=" + tablaUsuarios.getValueAt(i, 8) + ", ";
                        }
                    } else {
                        fila_editada = true;
                        updateFila = updateFila + " telFijo=" + tablaUsuarios.getValueAt(i, 8) + ", ";
                    }
                } else {
                    //errorModifFijoUsuario.setVisible(true);
                }
            } else {
                if (retsetMostrados.getString("u.telFijo") != null) {
                    fila_editada = true;
                    updateFila = updateFila + " telFijo=null, ";
                }
            }
            updateFila = updateFila.substring(0, updateFila.length() - 2);
            updateFila = updateFila + " WHERE usuario.idusuario=" + retsetMostrados.getString("u.idUsuario");
            if (fila_editada == true) {
                GestorUsuarios.actualizaUsuario(accesoBD, updateFila);
                System.out.print("\nModificado " + i + " act\n " + updateFila);
            }
            i++;
        }
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }
}//GEN-LAST:event_botonGuardarCambiosUsuarioActionPerformed

private void deshacerCambiosUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deshacerCambiosUsuarioActionPerformed
    ResultSet estadoActual;
    estadoActual = GestorUsuarios.consultarUsuario(accesoBD, ultimaConsultaUsuario);
    ocultarMensajesError();
    try {
        String updateFila;
        while (estadoActual.next()) {
            ultimaActualizacionUsuario.next();
            updateFila = "UPDATE usuario SET ";
            boolean fila_editada = false;
            if (!ultimaActualizacionUsuario.getString("u.nombre").equals(estadoActual.getString("u.nombre"))) {
                fila_editada = true;
                updateFila = updateFila + " nombre='" + ultimaActualizacionUsuario.getString("u.nombre") + "', ";
            }
            if (!ultimaActualizacionUsuario.getString("u.primerApellido").equals(estadoActual.getString("u.primerApellido"))) {
                fila_editada = true;
                updateFila = updateFila + " primerApellido='" + ultimaActualizacionUsuario.getString("u.primerApellido") + "', ";
            }
            if (!ultimaActualizacionUsuario.getString("u.segundoApellido").equals(estadoActual.getString("u.segundoApellido"))) {
                fila_editada = true;
                updateFila = updateFila + " segundoApellido='" + ultimaActualizacionUsuario.getString("u.segundoApellido") + "', ";
            }
            if (!ultimaActualizacionUsuario.getString("u.dni").equals(estadoActual.getString("u.dni"))) {
                fila_editada = true;
                updateFila = updateFila + " dni='" + ultimaActualizacionUsuario.getString("u.dni") + "', ";
            }
            if (ultimaActualizacionUsuario.getString("u.email") != null) { //antes no estaba a null
                if (estadoActual.getString("u.email") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionUsuario.getString("u.email").equals(estadoActual.getString("u.email"))) {
                        fila_editada = true;
                        updateFila = updateFila + " email='" + ultimaActualizacionUsuario.getString("u.email") + "', ";
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    updateFila = updateFila + " email='" + ultimaActualizacionUsuario.getString("u.email") + "', ";
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("u.email") != null) {    //ahora no esta a null
                    fila_editada = true;
                    updateFila = updateFila + " email=null, ";
                }
            }
            if (ultimaActualizacionUsuario.getString("u.numerocuenta") != null) { //antes no estaba a null
                if (estadoActual.getString("u.numerocuenta") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionUsuario.getString("u.numerocuenta").equals(estadoActual.getString("u.numerocuenta"))) {
                        fila_editada = true;
                        updateFila = updateFila + " numerocuenta='" + ultimaActualizacionUsuario.getString("u.numerocuenta") + "', ";
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    updateFila = updateFila + " numerocuenta='" + ultimaActualizacionUsuario.getString("u.numerocuenta") + "', ";
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("u.numerocuenta") != null) {    //ahora no esta a null
                    fila_editada = true;
                    updateFila = updateFila + " numerocuenta=null, ";
                }
            }
            if (ultimaActualizacionUsuario.getString("u.telmovil") != null) { //antes no estaba a null
                if (estadoActual.getString("u.telmovil") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionUsuario.getString("u.telmovil").equals(estadoActual.getString("u.telmovil"))) {
                        fila_editada = true;
                        updateFila = updateFila + " telmovil=" + ultimaActualizacionUsuario.getString("u.telmovil") + ", ";
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    updateFila = updateFila + " telmovil=" + ultimaActualizacionUsuario.getString("u.telmovil") + ", ";
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("u.telmovil") != null) {    //ahora no esta a null
                    fila_editada = true;
                    updateFila = updateFila + " telmovil=null, ";
                }
            }
            if (ultimaActualizacionUsuario.getString("u.telfijo") != null) { //antes no estaba a null
                if (estadoActual.getString("u.telfijo") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionUsuario.getString("u.telfijo").equals(estadoActual.getString("u.telfijo"))) {
                        fila_editada = true;
                        updateFila = updateFila + " telfijo=" + ultimaActualizacionUsuario.getString("u.telfijo") + ", ";
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    updateFila = updateFila + " telfijo=" + ultimaActualizacionUsuario.getString("u.telfijo") + ", ";
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("u.telfijo") != null) {    //ahora no esta a null
                    fila_editada = true;
                    updateFila = updateFila + " telfijo=null, ";
                }
            }
            if (ultimaActualizacionUsuario.getString("u.clave") != null) { //antes no estaba a null
                if (estadoActual.getString("u.clave") != null) {    //ahora tampoco esta a null
                    if (!ultimaActualizacionUsuario.getString("u.clave").equals(estadoActual.getString("u.clave"))) {
                        fila_editada = true;
                        updateFila = updateFila + " clave='" + ultimaActualizacionUsuario.getString("u.clave") + "', ";
                    }
                } else {                                         //ahora esta a null
                    fila_editada = true;
                    updateFila = updateFila + " clave='" + ultimaActualizacionUsuario.getString("u.clave") + "', ";
                }
            } else {                                            //antes estaba a null
                if (estadoActual.getString("u.clave") != null) {    //ahora no esta a null
                    fila_editada = true;
                    updateFila = updateFila + " clave=null, ";
                }
            }
            updateFila = updateFila.substring(0, updateFila.length() - 2);
            updateFila = updateFila + " WHERE usuario.idusuario=" + ultimaActualizacionUsuario.getString("u.idusuario");
            if (fila_editada == true) {
                System.out.print("\nVuelta atras  act\n " + updateFila);
                GestorUsuarios.actualizaUsuario(accesoBD, updateFila);
            }
        }

        boton_mostrar_UsuariosActionPerformed(null);
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }

}//GEN-LAST:event_deshacerCambiosUsuarioActionPerformed
    private String leeConsultaUsuariosInterfaz() {
        String consulta_usuarios = "select u.idUsuario, u.nombre, u.primerApellido, u.segundoApellido, u.DNI, u.clave, u.entrenador, u.numeroCuenta, u.telMovil, u.telFijo, u.email"
                + " FROM ";
        String tablasImplicadas = " usuario u ";
        String condicionesConsulta = " WHERE ";

        if (!textfield_nombreUsuario.getText().equals("") || !textfield_apellidoPrimeroUsuario.getText().equals("") || !textfield_apellidoSegundoUsuario.getText().equals("")
                || !consultaEntrenadorUsuario.getSelectedItem().equals("") || !consultaEquipoUsuario.getSelectedItem().equals("") || !consultaGrupoUsuario.getSelectedItem().equals("")
                || !consultaCategoriaUsuario.getSelectedItem().equals("") || !consultaTemporadaUsuario.getSelectedItem().equals("")) {
            if (!textfield_nombreUsuario.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " u.nombre='" + textfield_nombreUsuario.getText() + "' AND ";
            }
            if (!textfield_apellidoPrimeroUsuario.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " u.primerapellido='" + textfield_apellidoPrimeroUsuario.getText() + "' AND ";
            }
            if (!textfield_apellidoSegundoUsuario.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " u.segundoapellido='" + textfield_apellidoSegundoUsuario.getText() + "' AND ";
            }
            if (!consultaEntrenadorUsuario.getSelectedItem().equals("")) {
                if (consultaEntrenadorUsuario.getSelectedItem().equals("Entrenador")) {
                    condicionesConsulta = condicionesConsulta + " u.entrenador=" + true + " AND ";
                } else {
                    condicionesConsulta = condicionesConsulta + " u.entrenador=" + false + " AND ";
                }
            }
            if (!consultaGrupoUsuario.getSelectedItem().equals("") || !consultaCategoriaUsuario.getSelectedItem().equals("") || !consultaTemporadaUsuario.getSelectedItem().equals("")) {
                tablasImplicadas = tablasImplicadas + " , grupo ";
                condicionesConsulta = condicionesConsulta + " grupo.usuario_idusuario=u.idusuario AND ";
                if (!consultaGrupoUsuario.getSelectedItem().equals("")) {
                    condicionesConsulta = condicionesConsulta + " grupo.idGrupo=" + consultaGrupoUsuario.getSelectedItem() + " AND ";
                }
                if (!consultaCategoriaUsuario.getSelectedItem().equals("")) {
                    tablasImplicadas = tablasImplicadas + " , categoria ";
                    condicionesConsulta = condicionesConsulta + " grupo.Categoria_idCategoria=categoria.idCategoria AND categoria.tipo='" + consultaCategoriaUsuario.getSelectedItem() + "' AND ";
                }
                if (!consultaTemporadaUsuario.getSelectedItem().equals("")) {
                    tablasImplicadas = tablasImplicadas + " , temporada ";
                    condicionesConsulta = condicionesConsulta + " grupo.Temporada_idTemporada=temporada.idTemporada and temporada.curso='" + consultaTemporadaUsuario.getSelectedItem() + "' AND ";
                }
            }
            if (!consultaEquipoUsuario.getSelectedItem().equals("")) {
                tablasImplicadas = tablasImplicadas + " , rango ";
                condicionesConsulta = condicionesConsulta + " rango.usuario_idusuario=u.idusuario AND rango.equipo_idequipo=" + consultaEquipoUsuario.getSelectedItem() + " AND ";
            }

            condicionesConsulta = condicionesConsulta.substring(0, condicionesConsulta.length() - 4);
            tablasImplicadas = tablasImplicadas + condicionesConsulta;
        }
        consulta_usuarios = consulta_usuarios + tablasImplicadas;

        return consulta_usuarios;
    }
private void boton_mostrar_UsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_mostrar_UsuariosActionPerformed
    try {
        ocultarMensajesError();
        String consulta_usuarios = leeConsultaUsuariosInterfaz();
        consultaUsuariosMostrados = consulta_usuarios;
        System.out.print("\nLA consulta " + consulta_usuarios);
        retset = GestorUsuarios.consultarUsuario(accesoBD, consulta_usuarios);
        //retset = accesoBD.ejecutaConsulta(consulta_alumnos);
        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null}
        },
                new String[]{
            "Nombre", "Primer Apellido", "Segundo Apellido", "DNI", "Clave", "Tipo Usuario", "Numero Cuenta", "Tel. Movil", "Tel. Fijo", "Email"
        }) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                true, true, true, true, true, false, true, true, true, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
        modelo_tabla = tablaUsuarios.getModel();
        int i = 0;
        while (retset.next()) {
            if (i < 25) {
                tablaUsuarios.setValueAt(retset.getString("u.nombre"), i, 0);
                tablaUsuarios.setValueAt(retset.getString("u.primerApellido"), i, 1);
                tablaUsuarios.setValueAt(retset.getString("u.segundoApellido"), i, 2);
                tablaUsuarios.setValueAt(retset.getString("u.dni"), i, 3);
                tablaUsuarios.setValueAt(retset.getString("u.clave"), i, 4);
                if (retset.getString("u.entrenador").equals("0")) {
                    tablaUsuarios.setValueAt("Administrador", i, 5);
                } else {
                    tablaUsuarios.setValueAt("Entrenador", i, 5);
                }

                tablaUsuarios.setValueAt(retset.getString("u.numerocuenta"), i, 6);
                tablaUsuarios.setValueAt(retset.getString("u.telmovil"), i, 7);
                tablaUsuarios.setValueAt(retset.getString("u.telfijo"), i, 8);
                tablaUsuarios.setValueAt(retset.getString("u.email"), i, 9);
            } else {
                javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaUsuarios.getModel();
                Object nuevo[] = {"", "", ""};
                temp.addRow(nuevo);
                tablaUsuarios.setValueAt(retset.getString("u.nombre"), i, 0);
                tablaUsuarios.setValueAt(retset.getString("u.primerApellido"), i, 1);
                tablaUsuarios.setValueAt(retset.getString("u.segundoApellido"), i, 2);
                tablaUsuarios.setValueAt(retset.getString("u.dni"), i, 3);
                tablaUsuarios.setValueAt(retset.getString("u.clave"), i, 4);
                if (retset.getString("u.entrenador").equals("0")) {
                    tablaUsuarios.setValueAt("Administrador", i, 5);
                } else {
                    tablaUsuarios.setValueAt("Entrenador", i, 5);
                }
                tablaUsuarios.setValueAt(retset.getString("u.numerocuenta"), i, 6);
                tablaUsuarios.setValueAt(retset.getString("u.telmovil"), i, 7);
                tablaUsuarios.setValueAt(retset.getString("u.telfijo"), i, 8);
                tablaUsuarios.setValueAt(retset.getString("u.email"), i, 9);
            }
            i++;
        }
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }

}//GEN-LAST:event_boton_mostrar_UsuariosActionPerformed

private void botonEliminarAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarAlumnoActionPerformed
    ocultarMensajesError();
    int selection = JOptionPane.showConfirmDialog(this, "Desea eliminar el alumno?", "Eliminar usuario", JOptionPane.YES_NO_OPTION);
    if (selection == JOptionPane.YES_OPTION) {

        if (tablaAlumnos.getSelectedRow() == -1) {
            mensajeErrorEliminarAlumno.setVisible(true);
        } else {
            int posTabla = tablaAlumnos.getSelectedRow();

            try {
                ResultSet alumnosMostrados = GestorAlumnos.consultarAlumno(accesoBD, consultaAlumnosMostrados);
                int i = 0;
                while (i <= posTabla) {
                    alumnosMostrados.next();
                    i++;
                }
                Date fechaNac = Date.valueOf((String) alumnosMostrados.getString("a.fechaNacimiento"));
                GestorAlumnos.eliminaAlumno(accesoBD,
                        alumnosMostrados.getString("a.nombre"), alumnosMostrados.getString("a.primerApellido"), alumnosMostrados.getString("a.segundoApellido"),
                        fechaNac, alumnosMostrados.getString("a.numerocuenta"), alumnosMostrados.getString("a.domicilio"),
                        alumnosMostrados.getString("a.localidad"), alumnosMostrados.getInt("a.codigoPostal"), alumnosMostrados.getString("a.provincia"),
                        alumnosMostrados.getString("a.colegio"), alumnosMostrados.getString("a.nombrePadre"), alumnosMostrados.getString("a.nombreMadre"),
                        alumnosMostrados.getInt("a.telFijo"), alumnosMostrados.getInt("a.telMovil"), alumnosMostrados.getString("a.email"),
                        alumnosMostrados.getString("a.observaciones"), alumnosMostrados.getString("a.talla"));
                botonMostrarAlumnosActionPerformed(null);
            } catch (SQLException ex) {
                System.out.print(ex.getMessage());
            }
        }
    }
}//GEN-LAST:event_botonEliminarAlumnoActionPerformed

private void botonEliminarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarUsuarioActionPerformed
    ocultarMensajesError();
    int selection = JOptionPane.showConfirmDialog(this, "Desea eliminar el usuario?", "Eliminar usuario", JOptionPane.YES_NO_OPTION);
    if (selection == JOptionPane.YES_OPTION) {

        if (tablaUsuarios.getSelectedRow() == -1) {
            errorEliminarUsuario.setVisible(true);
        } else {
            int posTabla = tablaUsuarios.getSelectedRow();

            try {
                ResultSet usuariosMostrados = GestorAlumnos.consultarAlumno(accesoBD, consultaUsuariosMostrados);
                int i = 0;
                while (i <= posTabla) {
                    usuariosMostrados.next();
                    i++;
                }

                GestorUsuarios.eliminaUsuario(accesoBD,
                        usuariosMostrados.getString("u.nombre"), usuariosMostrados.getString("u.primerApellido"), usuariosMostrados.getString("u.segundoApellido"),
                        usuariosMostrados.getString("u.dni"), usuariosMostrados.getString("u.clave"), usuariosMostrados.getBoolean("u.entrenador"),
                        usuariosMostrados.getInt("u.telMovil"), usuariosMostrados.getInt("u.telFijo"), usuariosMostrados.getString("u.email"),
                        usuariosMostrados.getString("u.numeroCuenta"));


                boton_mostrar_UsuariosActionPerformed(null);
            } catch (SQLException ex) {
                System.out.print(ex.getMessage());
            }
        }
    }
}//GEN-LAST:event_botonEliminarUsuarioActionPerformed

    private void menuTemporadasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuTemporadasMouseClicked
        ocultarPaneles();

        List<String> temps = new ArrayList<String>();

        try {
            temps = GestorTemporadas.getListaTemporadas(accesoBD);
        } catch (SQLException ex) {
            Logger.getLogger(NuevaTemporada.class.getName()).log(Level.SEVERE, null, ex);
        }
        actualizaComboBoxTemporadas(temps);

        panelTemporadas.setVisible(true);
    }//GEN-LAST:event_menuTemporadasMouseClicked

    private void botonNuevaTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevaTempActionPerformed
        new NuevaTemporada(this).setVisible(true);
    }//GEN-LAST:event_botonNuevaTempActionPerformed

    private void botonNuevoGrupEntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoGrupEntActionPerformed
        try {
            /*try {
             new NuevoGrupo(this).setVisible(true);
             } catch (SQLException ex) {
             Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
             }*/
            new NuevoGrupo(this).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_botonNuevoGrupEntActionPerformed

    private void menuEntrenamientosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuEntrenamientosMouseClicked
        ocultarPaneles();

        List<String> temps = new ArrayList<String>();

        try {
            /* Rellenar lista de temporadas */
            temps = GestorTemporadas.getListaTemporadas(accesoBD);
            actualizaComboTempEnt(temps);

            /* Rellenar lista de categorias */
            actualizaComboCatGrup();
        } catch (SQLException ex) {
            Logger.getLogger(NuevaTemporada.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Rellenar lista de entrenadores */
        List<String> ents = new ArrayList<String>();
        ents = getListaEntrenadores("");
        comboEntGrup.removeAllItems();
        comboEntGrup.addItem("-Ninguno-");
        actualizaComboEntGrup(ents);

        /* Rellenar tabla de grupos */
        try {
            actualizaTablaGrupos();
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        panelGrupos.setVisible(true);
    }//GEN-LAST:event_menuEntrenamientosMouseClicked

    private void menuInstalacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInstalacionesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuInstalacionesActionPerformed

    private void menuInstalacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuInstalacionesMouseClicked
        // TODO add your handling code here:
        ocultarPaneles();
        panelInstalaciones.setVisible(true);
        ActualizarTabla();
    }//GEN-LAST:event_menuInstalacionesMouseClicked

    private void botonModTemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModTemActionPerformed
        String cursoAnterior = (String) comboTempo.getSelectedItem();
        int correcto = 0;
        try {
            correcto = GestorTemporadas.modificarTemporada(accesoBD, cursoAnterior);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        JOptionPane.showMessageDialog(this, "Temporada modificada", "Exito", JOptionPane.NO_OPTION);

        List<String> temps = new ArrayList<String>();

        try {
            temps = GestorTemporadas.getListaTemporadas(accesoBD);
        } catch (SQLException ex) {
            Logger.getLogger(NuevaTemporada.class.getName()).log(Level.SEVERE, null, ex);
        }
        actualizaComboBoxTemporadas(temps);
    }//GEN-LAST:event_botonModTemActionPerformed

    public void ActualizarTabla() {

        tablaInstalacion.removeAll();
        try {
            String consulta_instalaciones = leeConsultaInstalacionInterfaz();
            consultaInstalacionesMostradas = consulta_instalaciones;
            System.out.print("\nLA consulta a " + consulta_instalaciones + "  y qui termina");
            retset = GestorInstalacion.consultaInstalacion(accesoBD, consulta_instalaciones);
            ocultarMensajesError();
            tablaInstalacion.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
                    new String[]{
                "Nombre", "Direccion", "Capacidad para Equipos"
            }));
            javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
            modelo_tabla = tablaInstalacion.getModel();
            int i = 0;

            while (retset.next()) {


                if (i < 25) {
                    tablaInstalacion.setValueAt(retset.getString("i.nombre"), i, 0);
                    tablaInstalacion.setValueAt(retset.getString("i.localizacion"), i, 1);
                    tablaInstalacion.setValueAt(retset.getString("i.capacidadEquipos"), i, 2);
                } else {
                    javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaInstalacion.getModel();
                    Object nuevo[] = {"", "", ""};
                    temp.addRow(nuevo);
                    tablaInstalacion.setValueAt(retset.getString("i.nombre"), i, 0);
                    tablaInstalacion.setValueAt(retset.getString("i.localizacion"), i, 1);
                    tablaInstalacion.setValueAt(retset.getString("i.capacidadEquipos"), i, 2);
                }
                i++;

            }

        } catch (SQLException ex) {
            System.out.print(ex.getMessage());
        }
    }

    protected String leeConsultaInstalacionInterfaz() {
        String consulta_instalaciones = "SELECT i.idInstalacion, i.nombre, i.capacidadEquipos, i.localizacion FROM ";
        String TablasImplicadas = " Instalacion i ";
        String condicionConsulta = " WHERE ";

        if (!nombreIns.getText().equals("") || MenuDireccionLabel.getSelectedItem() != "-" || !nombreCalleInst.getText().equals("")
                || !numeroInst.getText().equals("") || !capacidadInst.getText().equals("")) {
            if (!nombreIns.getText().equals("")) {
                condicionConsulta = condicionConsulta + " i.nombre= '" + nombreIns.getText() + "' AND ";
            }

            if (!capacidadInst.getText().equals("")) {
                condicionConsulta = condicionConsulta + " i.capacidadEquipos = '" + capacidadInst.getText() + "' AND ";
            }
            if (MenuDireccionLabel.getSelectedItem() != "-" || !nombreCalleInst.getText().equals("") || !numeroInst.getText().equals("")) {
                condicionConsulta = condicionConsulta + " i.localizacion= '" + MenuDireccionLabel.getSelectedItem() + " " + nombreCalleInst.getText()
                        + " " + numeroInst.getText() + "' AND ";
            }


            condicionConsulta = condicionConsulta.substring(0, condicionConsulta.length() - 4);
            TablasImplicadas = TablasImplicadas + condicionConsulta;
        }


        consulta_instalaciones = consulta_instalaciones + TablasImplicadas;

        return consulta_instalaciones;

    }
    private void introducirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_introducirButtonActionPerformed
        // TODO add your handling code here:
        new AltaInstalacion(accesoBD, this).setVisible(true);

    }//GEN-LAST:event_introducirButtonActionPerformed

    private void capacidadInstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capacidadInstActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_capacidadInstActionPerformed

    private void MenuDireccionLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuDireccionLabelActionPerformed
        // TODO add your handling code here
    }//GEN-LAST:event_MenuDireccionLabelActionPerformed

    private void modificarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarButtonActionPerformed
        // TODO add your handling code here:
        ResultSet retsetMostrados;

        int idInstalacion;

        int indiceTabla = tablaInstalacion.getSelectedRow();

        System.out.print("\n" + indiceTabla);

        if (indiceTabla >= 0) {

            String consulta_instalacion = "SELECT idInstalacion FROM Instalacion"
                    + " WHERE nombre = \"" + tablaInstalacion.getValueAt(indiceTabla, 0)
                    + "\" AND capacidadEquipos = \'" + Integer.parseInt(tablaInstalacion.getValueAt(indiceTabla, 2).toString())
                    + "\' AND localizacion = \"" + tablaInstalacion.getValueAt(indiceTabla, 1)
                    + "\"";

            System.out.println("\nConsulta idInstalacion " + consulta_instalacion);



            retsetMostrados = accesoBD.ejecutaConsulta(consulta_instalacion);
            try {
                if (retsetMostrados.next()) {
                    idInstalacion = retsetMostrados.getInt("idInstalacion");
                    new ModificarInstalacion(accesoBD, tablaInstalacion.getValueAt(indiceTabla, 0).toString(),
                            tablaInstalacion.getValueAt(indiceTabla, 2).toString(),
                            tablaInstalacion.getValueAt(indiceTabla, 1).toString(), idInstalacion, this).setVisible(true);
                }


            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }


            //System.out.println("\n idInstalacion " + idInstalacion);
            System.out.println("\n retsetMostrados " + retsetMostrados);
            /* new ModificarInstalacion(accesoBD, tablaInstalacion.getValueAt(indiceTabla, 0).toString(),
             tablaInstalacion.getValueAt(indiceTabla, 2).toString(), 
             tablaInstalacion.getValueAt(indiceTabla, 1).toString(), idInstalacion).setVisible(true);
             */
        } else if (indiceTabla == -1) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna instalacion", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_modificarButtonActionPerformed

    private void menuActividadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuActividadesMouseClicked
        // TODO add your handling code here:
        ocultarPaneles();
        panelActividades.setVisible(true);
        panelActividades.setLocation(500,250);
        mostrarActividades();
    }//GEN-LAST:event_menuActividadesMouseClicked

    private void botonElimTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonElimTempActionPerformed

        boolean correcto = false;
        String curso = (String) comboTempo.getSelectedItem();

        Temporada t = new Temporada(curso);
        correcto = GestorTemporadas.eliminarTemporada(accesoBD, t);

        if (!correcto) {
            JOptionPane.showMessageDialog(this, "No se ha eliminado la temporada", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Temporada " + t.getCurso() + " eliminada", "Exito", JOptionPane.INFORMATION_MESSAGE);
        }

        List<String> temps = new ArrayList<String>();

        try {
            temps = GestorTemporadas.getListaTemporadas(accesoBD);
        } catch (SQLException ex) {
            Logger.getLogger(NuevaTemporada.class.getName()).log(Level.SEVERE, null, ex);
        }
        actualizaComboBoxTemporadas(temps);

    }//GEN-LAST:event_botonElimTempActionPerformed

    private void tfGrupEntKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfGrupEntKeyTyped
        String sEnt = tfGrupEnt.getText();
        List<String> ents = new ArrayList<String>();

        ents = getListaEntrenadores(sEnt);
        comboEntGrup.removeAllItems();
        actualizaComboEntGrup(ents);

    }//GEN-LAST:event_tfGrupEntKeyTyped

    private void tfGrupEntMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfGrupEntMouseClicked
        tfGrupEnt.setText("");
        tfGrupEnt.requestFocus();
    }//GEN-LAST:event_tfGrupEntMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            actualizaTablaGruposFiltro(comboTempEntr.getSelectedItem().toString(),
                    comboCatGrup.getSelectedItem().toString(), comboEntGrup.getSelectedItem().toString());
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            actualizaTablaGrupos();
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void botonConsGrupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConsGrupoActionPerformed
        int filaSel = tablaGrupos.getSelectedRow();
        String idGrupo = (String) tablaGrupos.getValueAt(filaSel, 0);

        try {
            new ConsultarGrupo(this, idGrupo).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonConsGrupoActionPerformed

    private void textNombreEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNombreEquipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNombreEquipoActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        try {
            actualizaTablaEquiposFiltro(textNombreEquipo.getText(), comboTempEquipo.getSelectedItem().toString(), comboCatEquipo.getSelectedItem().toString(),
                    textEntEquipo.getText());
            labelEquiposMostrados.setVisible(true);
            labelNumeroEquipos.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_botonBuscarActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int idGrup = 0, idCat = 0, idEnt = 0, idInst = 0, idTemp = 0;
        int filaSelec = tablaGrupos.getSelectedRow();
        String cat = "", ent = "", inst = "", temp = "";

        idGrup = Integer.parseInt((String) tablaGrupos.getValueAt(filaSelec, 0));
        cat = (String) tablaGrupos.getValueAt(filaSelec, 2);
        ent = (String) tablaGrupos.getValueAt(filaSelec, 3);
        inst = (String) tablaGrupos.getValueAt(filaSelec, 4);


        try {
            idCat = GestorCategorias.getIdCategoria(accesoBD, cat);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            idEnt = GestorUsuarios.getIdEnt(accesoBD, ent);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            idInst = GestorInstalacion.getIdInstalacion(accesoBD, inst);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            idTemp = GestorGrupos.getIdTemporada(accesoBD, idGrup);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }


        try {
            temp = GestorTemporadas.getTemporada(accesoBD, idTemp);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        Grupo g = new Grupo(cat, ent, inst, temp);
        g.setIdGrupo(idGrup);
        g.setIdCat(idCat);
        g.setIdEnt(idEnt);
        g.setIdInst(idInst);
        g.setIdTemp(idTemp);

        boolean GrupoEliminado = false;

        try {
            GrupoEliminado = GestorGrupos.EliminarGrupos(accesoBD, g);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (GrupoEliminado) {
            JOptionPane.showMessageDialog(this, "Grupo Eliminado con exito", "Exito", JOptionPane.NO_OPTION);
        } else {
            JOptionPane.showMessageDialog(this, "No se ha podido borrar el grupo", "Error", JOptionPane.ERROR_MESSAGE);
        }


        try {
            actualizaTablaGrupos();
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void menuEquiposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuEquiposMouseClicked
        ocultarPaneles();
        panelEquipos.setVisible(true);

        try {
            actualizaComboCatEquipo();
            actualizaComboTempEquipo();
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuEquiposMouseClicked

    private int getIDTemporada() {

        int indiceTabla = actividadesTable.getSelectedRow();
        ResultSet rts;
        int idTemporada = 0;

        String actividad = "SELECT Temporada_idTemporada FROM actividades WHERE nombre = '"
                + actividadesTable.getValueAt(indiceTabla, 0) + "' AND fechaInicio = '"
                + actividadesTable.getValueAt(indiceTabla, 1) + "' AND fechaFin = '"
                + actividadesTable.getValueAt(indiceTabla, 2) + "'";



        rts = accesoBD.ejecutaConsulta(actividad);
        System.out.print("\n\n Busaca " + rts + "\n\n");
        try {
            if (rts.next()) {
                idTemporada = rts.getInt("Temporada_idTemporada");

            }
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return idTemporada;
    }

    private void eliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarButtonActionPerformed

        String error = "";

        int indiceTabla = tablaInstalacion.getSelectedRow();
        if (indiceTabla >= 0) {
            int selection = JOptionPane.showConfirmDialog(this, "Desea eliminar la Instalacion?", "Instalacion usuario", JOptionPane.YES_NO_OPTION);
            if (selection == JOptionPane.YES_OPTION) {
                if (Integer.parseInt(tablaInstalacion.getValueAt(indiceTabla, 2).toString()) <= 0) {
                    error = "Numero de capacidad menor o igual que cero";
                    eliminarButton.setBorder(bordeError);
                }
                GestorInstalacion.eliminaInstalacion(accesoBD, tablaInstalacion.getValueAt(indiceTabla, 0).toString(),
                        Integer.parseInt(tablaInstalacion.getValueAt(indiceTabla, 2).toString()),
                        tablaInstalacion.getValueAt(indiceTabla, 1).toString());

            }
        } else if (indiceTabla == -1) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna instalacion", "Error", JOptionPane.ERROR_MESSAGE);
        }
        ActualizarTabla();
    }//GEN-LAST:event_eliminarButtonActionPerformed

    private String leeConsultaActividad() {


        String consulta_actividades = "SELECT a.idActividades, a.nAlumnos, a.descripcion, a.precioSocio,"
                + " a.precioNoSocio, a.Temporada_idTemporada, a.fechaInicio, a.fechaFin, a.nombre FROM ";
        String TablasImplicadas = " actividades a";
        String condicionConsulta = " WHERE";

        //Date fechaInicio = (Date) fechaInicioDateChooser.getDate();
        //SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");


        if (!nombreTextField.getText().equals("") || !fechaInicioDateChooser.getDateFormatString().equals("dd-MMM-yyyy")
                || !fechaFinDateChooser.getDateFormatString().equals("dd-MMM-yyyy")) {
            if (!nombreTextField.getText().equals("")) {
                condicionConsulta = condicionConsulta + " a.nombre= '" + nombreTextField.getText() + "' AND ";
            }

            if (!fechaInicioDateChooser.getDateFormatString().equals("dd-MM-yyyy")) {
                condicionConsulta = condicionConsulta + " a.fechaInicio = " + fechaInicioDateChooser.getDateFormatString() + " AND ";
                System.out.print("\n\n fecha" + fechaInicioDateChooser.getDateFormatString());
            }
            if (!fechaFinDateChooser.getDateFormatString().equals("dd-MM-yyyy")) {
                condicionConsulta = condicionConsulta + " a.fechaFin = " + fechaFinDateChooser.getDateFormatString() + " AND  ";
            }


            condicionConsulta = condicionConsulta.substring(0, condicionConsulta.length() - 5);
            TablasImplicadas = TablasImplicadas + condicionConsulta;
        }


        consulta_actividades = consulta_actividades + TablasImplicadas;


        return consulta_actividades;


    }

    private void InsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertarActionPerformed
        // TODO add your handling code here:
        new AltaActividad(accesoBD, this).setVisible(true);
    }//GEN-LAST:event_InsertarActionPerformed

    private void ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarActionPerformed
        // TODO add your handling code here:
        ResultSet retsetMostrados;

        int idActividad, plazas;
        String decripcion = new String();

        int indiceTabla = actividadesTable.getSelectedRow();

        if (indiceTabla >= 0) {
            String consulta = "SELECT idActividades, descripcion, nAlumnos FROM actividades WHERE nombre = '"
                    + actividadesTable.getValueAt(indiceTabla, 0) + "' AND fechaInicio = '"
                    + actividadesTable.getValueAt(indiceTabla, 1) + "' AND fechaFin = '"
                    + actividadesTable.getValueAt(indiceTabla, 2) + "'";

            retsetMostrados = accesoBD.ejecutaConsulta(consulta);

            try {
                if (retsetMostrados.next()) {
                    idActividad = retsetMostrados.getInt("idActividades");
                    decripcion = retsetMostrados.getString("descripcion");
                    plazas = retsetMostrados.getInt("nAlumnos");

                    new ModificarActividad(accesoBD, actividadesTable.getValueAt(indiceTabla, 0).toString(),
                            actividadesTable.getValueAt(indiceTabla, 1).toString(),
                            actividadesTable.getValueAt(indiceTabla, 2).toString(), idActividad, decripcion, plazas, this).setVisible(true);
                }
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (indiceTabla == -1) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna actividad", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_ModificarActionPerformed

    private void InformacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InformacionActionPerformed
        // TODO add your handling code here:
        int nTabla = actividadesTable.getSelectedRow();
        try {
            new InformacionActividad(accesoBD, (String) actividadesTable.getValueAt(nTabla, 0),
                    actividadesTable.getValueAt(nTabla, 1).toString(), actividadesTable.getValueAt(nTabla, 2).toString()).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_InformacionActionPerformed

    private void AñaridAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñaridAlumnoActionPerformed
        // TODO add your handling code here:
        int idTemporada = 0;
        int idActividad = 0;

        idTemporada = getIDTemporada();
        idActividad = getIDActividad();
        new AñadirAlumno(accesoBD, idTemporada, idActividad).setVisible(true);
    }//GEN-LAST:event_AñaridAlumnoActionPerformed

    private void comboCatEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCatEquipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCatEquipoActionPerformed

    private void botonNuevoEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoEquipoActionPerformed
        try {
            new NuevoEquipo(accesoBD).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonNuevoEquipoActionPerformed

    private void menuPagosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuPagosMouseClicked
        ocultarPaneles();
        panelPagos.setVisible(true);
        ResultSet consulta;

        try {
            consulta = accesoBD.ejecutaConsulta("SELECT * FROM grupo");
            pago_grupo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
            while (consulta.next()) {
                pago_grupo.addItem(consulta.getInt(1));
            }
            consulta = accesoBD.ejecutaConsulta("SELECT * FROM temporada");
            pago_temporada.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
            while (consulta.next()) {
                pago_temporada.addItem(consulta.getString("curso"));
            }

        } catch (SQLException ex) {
            System.out.print(ex.getMessage());
        }
    }//GEN-LAST:event_menuPagosMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            actualizaTablaEquipos();
            labelEquiposMostrados.setVisible(true);
            labelNumeroEquipos.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void botonEliminarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarEquipoActionPerformed
    }//GEN-LAST:event_botonEliminarEquipoActionPerformed

    private void botonNuevaCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevaCatActionPerformed
        new NuevaCategoria(this).setVisible(true);
    }//GEN-LAST:event_botonNuevaCatActionPerformed

    private void botonModCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModCatActionPerformed
        String tipoCat = (String) tablaCategorias.getValueAt(tablaCategorias.getSelectedRow(), 0);
        String descCat = (String) tablaCategorias.getValueAt(tablaCategorias.getSelectedRow(), 1);


        new ModificarCategoria(this, tipoCat, descCat).setVisible(true);
    }//GEN-LAST:event_botonModCatActionPerformed

    private void botonElimCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonElimCatActionPerformed
        String tipoCat = (String) tablaCategorias.getValueAt(tablaCategorias.getSelectedRow(), 0);
        String descCat = (String) tablaCategorias.getValueAt(tablaCategorias.getSelectedRow(), 1);

        Categoria c = new Categoria(tipoCat, descCat);
        int continuar = JOptionPane.showConfirmDialog(this, "¿Desea eliminar la temporada?", "Confirmar", JOptionPane.YES_NO_CANCEL_OPTION);
        if (continuar == JOptionPane.YES_OPTION) {
            GestorCategorias.EliminarCategorias(accesoBD, c);
        }
        try {
            actualizaTablaCategorias();
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonElimCatActionPerformed

    private void menuCategoriasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuCategoriasMouseClicked
        ocultarPaneles();
        try {
            actualizaTablaCategorias();
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        panelCategorias.setVisible(true);
        try {
            actualizaTablaCategorias();
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuCategoriasMouseClicked

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        // TODO add your handling code here:
        int nTabla = actividadesTable.getSelectedRow();
        ResultSet retset;
        float precioS = 50;
        float precioNS = 70;
        String descripcion = "";
        int temporada = 0;
        int plazas = 0;

        if(nTabla >= 0){
           int idActividad = getIDActividad();
            SimpleDateFormat formato = new java.text.SimpleDateFormat("yyyy-MM-dd");
            java.sql.Date fechaInicio = null;
            java.sql.Date fechafin = null;
            try {
                fechaInicio = new java.sql.Date(formato.parse(actividadesTable.getValueAt(nTabla, 1).toString()).getTime());
                System.out.print(fechaInicio);
            } catch (ParseException ex) {
            }
            try {
                fechafin = new java.sql.Date(formato.parse(actividadesTable.getValueAt(nTabla, 2).toString()).getTime());
            } catch (ParseException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }


            String consulta = "SELECT Temporada_idTemporada, nAlumnos, descripcion FROM actividades where idActividades = "
                    + idActividad;

            /*nombre = ' "
            + actividadesTable.getValueAt(nTabla, 0) + "' AND fechaInicio ='" + actividadesTable.getValueAt(nTabla, 1)
            + "' AND fechaFin = '" + actividadesTable.getValueAt(nTabla, 2) + "'"*/

            System.out.print("\n\n" + consulta);
            System.out.print("\n\n" + actividadesTable.getValueAt(nTabla, 1));
            System.out.print("\n\n" + actividadesTable.getValueAt(nTabla, 2));
            retset = accesoBD.ejecutaConsulta(consulta);
            int selection = JOptionPane.showConfirmDialog(this, "Desea eliminar la Instalacion?", "Instalacion usuario", JOptionPane.YES_NO_OPTION);
            if (selection == JOptionPane.YES_OPTION) {
                try {
                    if (retset.next()) {
                        temporada = retset.getInt(1);
                        plazas = retset.getInt(2);
                        descripcion = retset.getString(3);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }   

                GestorActividad.eliminaActividad(accesoBD, descripcion, plazas, precioS, precioNS, temporada, fechaInicio, fechafin, (String) actividadesTable.getValueAt(nTabla, 0));

             }
        }else if (nTabla == -1) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna instalacion", "Error", JOptionPane.ERROR_MESSAGE);
        }
        mostrarActividades();
    }//GEN-LAST:event_EliminarActionPerformed

private void pago_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pago_nombreActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_pago_nombreActionPerformed
    private String leeConsultaPagosInterfaz() {

        String consulta_pagos = "SELECT a.nombre, a.primerApellido, a.segundoApellido, a.telMovil, a.telFijo,"
                + " a.email, cuota.idCuota ";
        String tablasImplicadas = " FROM alumno a, cuota  ";
        String condicionesConsulta = " WHERE ";

        if (pago_temporadaActividad.getSelectedItem().equals("Temporada")) {
            //consulta por temporada y grupo
            consulta_pagos += " , temp.importeMensual, cuota.fecha, cuota.pagado, temp.curso ";
            tablasImplicadas += " , alumnotemporada altemp, pagotemporada pagotemp , temporada temp  ";
            condicionesConsulta = condicionesConsulta + " altemp.Alumno_idAlumno=a.idAlumno AND "
                    + "pagotemp.AlumnoTemporada_Alumno_idAlumno=altemp.Alumno_idAlumno AND pagotemp.AlumnoTemporada_Temporada_idTemporada=altemp.Temporada_idTemporada AND"
                    + " pagotemp.cuota_idCuota=cuota.idCuota AND temp.idTemporada=altemp.Temporada_idTemporada AND ";
            if (!pago_temporada.getSelectedItem().equals("")) {
                condicionesConsulta = condicionesConsulta + " temp.curso='" + (String) pago_temporada.getSelectedItem() + "' AND ";
            }
            if (!pago_nombre.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.nombre LIKE'%" + pago_nombre.getText() + "%' AND ";
            }
            if (!pago_primer_apellido.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.primerApellido LIKE'%" + pago_primer_apellido.getText() + "%' AND ";
            }
            if (!pago_segundo_apellido.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.segundoApellido LIKE'%" + pago_segundo_apellido.getText() + "%' AND ";
            }
            if (!pago_grupo.getSelectedItem().equals("")) {
                tablasImplicadas = tablasImplicadas + " , alumnogrupo, grupo ";
                condicionesConsulta = condicionesConsulta + " alumnogrupo.alumno_idalumno=a.idalumno AND alumnogrupo.grupo_idGrupo=grupo.idGrupo AND grupo.idGrupo=" + (Integer) pago_grupo.getSelectedItem() + " AND ";
            }
            condicionesConsulta = condicionesConsulta.substring(0, condicionesConsulta.length() - 4);
            tablasImplicadas = tablasImplicadas + condicionesConsulta;
        } else {
            //Aqui consultamos los pagos de las actividades
            consulta_pagos += " , act.precioSocio, act.precioNoSocio, cuota.fecha, cuota.pagado, temp.idTemporada, a.idAlumno, temp.curso, act.nombre ";
            tablasImplicadas += " , pagoactividades pagoact , temporada temp, actividades act ";
            condicionesConsulta = condicionesConsulta + " pagoact.actividades_idActividades=act.idActividades AND pagoact.alumno_idAlumno=a.idAlumno AND"
                    + " cuota.idCuota=pagoact.cuota_idCuota AND temp.idTemporada=act.temporada_idTemporada AND ";
            if (!pago_temporada.getSelectedItem().equals("")) {
                condicionesConsulta = condicionesConsulta + " temp.curso='" + (String) pago_temporada.getSelectedItem() + "' AND ";
            }
            if (!pago_nombre.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.nombre LIKE'%" + pago_nombre.getText() + "%' AND ";
            }
            if (!pago_primer_apellido.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.primerApellido LIKE'%" + pago_primer_apellido.getText() + "%' AND ";
            }
            if (!pago_segundo_apellido.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.segundoApellido LIKE'%" + pago_segundo_apellido.getText() + "%' AND ";
            }
            if (!pagos_actividad.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " act.nombre LIKE'%" + pagos_actividad.getText() + "%' AND ";
            }
            condicionesConsulta = condicionesConsulta.substring(0, condicionesConsulta.length() - 4);
            tablasImplicadas = tablasImplicadas + condicionesConsulta;

        }
        consulta_pagos = consulta_pagos + tablasImplicadas;

        return consulta_pagos;
    }

private void pagos_botonMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagos_botonMostrarActionPerformed
    try {
        String consulta_pagos = leeConsultaPagosInterfaz();
        consultaPagosMostrados = consulta_pagos;
        System.out.print("\nLA consulta a " + consulta_pagos + "; ");
        retset = GestorPagos.consultarPago(accesoBD, consulta_pagos);
        if (consulta_pagos.indexOf("alumnotemporada") != -1) {
            tablaPagos.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
                    new String[]{
                "Nombre", "Primer Apellido", "Segundo Apellido", "Importe", "Fecha", "Pagado/Debido", "Email", "Tel. Fijo", "Tel. Movil", "Temporada"
            }));
            javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
            modelo_tabla = tablaPagos.getModel();
        } else {
            tablaPagos.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
                    new String[]{
                "Nombre", "Primer Apellido", "Segundo Apellido", "Importe", "Fecha", "Pagado/Debido", "Email", "Tel. Fijo", "Tel. Movil", "Temporada", "Actividad"
            }));
            javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
            modelo_tabla = tablaPagos.getModel();
        }
        int i = 0;
        while (retset.next()) {
            if (i < 20) {
                tablaPagos.setValueAt(retset.getString("a.nombre"), i, 0);
                tablaPagos.setValueAt(retset.getString("a.primerApellido"), i, 1);
                tablaPagos.setValueAt(retset.getString("a.segundoApellido"), i, 2);
                if (consulta_pagos.indexOf("alumnotemporada") != -1) {
                    tablaPagos.setValueAt(retset.getFloat("temp.importeMensual"), i, 3);
                } else {
                    if (GestorPagos.compruebaSiAlumnoEraSocioEnEsaTemporada(accesoBD, retset.getInt("a.idAlumno"), retset.getInt("temp.idTemporada")) == true) {
                        tablaPagos.setValueAt(retset.getFloat("act.precioSocio"), i, 3);
                    } else {
                        tablaPagos.setValueAt(retset.getFloat("act.precioNoSocio"), i, 3);
                    }
                }
                tablaPagos.setValueAt(retset.getString("cuota.fecha"), i, 4);
                if (retset.getBoolean("cuota.pagado") == true) {
                    tablaPagos.setValueAt("Pagado", i, 5);
                } else {
                    tablaPagos.setValueAt("Debido", i, 5);
                }
                tablaPagos.setValueAt(retset.getString("a.email"), i, 6);
                tablaPagos.setValueAt(retset.getString("a.telfijo"), i, 7);
                tablaPagos.setValueAt(retset.getString("a.telmovil"), i, 8);
                tablaPagos.setValueAt(retset.getString("temp.curso"), i, 9);
                if (consulta_pagos.indexOf("alumnotemporada") == -1) {
                    tablaPagos.setValueAt(retset.getString("act.nombre"), i, 10);
                }
            } else {
                javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaPagos.getModel();
                Object nuevo[] = {"", "", ""};
                temp.addRow(nuevo);
                tablaPagos.setValueAt(retset.getString("a.nombre"), i, 0);
                tablaPagos.setValueAt(retset.getString("a.primerApellido"), i, 1);
                tablaPagos.setValueAt(retset.getString("a.segundoApellido"), i, 2);
                if (consulta_pagos.indexOf("alumnotemporada") != -1) {
                    tablaPagos.setValueAt(retset.getFloat("temp.importeMensual"), i, 3);
                } else {
                    if (GestorPagos.compruebaSiAlumnoEraSocioEnEsaTemporada(accesoBD, retset.getInt("a.idAlumno"), retset.getInt("temp.idTemporada")) == true) {
                        tablaPagos.setValueAt(retset.getFloat("act.precioSocio"), i, 3);
                    } else {
                        tablaPagos.setValueAt(retset.getFloat("act.precioNoSocio"), i, 3);
                    }
                }
                tablaPagos.setValueAt(retset.getString("cuota.fecha"), i, 4);
                if (retset.getBoolean("cuota.pagado") == true) {
                    tablaPagos.setValueAt("Pagado", i, 5);
                } else {
                    tablaPagos.setValueAt("Debido", i, 5);
                }
                tablaPagos.setValueAt(retset.getString("a.email"), i, 6);
                tablaPagos.setValueAt(retset.getString("a.telfijo"), i, 7);
                tablaPagos.setValueAt(retset.getString("a.telmovil"), i, 8);
                tablaPagos.setValueAt(retset.getString("temp.curso"), i, 9);
                if (consulta_pagos.indexOf("alumnotemporada") == -1) {
                    tablaPagos.setValueAt(retset.getString("act.nombre"), i, 10);
                }
            }
            i++;
        }
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }

}//GEN-LAST:event_pagos_botonMostrarActionPerformed
    private String leeConsultaPagosDeDeudoresInterfaz() {

        String consulta_pagos = "SELECT a.nombre, a.primerApellido, a.segundoApellido, a.telMovil, a.telFijo,"
                + " a.email , cuota.idcuota";
        String tablasImplicadas = " FROM alumno a, cuota  ";
        String condicionesConsulta = " WHERE ";

        if (pago_temporadaActividad.getSelectedItem().equals("Temporada")) {
            //consulta por temporada y grupo
            consulta_pagos += " , temp.importeMensual, cuota.fecha, cuota.pagado, temp.curso ";
            tablasImplicadas += " , alumnotemporada altemp, pagotemporada pagotemp , temporada temp  ";
            condicionesConsulta = condicionesConsulta + " altemp.Alumno_idAlumno=a.idAlumno AND "
                    + "pagotemp.AlumnoTemporada_Alumno_idAlumno=altemp.Alumno_idAlumno AND pagotemp.AlumnoTemporada_Temporada_idTemporada=altemp.Temporada_idTemporada AND"
                    + " pagotemp.cuota_idCuota=cuota.idCuota AND temp.idTemporada=altemp.Temporada_idTemporada AND cuota.pagado=false AND ";
            if (!pago_temporada.getSelectedItem().equals("")) {
                condicionesConsulta = condicionesConsulta + " temp.curso='" + (String) pago_temporada.getSelectedItem() + "' AND ";
            }
            if (!pago_nombre.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.nombre LIKE'%" + pago_nombre.getText() + "%' AND ";
            }
            if (!pago_primer_apellido.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.primerApellido LIKE'%" + pago_primer_apellido.getText() + "%' AND ";
            }
            if (!pago_segundo_apellido.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.segundoApellido LIKE'%" + pago_segundo_apellido.getText() + "%' AND ";
            }
            if (!pago_grupo.getSelectedItem().equals("")) {
                tablasImplicadas = tablasImplicadas + " , alumnogrupo, grupo ";
                condicionesConsulta = condicionesConsulta + " alumnogrupo.alumno_idalumno=a.idalumno AND alumnogrupo.grupo_idGrupo=grupo.idGrupo AND grupo.idGrupo=" + (Integer) pago_grupo.getSelectedItem() + " AND ";
            }
            condicionesConsulta = condicionesConsulta.substring(0, condicionesConsulta.length() - 4);
            tablasImplicadas = tablasImplicadas + condicionesConsulta;
        } else {
            //Aqui consultamos los pagos de las actividades
            consulta_pagos += " , act.precioSocio, act.precioNoSocio, cuota.fecha, cuota.pagado, temp.idTemporada, a.idAlumno, temp.curso, act.nombre ";
            tablasImplicadas += " , pagoactividades pagoact , temporada temp, actividades act ";
            condicionesConsulta = condicionesConsulta + " pagoact.actividades_idActividades=act.idActividades AND pagoact.alumno_idAlumno=a.idAlumno AND"
                    + " cuota.idCuota=pagoact.cuota_idCuota AND temp.idTemporada=act.temporada_idTemporada AND cuota.pagado=false AND ";
            if (!pago_temporada.getSelectedItem().equals("")) {
                condicionesConsulta = condicionesConsulta + " temp.curso='" + (String) pago_temporada.getSelectedItem() + "' AND ";
            }
            if (!pago_nombre.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.nombre LIKE'%" + pago_nombre.getText() + "%' AND ";
            }
            if (!pago_primer_apellido.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.primerApellido LIKE'%" + pago_primer_apellido.getText() + "%' AND ";
            }
            if (!pago_segundo_apellido.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " a.segundoApellido LIKE'%" + pago_segundo_apellido.getText() + "%' AND ";
            }
            if (!pagos_actividad.getText().equals("")) {
                condicionesConsulta = condicionesConsulta + " act.nombre LIKE'%" + pagos_actividad.getText() + "%' AND ";
            }
            condicionesConsulta = condicionesConsulta.substring(0, condicionesConsulta.length() - 4);
            tablasImplicadas = tablasImplicadas + condicionesConsulta;

        }
        consulta_pagos = consulta_pagos + tablasImplicadas;

        return consulta_pagos;
    }
private void pagos_botonDeudoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagos_botonDeudoresActionPerformed
    try {
        String consulta_pagos = leeConsultaPagosDeDeudoresInterfaz();
        consultaPagosMostrados = consulta_pagos;
        System.out.print("\nLA consulta a " + consulta_pagos + "; ");
        retset = GestorPagos.consultarPago(accesoBD, consulta_pagos);
        if (consulta_pagos.indexOf("alumnotemporada") != -1) {
            tablaPagos.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
                    new String[]{
                "Nombre", "Primer Apellido", "Segundo Apellido", "Importe", "Fecha", "Pagado/Debido", "Email", "Tel. Fijo", "Tel. Movil", "Temporada"
            }));
            javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
            modelo_tabla = tablaPagos.getModel();
        } else {
            tablaPagos.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
                    new String[]{
                "Nombre", "Primer Apellido", "Segundo Apellido", "Importe", "Fecha", "Pagado/Debido", "Email", "Tel. Fijo", "Tel. Movil", "Temporada", "Actividad"
            }));
            javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
            modelo_tabla = tablaPagos.getModel();
        }
        int i = 0;
        while (retset.next()) {
            if (i < 20) {
                tablaPagos.setValueAt(retset.getString("a.nombre"), i, 0);
                tablaPagos.setValueAt(retset.getString("a.primerApellido"), i, 1);
                tablaPagos.setValueAt(retset.getString("a.segundoApellido"), i, 2);
                if (consulta_pagos.indexOf("alumnotemporada") != -1) {
                    tablaPagos.setValueAt(retset.getFloat("temp.importeMensual"), i, 3);
                } else {
                    if (GestorPagos.compruebaSiAlumnoEraSocioEnEsaTemporada(accesoBD, retset.getInt("a.idAlumno"), retset.getInt("temp.idTemporada")) == true) {
                        tablaPagos.setValueAt(retset.getFloat("act.precioSocio"), i, 3);
                    } else {
                        tablaPagos.setValueAt(retset.getFloat("act.precioNoSocio"), i, 3);
                    }
                }
                tablaPagos.setValueAt(retset.getString("cuota.fecha"), i, 4);
                if (retset.getBoolean("cuota.pagado") == true) {
                    tablaPagos.setValueAt("Pagado", i, 5);
                } else {
                    tablaPagos.setValueAt("Debido", i, 5);
                }
                tablaPagos.setValueAt(retset.getString("a.email"), i, 6);
                tablaPagos.setValueAt(retset.getString("a.telfijo"), i, 7);
                tablaPagos.setValueAt(retset.getString("a.telmovil"), i, 8);
                tablaPagos.setValueAt(retset.getString("temp.curso"), i, 9);
                if (consulta_pagos.indexOf("alumnotemporada") == -1) {
                    tablaPagos.setValueAt(retset.getString("act.nombre"), i, 10);
                }
            } else {
                javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaPagos.getModel();
                Object nuevo[] = {"", "", ""};
                temp.addRow(nuevo);
                tablaPagos.setValueAt(retset.getString("a.nombre"), i, 0);
                tablaPagos.setValueAt(retset.getString("a.primerApellido"), i, 1);
                tablaPagos.setValueAt(retset.getString("a.segundoApellido"), i, 2);
                if (consulta_pagos.indexOf("alumnotemporada") != -1) {
                    tablaPagos.setValueAt(retset.getFloat("temp.importeMensual"), i, 3);
                } else {
                    if (GestorPagos.compruebaSiAlumnoEraSocioEnEsaTemporada(accesoBD, retset.getInt("a.idAlumno"), retset.getInt("temp.idTemporada")) == true) {
                        tablaPagos.setValueAt(retset.getFloat("act.precioSocio"), i, 3);
                    } else {
                        tablaPagos.setValueAt(retset.getFloat("act.precioNoSocio"), i, 3);
                    }
                }
                tablaPagos.setValueAt(retset.getString("cuota.fecha"), i, 4);
                if (retset.getBoolean("cuota.pagado") == true) {
                    tablaPagos.setValueAt("Pagado", i, 5);
                } else {
                    tablaPagos.setValueAt("Debido", i, 5);
                }
                tablaPagos.setValueAt(retset.getString("a.email"), i, 6);
                tablaPagos.setValueAt(retset.getString("a.telfijo"), i, 7);
                tablaPagos.setValueAt(retset.getString("a.telmovil"), i, 8);
                tablaPagos.setValueAt(retset.getString("temp.curso"), i, 9);
                if (consulta_pagos.indexOf("alumnotemporada") == -1) {
                    tablaPagos.setValueAt(retset.getString("act.nombre"), i, 10);
                }
            }
            i++;
        }
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }

}//GEN-LAST:event_pagos_botonDeudoresActionPerformed

private void pagos_botonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagos_botonModificarActionPerformed
    if (tablaPagos.getSelectedRow() == -1) {
        JOptionPane.showMessageDialog(null,
                "No ha seleccionado ningún pago", "Error",
                JOptionPane.ERROR_MESSAGE);
    } else {
        int posTabla = tablaPagos.getSelectedRow();

        try {
            ResultSet pagosMostrados = GestorPagos.consultarPago(accesoBD, consultaPagosMostrados);
            int i = 0;
            while (i <= posTabla) {
                pagosMostrados.next();
                i++;
            }
            int idcuota = pagosMostrados.getInt("cuota.idCuota");
            System.out.print("\n Hemos cogido el idCuota que vale " + idcuota);

            if (consultaPagosMostrados.indexOf("alumnotemporada") != -1) {
                new ModificarPago(accesoBD, idcuota, pagosMostrados.getString("a.nombre"), pagosMostrados.getString("a.primerApellido"),
                        pagosMostrados.getString("a.segundoApellido"), pagosMostrados.getString("temp.curso"), pagosMostrados.getString("cuota.fecha"),
                        pagosMostrados.getBoolean("cuota.pagado")).setVisible(true);
                if (consultaPagosMostrados.indexOf("pagado=false") != -1) {
                    System.out.print("\nESTAMOS EN 1");
                    pagos_botonDeudoresActionPerformed(null);
                } else {
                    System.out.print("\nESTAMOS EN 2");
                    pagos_botonMostrarActionPerformed(null);
                }
            } else {
                new ModificarPago(accesoBD, idcuota, pagosMostrados.getString("a.nombre"), pagosMostrados.getString("a.primerApellido"),
                        pagosMostrados.getString("a.segundoApellido"), pagosMostrados.getString("temp.curso"), pagosMostrados.getString("cuota.fecha"),
                        pagosMostrados.getBoolean("cuota.pagado"), pagosMostrados.getString("act.nombre")).setVisible(true);
                if (consultaPagosMostrados.indexOf("pagado=false") != -1) {
                    System.out.print("\nESTAMOS EN 3");
                    pagos_botonDeudoresActionPerformed(null);
                } else {
                    System.out.print("\nESTAMOS EN 4");
                    pagos_botonMostrarActionPerformed(null);
                }
            }
        } catch (SQLException ex) {
            System.out.print(ex.getMessage());
        }
    }


}//GEN-LAST:event_pagos_botonModificarActionPerformed

private void menuPagosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPagosActionPerformed
    panelPagos.setVisible(true);
    ResultSet consulta;

    try {
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM grupo");
        pago_grupo = new javax.swing.JComboBox();
        pago_grupo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            pago_grupo.addItem(consulta.getInt(1));
        }
        consulta = accesoBD.ejecutaConsulta("SELECT * FROM temporada");
        pago_temporada.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        while (consulta.next()) {
            pago_temporada.addItem(consulta.getString("curso"));
        }

    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }
}//GEN-LAST:event_menuPagosActionPerformed

private void pago_temporadaActividadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pago_temporadaActividadActionPerformed
    if (pago_temporadaActividad.getSelectedItem().equals("Temporada")) {
        pagos_etiqActividad.setVisible(false);
        pagos_actividad.setVisible(false);
        pagos_etiqGrupo.setVisible(true);
        pago_grupo.setVisible(true);
    } else {
        pagos_etiqActividad.setVisible(true);
        pagos_actividad.setVisible(true);
        pagos_etiqGrupo.setVisible(false);
        pago_grupo.setVisible(false);
    }
}//GEN-LAST:event_pago_temporadaActividadActionPerformed

private void pago_grupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pago_grupoActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_pago_grupoActionPerformed

private void pago_temporadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pago_temporadaActionPerformed

    ResultSet consulta;
    try {
        if (!pago_temporada.getSelectedItem().equals("")) {
            consulta = accesoBD.ejecutaConsulta("SELECT * FROM grupo, temporada WHERE grupo.Temporada_idTemporada=temporada.idTemporada AND temporada.curso='" + (String) pago_temporada.getSelectedItem() + "'");
            pago_grupo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
            while (consulta.next()) {
                System.out.println("\nconsulta.next()" + consulta.getInt(1));
                pago_grupo.addItem(consulta.getInt(1));
            }
        } else {
            consulta = accesoBD.ejecutaConsulta("SELECT * FROM grupo");
            pago_grupo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
            while (consulta.next()) {
                pago_grupo.addItem(consulta.getInt(1));
            }
        }
    } catch (SQLException ex) {
        System.out.print(ex.getMessage());
    }


}//GEN-LAST:event_pago_temporadaActionPerformed

private void pagos_actividadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagos_actividadActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_pagos_actividadActionPerformed

    private void menuPartidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuPartidosMouseClicked
        // TODO add your handling code here:
        ocultarPaneles();
        noEntry = true;
        try{
            actualizaComboTemporadaPartidos();
            actualizaComboCategoriaPartidos();
            actualizaComboEquipoPartidos(1);
            actualizaComboEquipoPartidos(2);
        } catch(SQLException e){
            Logger.getLogger(NuevaTemporada.class.getName()).log(Level.SEVERE, null, e);
        }
        PanelPartidos.setVisible(true);
    }//GEN-LAST:event_menuPartidosMouseClicked

    private void nombreInsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreInsKeyTyped
        // TODO add your handling code here:
        String nombre = nombreIns.getText();
        String consulta = "SELECT nombre, capacidadEquipos, localizacion FROM"
                + " Instalacion WHERE nombre LIKE '%" + nombre + "%'";
        ResultSet ret;

        ret = accesoBD.ejecutaConsulta(consulta);

        tablaInstalacion.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
                new String[]{
            "Nombre", "Direccion", "Capacidad para Equipos"
        }));
        javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
        modelo_tabla = tablaInstalacion.getModel();
        int i = 0;
        try {
            while (ret.next()) {


                if (i < 25) {
                    tablaInstalacion.setValueAt(ret.getString("nombre"), i, 0);
                    tablaInstalacion.setValueAt(ret.getString("localizacion"), i, 1);
                    tablaInstalacion.setValueAt(ret.getString("capacidadEquipos"), i, 2);
                } else {
                    javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaInstalacion.getModel();
                    Object nuevo[] = {"", "", ""};
                    temp.addRow(nuevo);
                    tablaInstalacion.setValueAt(ret.getString("nombre"), i, 0);
                    tablaInstalacion.setValueAt(ret.getString("localizacion"), i, 1);
                    tablaInstalacion.setValueAt(ret.getString("capacidadEquipos"), i, 2);
                }
                i++;

            }
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_nombreInsKeyTyped

    private void nombreCalleInstKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreCalleInstKeyTyped
        // TODO add your handling code here:
        String nombre = MenuDireccionLabel.getSelectedItem().toString() + " " + nombreCalleInst.getText();
        if (MenuDireccionLabel.getSelectedItem().toString().equals("-") && nombreCalleInst.getText().equals("")) {
            nombre = "";
        } else if (MenuDireccionLabel.getSelectedItem().toString().equals("-") && !nombreCalleInst.getText().equals("")) {
            nombre = nombreCalleInst.getText();
        }
        String consulta = "SELECT nombre, capacidadEquipos, localizacion FROM"
                + " Instalacion WHERE localizacion LIKE '%" + nombre + "%'";
        ResultSet ret;

        ret = accesoBD.ejecutaConsulta(consulta);

        tablaInstalacion.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
                new String[]{
            "Nombre", "Direccion", "Capacidad para Equipos"
        }));
        javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
        modelo_tabla = tablaInstalacion.getModel();
        int i = 0;
        try {
            while (ret.next()) {


                if (i < 25) {
                    tablaInstalacion.setValueAt(ret.getString("nombre"), i, 0);
                    tablaInstalacion.setValueAt(ret.getString("localizacion"), i, 1);
                    tablaInstalacion.setValueAt(ret.getString("capacidadEquipos"), i, 2);
                } else {
                    javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaInstalacion.getModel();
                    Object nuevo[] = {"", "", ""};
                    temp.addRow(nuevo);
                    tablaInstalacion.setValueAt(ret.getString("nombre"), i, 0);
                    tablaInstalacion.setValueAt(ret.getString("localizacion"), i, 1);
                    tablaInstalacion.setValueAt(ret.getString("capacidadEquipos"), i, 2);
                }
                i++;

            }
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_nombreCalleInstKeyTyped

    private void capacidadInstKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_capacidadInstKeyTyped
        // TODO add your handling code here:
        String nombre = capacidadInst.getText();
        String consulta = "SELECT nombre, capacidadEquipos, localizacion FROM"
                + " Instalacion WHERE capacidadEquipos LIKE '%" + nombre + "%'";
        ResultSet ret;

        System.out.print("Consulta capacidad: " + consulta);

        ret = accesoBD.ejecutaConsulta(consulta);

        tablaInstalacion.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
                new String[]{
            "Nombre", "Direccion", "Capacidad para Equipos"
        }));
        javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
        modelo_tabla = tablaInstalacion.getModel();
        int i = 0;
        try {
            while (ret.next()) {


                if (i < 25) {
                    tablaInstalacion.setValueAt(ret.getString("nombre"), i, 0);
                    tablaInstalacion.setValueAt(ret.getString("localizacion"), i, 1);
                    tablaInstalacion.setValueAt(ret.getString("capacidadEquipos"), i, 2);
                } else {
                    javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaInstalacion.getModel();
                    Object nuevo[] = {"", "", ""};
                    temp.addRow(nuevo);
                    tablaInstalacion.setValueAt(ret.getString("nombre"), i, 0);
                    tablaInstalacion.setValueAt(ret.getString("localizacion"), i, 1);
                    tablaInstalacion.setValueAt(ret.getString("capacidadEquipos"), i, 2);
                }
                i++;

            }
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_capacidadInstKeyTyped

    private void nombreTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTextFieldKeyTyped
        // TODO add your handling code here:
        String nombre = nombreTextField.getText();
        String consulta = "SELECT nombre, fechaInicio, fechaFin FROM actividades"
                + " WHERE nombre LIKE '%" + nombre + "%'";
        ResultSet retset;

        retset = accesoBD.ejecutaConsulta(consulta);

        actividadesTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null}
        },
                new String[]{
            "Nombre", "Fecha Inicio", "Fecha Fin"
        }));
        javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
        modelo_tabla = actividadesTable.getModel();
        int i = 0;
        try {
            while (retset.next()) {

                if (i < 25) {
                    actividadesTable.setValueAt(retset.getString("nombre"), i, 0);
                    actividadesTable.setValueAt(retset.getString("fechaInicio"), i, 1);
                    actividadesTable.setValueAt(retset.getString("fechaFin"), i, 2);
                } else {
                    javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaInstalacion.getModel();
                    Object nuevo[] = {"", "", ""};
                    temp.addRow(nuevo);
                    actividadesTable.setValueAt(retset.getString("nombre"), i, 0);
                    actividadesTable.setValueAt(retset.getString("fechaInicio"), i, 1);
                    actividadesTable.setValueAt(retset.getString("fechaFin"), i, 2);
                }
                i++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nombreTextFieldKeyTyped

    private void fechaInicioDateChooserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaInicioDateChooserKeyTyped
        // TODO add your handling code here:
        Date nombre = (java.sql.Date) fechaInicioDateChooser.getDate();
        String consulta = "SELECT nombre, fechaInicio, fechaFin FROM actividades"
                + " WHERE fechaInicio LIKE '%" + nombre + "%'";
        ResultSet retset;

        System.out.println("Consulta Fecha " + consulta);

        retset = accesoBD.ejecutaConsulta(consulta);

        actividadesTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null}
        },
                new String[]{
            "Nombre", "Fecha Inicio", "Fecha Fin"
        }));
        javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
        modelo_tabla = actividadesTable.getModel();
        int i = 0;
        try {
            while (retset.next()) {

                if (i < 25) {
                    actividadesTable.setValueAt(retset.getString("nombre"), i, 0);
                    actividadesTable.setValueAt(retset.getString("fechaInicio"), i, 1);
                    actividadesTable.setValueAt(retset.getString("fechaFin"), i, 2);
                } else {
                    javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaInstalacion.getModel();
                    Object nuevo[] = {"", "", ""};
                    temp.addRow(nuevo);
                    actividadesTable.setValueAt(retset.getString("nombre"), i, 0);
                    actividadesTable.setValueAt(retset.getString("fechaInicio"), i, 1);
                    actividadesTable.setValueAt(retset.getString("fechaFin"), i, 2);
                }
                i++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fechaInicioDateChooserKeyTyped

    private void botonFiltrarPartidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFiltrarPartidoActionPerformed
        // TODO add your handling code here:
        String fecha, temporada, categoria, equipoLoc, equipoVis;
        if(fechaPartido.getDate() != null){
            java.sql.Date sqlFechaPartido = new java.sql.Date(fechaPartido.getDate().getTime());
            fecha = sqlFechaPartido.toString();
        } else{
            fecha = null;
        }
        if(comboTemporadaPartidos.getSelectedItem() != "-Temporada-")
            temporada = comboTemporadaPartidos.getSelectedItem().toString();
        else
            temporada = null;
        
        if(comboCategoriaPartidos.getSelectedItem() != "-Categoria-")
            categoria = comboCategoriaPartidos.getSelectedItem().toString();
        else
            categoria = null;
        
        if(comboEquipoLocal.getSelectedItem() != "-Equipo Local-")
            equipoLoc = comboEquipoLocal.getSelectedItem().toString();
        else
            equipoLoc = null;
        
        if(comboEquipoVisitante.getSelectedItem() != "-Equipo Visitante-")
            equipoVis = comboEquipoVisitante.getSelectedItem().toString();
        else
            equipoVis = null;
        try {
            actualizaTablaPartidosFiltro(fecha, temporada, categoria, equipoLoc, equipoVis); 
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonFiltrarPartidoActionPerformed

    private void BotonNPartidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonNPartidoActionPerformed
        // TODO add your handling code here:
        ocultarMensajesError();
        try {
            new NuevoPartido(accesoBD, this).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BotonNPartidoActionPerformed

    private void BotonJPartidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonJPartidoActionPerformed
        // TODO add your handling code here:
        ocultarMensajesError();
        new JugarPartido().setVisible(true);
    }//GEN-LAST:event_BotonJPartidoActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void BotonModificarPartidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonModificarPartidoActionPerformed
        // TODO add your handling code here:
        ocultarMensajesError();
        new ModificarPartido().setVisible(true);
    }//GEN-LAST:event_BotonModificarPartidoActionPerformed

    private void fechaPartidoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fechaPartidoFocusLost
        /*Date dateFromDateChooser = fechaPartido.getDate();
        String dateString = String.format("%1$tY-%1$tm-%1$td", dateFromDateChooser);
        if (dateString.equals("null-null-null")) {
            fechaPartido.setBorder(bordeError);
        } else {
            fechaPartido.setBorder(bordeDatePicker);
        }*/
    }//GEN-LAST:event_fechaPartidoFocusLost

    private void botonMostrarPartidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarPartidosActionPerformed
        // TODO add your handling code here:
        
        actualizaTablaPartidos();       
        
    }//GEN-LAST:event_botonMostrarPartidosActionPerformed
    
    private void actualizaTablaPartidos(){
        List<List<String>> lpar = new ArrayList<List<String>>();
        try {
            lpar = GestorPartidos.getListaPartidos(accesoBD);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultTableModel dtm = new DefaultTableModel();
        dtm.addColumn("Fecha");
        dtm.addColumn("Hora");
        dtm.addColumn("Categoría");
        dtm.addColumn("Temporada");
        dtm.addColumn("Equipo Local");
        dtm.addColumn("Equipo Visitante");
        dtm.addColumn("Resultado Local");
        dtm.addColumn("Resultado Visitante");
        
        String aux;
        Object[] fila = new Object[8];
        for (List<String> it : lpar) {
            aux = it.get(0);
            fila[0] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[1] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[2] = getCategoria(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[3] = getTemporada(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[4] = getEquipo(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[5] = getEquipo(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[6] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[7] = aux;
            dtm.addRow(fila);
        }

        tablaPartidos.setModel(dtm);
        
    }
    
    private void actualizaTablaPartidosFiltro(String fecha, String temporada, String categoria, String equipoLoc, String equipoVis ) throws SQLException{
        List<List<String>> lpar = new ArrayList<List<String>>();
        int idCat = 0;
        idCat = GestorCategorias.getIdCategoria(accesoBD, categoria);
        try {
            lpar = GestorPartidos.getListaPartidosFiltro(accesoBD, fecha, String.valueOf(GestorTemporadas.getIdTemporada(accesoBD, temporada)), 
                    String.valueOf(idCat), String.valueOf(GestorEquipos.getIdEquipo(accesoBD, equipoLoc, categoria)), 
                    String.valueOf(GestorEquipos.getIdEquipo(accesoBD, equipoVis, categoria)));
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultTableModel dtm = new DefaultTableModel();
        dtm.addColumn("Fecha");
        dtm.addColumn("Hora");
        dtm.addColumn("Categoría");
        dtm.addColumn("Temporada");
        dtm.addColumn("Equipo Local");
        dtm.addColumn("Equipo Visitante");
        dtm.addColumn("Resultado Local");
        dtm.addColumn("Resultado Visitante");
        
        String aux;
        Object[] fila = new Object[8];
        for (List<String> it : lpar) {
            aux = it.get(0);
            fila[0] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[1] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[2] = getCategoria(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[3] = getTemporada(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[4] = getEquipo(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            try {
                fila[5] = getEquipo(aux.substring(0, aux.indexOf(",")));
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[6] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[7] = aux;
            dtm.addRow(fila);
        }

        tablaPartidos.setModel(dtm);
        
    }
    private void mostrarMensajeError(String mensaje)
    {
     JOptionPane.showMessageDialog(null,
                    mensaje, "Error",
                    JOptionPane.ERROR_MESSAGE);   
    }
    
    private void botonModificarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarEquipoActionPerformed
        // TODO add your handling code here:
       
        if(tablaEquipos.getSelectedRow() > 1)
        {
            String nombreEquipo = (String) tablaEquipos.getValueAt(tablaEquipos.getSelectedRow(), 0);
            String selecCat = (String) tablaEquipos.getValueAt(tablaEquipos.getSelectedRow(), 1);
            String selecTemp = (String) tablaEquipos.getValueAt(tablaEquipos.getSelectedRow(), 2);
            String primerEntr = (String) tablaEquipos.getValueAt(tablaEquipos.getSelectedRow(), 3);
            String segundoEntr = (String) tablaEquipos.getValueAt(tablaEquipos.getSelectedRow(), 4);

            if(!nombreEquipo.isEmpty() || !selecCat.isEmpty() || !selecTemp.isEmpty() || !primerEntr.isEmpty() || !segundoEntr.isEmpty())
            {
                ocultarMensajesError();

                try{
                    new ModificarEquipo(accesoBD,nombreEquipo,selecCat,selecTemp,primerEntr,segundoEntr).setVisible(true);
                }catch (SQLException ex){
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
                mostrarMensajeError("Falta algún campo por editar");

        }
        else
            mostrarMensajeError("No se ha seleccionado ninguna fila de la tabla");
    }//GEN-LAST:event_botonModificarEquipoActionPerformed

    
    //***************************************JAVI******************************************************//
    private void verEstadisticasEntrenadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verEstadisticasEntrenadorActionPerformed
       
        String usuarioElegido;
        ocultarMensajesError();
        ResultSet retset = null;
        
        int i =tablaUsuarios.getSelectedRow();
        if(i==-1){
            JOptionPane.showMessageDialog(null,"Seleccione un entrenador para ver estadisticas");
        }else{
            String nombre=(String)tablaUsuarios.getValueAt(i,0);
            String primerApellido=(String)tablaUsuarios.getValueAt(i,1);
            String segundoApellido=(String)tablaUsuarios.getValueAt(i, 2);
            String DNI=(String)tablaUsuarios.getValueAt(i, 3);
            
            String tipo=(String)tablaUsuarios.getValueAt(i,5);
            if (!"Entrenador".equals(tipo))
                 usuarioElegido ="Este usuario no tiene estadisticas ya que no es entrenador ";
            else
                 usuarioElegido = nombre+" "+primerApellido+" "+segundoApellido;
           
            try {
                retset = GestorUsuarios.consultarEstadisticasEntrenador(accesoBD, nombre, primerApellido, segundoApellido, DNI);
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            new EstadisticasEntrenador(accesoBD, retset, usuarioElegido).setVisible(true);
        }
    }//GEN-LAST:event_verEstadisticasEntrenadorActionPerformed

    private void estadisticasJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadisticasJugadorActionPerformed
        
        String jugadorElegido;
        ocultarMensajesError();
        
        int i =tablaAlumnos.getSelectedRow();
        if(i==-1){
            JOptionPane.showMessageDialog(null,"Seleccione un jugador para ver estadisticas");
        }else{
            String nombre=(String)tablaAlumnos.getValueAt(i,0);
            String primerApellido=(String)tablaAlumnos.getValueAt(i,1);
            String segundoApellido=(String)tablaAlumnos.getValueAt(i, 2);
   
            String numCuenta=(String)tablaAlumnos.getValueAt(i,6);
            
            jugadorElegido = nombre+" "+primerApellido+" "+segundoApellido;
           
            try {
                retset = GestorAlumnos.consultarEstadisticasAlumno(accesoBD, nombre, primerApellido, segundoApellido, numCuenta);
            } catch (SQLException ex) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            new EstadisticasJugador(accesoBD, retset, jugadorElegido).setVisible(true);
        }     
    }//GEN-LAST:event_estadisticasJugadorActionPerformed

    private void estadisticasTemporadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadisticasTemporadaActionPerformed
        
         ocultarMensajesError();
        
        if(comboTempo.getSelectedItem().equals(" "))
            JOptionPane.showMessageDialog(null,"Seleccione una temporada para ver estadisticas ");
        else{
            String temporadaElegida = (String)comboTempo.getSelectedItem();
             
            new EstadisticasTemporada(accesoBD, temporadaElegida).setVisible(true);
        }
    }//GEN-LAST:event_estadisticasTemporadaActionPerformed
    //***************************************JAVI******************************************************//
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PantallaPrincipal().setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AñaridAlumno;
    private javax.swing.JButton BotonJPartido;
    private javax.swing.JButton BotonModificarPartido;
    private javax.swing.JButton BotonNPartido;
    private javax.swing.JLabel BuscarporLabel;
    private javax.swing.JButton Eliminar;
    private javax.swing.JButton Informacion;
    private javax.swing.JButton Insertar;
    private javax.swing.JComboBox MenuDireccionLabel;
    private javax.swing.JButton Modificar;
    private javax.swing.JLabel NombreInsLabel;
    private javax.swing.JLabel NumeroLabel;
    private javax.swing.JPanel PanelPartidos;
    private javax.swing.JLabel Partidos;
    private javax.swing.JLabel TituloLabel;
    private javax.swing.JLabel actividadesLabel;
    private javax.swing.JTable actividadesTable;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonConsGrupo;
    private javax.swing.JButton botonElimCat;
    private javax.swing.JButton botonElimTemp;
    private javax.swing.JButton botonEliminarAlumno;
    private javax.swing.JButton botonEliminarEquipo;
    private javax.swing.JButton botonEliminarUsuario;
    private javax.swing.JButton botonFiltrarPartido;
    private javax.swing.JButton botonGuardarCambiosAl;
    private javax.swing.JButton botonGuardarCambiosUsuario;
    private javax.swing.JButton botonInfoEquipo;
    private javax.swing.JButton botonModCat;
    private javax.swing.JButton botonModTem;
    private javax.swing.JButton botonModificarEquipo;
    private javax.swing.JButton botonMostrarAlumnos;
    private javax.swing.JButton botonMostrarPartidos;
    private javax.swing.JButton botonNuevaCat;
    private javax.swing.JButton botonNuevaTemp;
    private javax.swing.JButton botonNuevoAlumno;
    private javax.swing.JButton botonNuevoEquipo;
    private javax.swing.JButton botonNuevoGrupEnt;
    private javax.swing.JButton botonNuevoUsuario;
    private javax.swing.JButton boton_mostrar_Usuarios;
    private javax.swing.JLabel buscarAlLabel;
    private javax.swing.JLabel buscarLabel;
    private javax.swing.JTextField capacidadInst;
    private javax.swing.JLabel categoriaAlLabel;
    private javax.swing.JButton cerrarSesion;
    private javax.swing.JComboBox comboCatEquipo;
    private javax.swing.JComboBox comboCatGrup;
    private javax.swing.JComboBox comboCategoriaPartidos;
    private javax.swing.JComboBox comboEntGrup;
    private javax.swing.JComboBox comboEquipoLocal;
    private javax.swing.JComboBox comboEquipoVisitante;
    private javax.swing.JComboBox comboTempEntr;
    private javax.swing.JComboBox comboTempEquipo;
    private javax.swing.JComboBox comboTempo;
    private javax.swing.JComboBox comboTemporadaPartidos;
    private javax.swing.JComboBox consultaCategoria;
    private javax.swing.JComboBox consultaCategoriaUsuario;
    private javax.swing.JComboBox consultaEntrenador;
    private javax.swing.JComboBox consultaEntrenadorUsuario;
    private javax.swing.JComboBox consultaEquipo;
    private javax.swing.JComboBox consultaEquipoUsuario;
    private javax.swing.JComboBox consultaGrupo;
    private javax.swing.JComboBox consultaGrupoUsuario;
    private javax.swing.JComboBox consultaTemporada;
    private javax.swing.JComboBox consultaTemporadaUsuario;
    private javax.swing.JButton deshacerCambiosAlumno;
    private javax.swing.JButton deshacerCambiosUsuario;
    private javax.swing.JTextField edadAl;
    private javax.swing.JLabel edadAlLabel;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JLabel entrenadorAlLabel;
    private javax.swing.JLabel equipoAlLabel;
    private javax.swing.JLabel errorEliminarUsuario;
    private javax.swing.JLabel errorModifCP;
    private javax.swing.JLabel errorModifFijo;
    private javax.swing.JLabel errorModifFijoUsuario;
    private javax.swing.JLabel errorModifMovil;
    private javax.swing.JLabel errorModifMovilUsuario;
    private javax.swing.JButton estadisticasJugador;
    private javax.swing.JButton estadisticasTemporada;
    private com.toedter.calendar.JDateChooser fechaFinDateChooser;
    private javax.swing.JLabel fechaFinLabel;
    private com.toedter.calendar.JDateChooser fechaInicioDateChooser;
    private javax.swing.JLabel fechaInicioLabel;
    private com.toedter.calendar.JDateChooser fechaPartido;
    private javax.swing.JLabel grupoAlLabel;
    private javax.swing.JButton introducirButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel labelEquiposMostrados;
    private javax.swing.JLabel labelNumeroEquipos;
    private javax.swing.JLabel mensajeErrorEliminarAlumno;
    private javax.swing.JMenu menuActividades;
    private javax.swing.JMenu menuCategorias;
    private javax.swing.JMenu menuEntrenamientos;
    private javax.swing.JMenu menuEquipos;
    private javax.swing.JMenu menuInicio;
    private javax.swing.JMenu menuInstalaciones;
    private javax.swing.JMenu menuJugadores;
    private javax.swing.JMenu menuPagos;
    private javax.swing.JMenu menuPartidos;
    private javax.swing.JMenu menuTemporadas;
    private javax.swing.JMenu menuUsuarios;
    private javax.swing.JButton modificarButton;
    private javax.swing.JTextField nombreAl;
    private javax.swing.JLabel nombreAlLabel;
    private javax.swing.JTextField nombreCalleInst;
    private javax.swing.JTextField nombreIns;
    private javax.swing.JLabel nombreLabel;
    private javax.swing.JTextField nombreTextField;
    private javax.swing.JTextField numeroInst;
    private javax.swing.JComboBox pago_grupo;
    private javax.swing.JTextField pago_nombre;
    private javax.swing.JTextField pago_primer_apellido;
    private javax.swing.JTextField pago_segundo_apellido;
    private javax.swing.JComboBox pago_temporada;
    private javax.swing.JComboBox pago_temporadaActividad;
    private javax.swing.JTextField pagos_actividad;
    private javax.swing.JButton pagos_botonDeudores;
    private javax.swing.JButton pagos_botonModificar;
    private javax.swing.JButton pagos_botonMostrar;
    private javax.swing.JLabel pagos_etiqActividad;
    private javax.swing.JLabel pagos_etiqGrupo;
    private javax.swing.JPanel panelActividades;
    private javax.swing.JPanel panelCategorias;
    private javax.swing.JPanel panelEquipos;
    private javax.swing.JPanel panelGrupos;
    private javax.swing.JPanel panelInicio;
    private javax.swing.JPanel panelInstalaciones;
    private javax.swing.JPanel panelJugadores;
    private javax.swing.JPanel panelPagos;
    private javax.swing.JScrollPane panelResulAl;
    private javax.swing.JPanel panelTemporadas;
    private javax.swing.JPanel panelUsuarios;
    private javax.swing.JTextField primerApellidoAl;
    private javax.swing.JLabel primerApellidoLabel;
    private javax.swing.JLabel resultadosAlLabel;
    private javax.swing.JTextField segundoApellidoAl;
    private javax.swing.JLabel segundoApellidoLabel;
    private javax.swing.JTable tablaAlumnos;
    private javax.swing.JTable tablaCategorias;
    private javax.swing.JTable tablaEquipos;
    private javax.swing.JTable tablaGrupos;
    private javax.swing.JTable tablaInstalacion;
    private javax.swing.JTable tablaPagos;
    private javax.swing.JTable tablaPartidos;
    private javax.swing.JTable tablaUsuarios;
    private javax.swing.JLabel temporadaLabel;
    private javax.swing.JTextField textEntEquipo;
    private javax.swing.JTextField textNombreEquipo;
    private javax.swing.JTextField textfield_apellidoPrimeroUsuario;
    private javax.swing.JTextField textfield_apellidoSegundoUsuario;
    private javax.swing.JTextField textfield_nombreUsuario;
    private javax.swing.JTextField tfGrupEnt;
    private javax.swing.JButton verEstadisticasEntrenador;
    // End of variables declaration//GEN-END:variables

    private void ocultarPaneles() {
        panelGrupos.setVisible(false);
        panelInicio.setVisible(false);
        panelJugadores.setVisible(false);
        panelTemporadas.setVisible(false);
        panelUsuarios.setVisible(false);
        panelInstalaciones.setVisible(false);
        panelActividades.setVisible(false);
        panelEquipos.setVisible(false);
        panelPagos.setVisible(false);
        panelCategorias.setVisible(false);
        PanelPartidos.setVisible(false);
    }

    ResultSet ejecutarConsulta(String query) {
        return accesoBD.ejecutaConsulta(query);
    }

    void ejecutarActualizacion(String query) throws SQLException {
        accesoBD.ejecutaActualizacion(query);
    }

    void actualizaComboBoxTemporadas() throws SQLException {
        comboTempo.removeAllItems();
        String query = "SELECT curso FROM Temporada";
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while (res.next()) {
            comboTempo.addItem(res.getString(1));
        }
    }

    private void actualizaComboTempEnt() throws SQLException {
        comboTempEntr.removeAllItems();
        comboTempEntr.addItem("-Ninguno-");
        String query = "SELECT curso FROM Temporada";
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while (res.next()) {
            comboTempEntr.addItem(res.getString(1));
        }
    }

    private void actualizaComboTempEquipo() throws SQLException {
        comboTempEquipo.removeAllItems();
        comboTempEquipo.addItem("-Temporada-");

        String query = "SELECT curso FROM Temporada";
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while (res.next()) {
            comboTempEquipo.addItem(res.getString(1));
        }
    }
    
    private void actualizaComboTemporadaPartidos() throws SQLException{
        comboTemporadaPartidos.removeAllItems();
        comboTemporadaPartidos.addItem("-Temporada-");
        
        String query = "SELECT curso FROM Temporada";
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while(res.next()){
            comboTemporadaPartidos.addItem(res.getString(1));
        }
    }

    private void actualizaComboCatGrup() throws SQLException {
        comboCatGrup.removeAllItems();
        comboCatGrup.addItem("-Ninguno-");
        List<String> listaCats = new ArrayList<String>();

        listaCats = GestorCategorias.getTipoCategorias(accesoBD);

        for (String s : listaCats) {
            comboCatGrup.addItem(s);
        }

    }

    private void actualizaComboCatEquipo() throws SQLException {
        comboCatEquipo.removeAllItems();
        comboCatEquipo.addItem("-Categoria-");

        String query = "SELECT tipo FROM Categoria";
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while (res.next()) {
            comboCatEquipo.addItem(res.getString(1));
        }
    }
    
    private void actualizaComboCategoriaPartidos() throws SQLException {
        comboCategoriaPartidos.removeAllItems();
        comboCategoriaPartidos.addItem("-Categoría-");
        
        String query = "SELECT tipo FROM Categoria";
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while (res.next()){
            comboCategoriaPartidos.addItem(res.getString(1));
        }
    }
    
    private void actualizaComboEquipoPartidos(int numEquipo) throws SQLException {
            String query = "SELECT nombre FROM Equipo";
            ResultSet res = accesoBD.ejecutaConsulta(query);
            if(numEquipo == 1){
                comboEquipoLocal.removeAllItems();
                comboEquipoLocal.addItem("-Equipo Local-");
                while(res.next()){
                    comboEquipoLocal.addItem(res.getString(1));
                }
            } else{
                comboEquipoVisitante.removeAllItems();
                comboEquipoVisitante.addItem("-Equipo Visitante-");
                while(res.next()){
                    comboEquipoVisitante.addItem(res.getString(1));
                }
            }
    }

    void actualizaComboBoxTemporadas(List<String> temps) {
        comboTempo.removeAllItems();
        for (String s : temps) {
            comboTempo.addItem(s);
        }
    }

    private void actualizaComboTempEnt(List<String> temps) {
        comboTempEntr.addItem("-Ninguno-");
        for (String s : temps) {
            comboTempEntr.addItem(s);
        }
    }

    private void actualizaComboEntGrup(List<String> ents) {
        for (String s : ents) {
            comboEntGrup.addItem(s);
        }
    }

    List<String> getListaTemps() throws SQLException {
        List<String> res = new ArrayList<String>();
        res = GestorTemporadas.getListaTemporadas(accesoBD);
        return res;
    }

    List<List<String>> getListaCategorias() throws SQLException {
        List<List<String>> cats = new ArrayList<List<String>>();
        cats = GestorCategorias.getListaCategorias(accesoBD);
        return cats;
    }

    /*
     * Metodo provisional hasta que se implemente "CATEGORIA"
     */
    /*List<String> getListaCategorias() throws SQLException {
     List<String> cats = new ArrayList<String>();
     String query = "SELECT tipo FROM Categoria";
     ResultSet res = accesoBD.ejecutaConsulta(query);
     while (res.next()) {
     cats.add(res.getString(1));
     }

     return cats;
     }*/
    public List<String> getListaEntrenadores(String sEnt) {
        List<String> ents = new ArrayList<String>();
        try {
            ents = GestorUsuarios.getEntrenadores(accesoBD, sEnt);
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        return ents;
    }

    List<String> getListaAlumnos(String s) throws SQLException {
        List<String> als = new ArrayList<String>();
        als = GestorAlumnos.getAlumnos(accesoBD, s);

        return als;
    }

    List<String> getListaInstalaciones(String s) throws SQLException {
        List<String> inst = new ArrayList<String>();
        inst = GestorInstalacion.getListaInstalaciones(accesoBD);


        return inst;
    }
    /*
     * Futuro getListaEquipos (pa cuando esté)
     */
    /*List<String> getListaEquipos(String s) throws SQLException {
        List<String> equipos = new ArrayList<String>();
        equipos = GestorEquipo.getListaEquipos(accesoBD);
        return equipos.
    }*/
    
    /*
     * Método provisional para obtener equipos
     */
     List<String> getListaEquipos(int idCat, int idTemp) throws SQLException {
        List<String> equipos = new ArrayList<String>();
        String query;
        if(idCat == 0 && idTemp != 0){
           query = "SELECT nombre FROM Equipo WHERE (temporada_idTemporada = " + idTemp + ");"; 
        } else if(idCat != 0 && idTemp == 0){
           query = "SELECT nombre FROM Equipo WHERE (Categoria_IdCategoria = " + idCat + ");"; 
        } else{
           query = "SELECT nombre FROM Equipo WHERE (Categoria_IdCategoria = " + idCat + " AND temporada_idTemporada = " + idTemp + ");"; 
        }        
        ResultSet res = accesoBD.ejecutaConsulta(query);
        while (res.next()) {
            equipos.add(res.getString(1));
        }
        return equipos;
     }

    public void actualizaTablaGrupos() throws SQLException {
        List<List<String>> grupos = new ArrayList<List<String>>();
        grupos = GestorGrupos.getListaGrupos(accesoBD);

        DefaultTableModel dtm = new DefaultTableModel();
        dtm.addColumn("ID Grupo");
        dtm.addColumn("Numero Alumnos");
        dtm.addColumn("Categoria");
        dtm.addColumn("Entrenador");
        dtm.addColumn("Temporada");

        String aux;
        Object[] fila = new Object[5];
        for (List<String> it : grupos) {
            aux = it.get(0);
            fila[0] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[1] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[2] = getCategoria(aux.substring(0, aux.indexOf(",")));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[3] = getEntrenador(aux.substring(0, aux.indexOf(",")));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[4] = getTemporada(aux);
            dtm.addRow(fila);
        }

        tablaGrupos.setModel(dtm);
    }

    public void actualizaTablaEquiposFiltro(String nombre, String temporada, String categoria, String entrenador) throws SQLException {
    }

    public void actualizaTablaEquipos() throws SQLException {
    }

    private String getCategoria(String s) throws SQLException {

        String cat = GestorCategorias.getCategoria(accesoBD, Integer.parseInt(s));

        return cat;
    }

    private String getEntrenador(String s) throws SQLException {

        return GestorUsuarios.getEntrenador(accesoBD, s);
    }

    private String getTemporada(String s) throws SQLException {

        return GestorTemporadas.getTemporada(accesoBD, s);
    }
    
    private String getEquipo(String s) throws SQLException {
        return GestorEquipos.getEquipo(accesoBD, s);
    }

    private int getIDActividad() {

        int indiceTabla = actividadesTable.getSelectedRow();
        ResultSet rts;
        int idActividad = 0;

        String actividad = "SELECT idActividades FROM actividades WHERE nombre = '"
                + actividadesTable.getValueAt(indiceTabla, 0) + "' AND fechaInicio = '"
                + actividadesTable.getValueAt(indiceTabla, 1) + "' AND fechaFin = '"
                + actividadesTable.getValueAt(indiceTabla, 2) + "'";



        rts = accesoBD.ejecutaConsulta(actividad);
        System.out.print("\n\n Busaca " + rts + "\n\n");
        try {
            if (rts.next()) {
                idActividad = rts.getInt("idActividades");

            }
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return idActividad;
    }

    public void mostrarActividades() {

        actividadesTable.removeAll();
        try {
            // TODO add your handling code here:
            String consulta_actividades = leeConsultaActividad();
            consultaActividadesMostradas = consulta_actividades;
            System.out.print("\nLA consulta a " + consulta_actividades + "  y aqui termina ");
            retset = GestorActividad.consultaActividad(accesoBD, consulta_actividades);
            ocultarMensajesError();
            actividadesTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
                    new String[]{
                "Nombre", "Fecha Inicio", "Fecha Fin"
            }));
            javax.swing.table.TableModel modelo_tabla = new javax.swing.table.DefaultTableModel();
            modelo_tabla = actividadesTable.getModel();
            int i = 0;
            while (retset.next()) {

                if (i < 25) {
                    actividadesTable.setValueAt(retset.getString("a.nombre"), i, 0);
                    actividadesTable.setValueAt(retset.getString("a.fechaInicio"), i, 1);
                    actividadesTable.setValueAt(retset.getString("a.fechaFin"), i, 2);
                } else {
                    javax.swing.table.DefaultTableModel temp = (javax.swing.table.DefaultTableModel) tablaInstalacion.getModel();
                    Object nuevo[] = {"", "", ""};
                    temp.addRow(nuevo);
                    actividadesTable.setValueAt(retset.getString("a.nombre"), i, 0);
                    actividadesTable.setValueAt(retset.getString("a.fechaInicio"), i, 1);
                    actividadesTable.setValueAt(retset.getString("a.fechaFin"), i, 2);
                }
                i++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void actualizaTablaGruposFiltro(String temporada, String categoria, String entrenador) throws SQLException {
        List<List<String>> grupos = new ArrayList<List<String>>();
        grupos = GestorGrupos.getListaGruposFiltro(accesoBD, temporada, categoria, entrenador);

        DefaultTableModel dtm = new DefaultTableModel();
        dtm.addColumn("ID Grupo");
        dtm.addColumn("Numero Alumnos");
        dtm.addColumn("Categoria");
        dtm.addColumn("Entrenador");
        dtm.addColumn("Temporada");

        String aux;
        Object[] fila = new Object[5];
        for (List<String> it : grupos) {
            aux = it.get(0);
            fila[0] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[1] = aux.substring(0, aux.indexOf(","));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[2] = getCategoria(aux.substring(0, aux.indexOf(",")));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[3] = getEntrenador(aux.substring(0, aux.indexOf(",")));
            aux = aux.substring(aux.indexOf(",") + 1, aux.length());
            fila[4] = getTemporada(aux);
            dtm.addRow(fila);
        }

        tablaGrupos.setModel(dtm);
    }

    List<String> getlistaAlumnosIntroducidos(String idGrupo) throws SQLException {
        List<String> als = new ArrayList<String>();
        als = GestorGrupos.getListaAlumnosIntroducidos(accesoBD, idGrupo);

        return als;
    }

    List<String> getListaAlumnosSinGrupo(String s) throws SQLException {
        List<String> als = new ArrayList<String>();
        als = GestorAlumnos.getAlumnosSinGrupo(accesoBD, s);

        return als;
    }

    void actualizaTablaCategorias() throws SQLException {
        List<List<String>> listaCats = new ArrayList<List<String>>();
        listaCats = GestorCategorias.getListaCategorias(accesoBD);

        DefaultTableModel dtm = new DefaultTableModel();
        dtm.addColumn("Tipo");
        dtm.addColumn("Descripcion");

        String aux;
        Object[] fila = new Object[2];
        for (List<String> it : listaCats) {
            aux = it.get(0);
            fila[0] = aux.substring(0, aux.indexOf(" "));
            aux = aux.substring(aux.indexOf(" ") + 1, aux.length());
            fila[1] = aux.substring(0, aux.length());
            dtm.addRow(fila);
        }

        tablaCategorias.setModel(dtm);

    }
}
