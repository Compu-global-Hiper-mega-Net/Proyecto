/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazUsuario;

import ServiciosAlmacenamiento.BaseDatos;
import GestionActividades.*;
import java.sql.*;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;



/*
 ******************************************************************************
 (c) Copyright 2013 
 * 
 * Moisés Gautier Gómez
 * Julio Ros Martínez
 * Francisco Javier Gómez del Olmo
 * Francisco Santolalla Quiñonero
 * Carlos Jesús Fernández Basso
 * Alexander Moreno Borrego
 * Jesús Manuel Contreras Siles
 * Diego Muñoz Rio
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************
 */

/**
 * Clase para añadir una actividad
 * @author Jesus Manuel Contreras Siles 
 * @version 1.0
 */

public class AltaActividad extends javax.swing.JFrame {

    BaseDatos accesoBD;
    Border bordeError;
    PrincipalActividades pantallaPrincipal;

    /**
     * Metodo creador por defecto
     */
    public AltaActividad() {
        initComponents();
        bordeError = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red);
        ((JTextFieldDateEditor) fechaInicioDateChooser.getComponents()[1]).setEditable(false);
        ((JTextFieldDateEditor) fechaFinDateChooser.getComponents()[1]).setEditable(false);
    }

		/**
		 * Metodo constructor de la clase.
		 * @param acceso BaseDatos (BaseDatos) con el acceso a la base de datos.
		 * @param principal (PrincipalActividades)
		 */

    public AltaActividad(BaseDatos acceso, PrincipalActividades principal) {
        accesoBD = acceso;
        initComponents();
        pantallaPrincipal = principal;
        bordeError = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red);
        ((JTextFieldDateEditor) fechaInicioDateChooser.getComponents()[1]).setEditable(false);
        ((JTextFieldDateEditor) fechaFinDateChooser.getComponents()[1]).setEditable(false);
        temporadaComboBox.removeAllItems();
        instalacion.removeAllItems();

        ResultSet retset;
        String consulta = "SELECT nombre FROM instalacion";
        retset = accesoBD.ejecutaConsulta(consulta);
        try {
            while (retset.next()) {
                instalacion.addItem(retset.getString(1).toString());
            }
        } catch (SQLException ex) {
            Logger.getLogger(AltaActividad.class.getName()).log(Level.SEVERE, null, ex);
        }

        ResultSet rts;
        String consultaCurso = "SELECT curso FROM temporada";
        rts = accesoBD.ejecutaConsulta(consultaCurso);
        try {
            while (rts.next()) {
                temporadaComboBox.addItem(rts.getString(1).toString());
            }
        } catch (SQLException ex) {
            Logger.getLogger(AltaActividad.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NuevaActividadLabel = new javax.swing.JLabel();
        nombreLabel = new javax.swing.JLabel();
        nombreTextField = new javax.swing.JTextField();
        fechaInicioLabel = new javax.swing.JLabel();
        fechaInicioDateChooser = new com.toedter.calendar.JDateChooser();
        fechaFinLabel = new javax.swing.JLabel();
        fechaFinDateChooser = new com.toedter.calendar.JDateChooser();
        descripcionLabel = new javax.swing.JLabel();
        descripcionScrollPane = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Guardar = new javax.swing.JButton();
        Cancelar = new javax.swing.JButton();
        plazasLabel = new javax.swing.JLabel();
        plazasTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        temporadaComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        instalacion = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Alta actividad");

        NuevaActividadLabel.setText("Nueva Actividad");

        nombreLabel.setText("Nombre");

        nombreTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreTextFieldActionPerformed(evt);
            }
        });

        fechaInicioLabel.setText("Fecha inicio");

        fechaInicioDateChooser.setDateFormatString("dd-MM-yyyy");

        fechaFinLabel.setText("Fecha Fin");

        fechaFinDateChooser.setDateFormatString("dd-MM-yyyy");

        descripcionLabel.setText("Descripcion");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        descripcionScrollPane.setViewportView(jTextArea1);

        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        Cancelar.setText("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        plazasLabel.setText("Plazas");

        jLabel2.setText("Temporada");

        temporadaComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2011/2012", "2012/2013" }));
        temporadaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temporadaComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Instalacion");

        instalacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instalacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Guardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Cancelar)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nombreLabel)
                        .addGap(18, 18, 18)
                        .addComponent(nombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(descripcionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(descripcionLabel)
                                .addComponent(NuevaActividadLabel))
                            .addGap(275, 275, 275)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(plazasLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(plazasTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(66, 66, 66)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(temporadaComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(instalacion, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fechaInicioLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fechaInicioDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(fechaFinLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fechaFinDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fechaFinLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(NuevaActividadLabel)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nombreLabel)
                            .addComponent(nombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fechaInicioLabel)
                            .addComponent(fechaInicioDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(fechaFinDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plazasLabel)
                    .addComponent(plazasTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(temporadaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(descripcionLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(instalacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descripcionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Guardar)
                    .addComponent(Cancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nombreTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreTextFieldActionPerformed
	
		/**
		 * Metodo constructor para cerrar el frame.
		 * @param evt (java.awt.event.ActionEvent) con el evento.
		 */

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        setVisible(false);
    }

		/**
		 * Metodo constructor activado por el boton "Guardar" para guardar la actividad
		 * @param evt (java.awt.event.ActionEvent) con el evento.
		 */

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        // TODO add your handling code here:
        String error = "";
        ResultSet retset;

        float precioSocio = 50;
        float precioNoSocio = 70;
        int idTemporada = 0;
        int idInstalacion = getIDInstalacion();
       

        if (nombreTextField.getText().isEmpty()) {
            error = error + "Debes rellenar el campo 'Nombre'\n";
            nombreTextField.setBorder(bordeError);
        } else if (nombreTextField.getText().length() > 45) {
            error = error + "La longitud del campo 'Nombre' no puede superar los 45 caracteres\n";
            nombreTextField.setBorder(bordeError);
        }
        Date dateFromDateChooser = fechaInicioDateChooser.getDate();
        if (fechaInicioDateChooser.getDate() == null) {
            error = error + "Debes rellenar el campo 'Fecha de inicio'\n";
            fechaInicioDateChooser.setBorder(bordeError);
        }
        Date dateFromDateChooser1 = fechaFinDateChooser.getDate();
        if (fechaFinDateChooser.getDate() == null) {
            error = error + "Debes rellenar el campo 'Fecha de fin'\n";
            fechaFinDateChooser.setBorder(bordeError);
        }
        if (plazasTextField.getText().isEmpty()) {
            error = error + "Debes rellenar el campo 'Plazas'\n";
            plazasTextField.setBorder(bordeError);
        } else if (!isNumeric(plazasTextField.getText())) {
            error = error + "El campo 'Plazas' debe tener un valor numerico\n";
            plazasTextField.setBorder(bordeError);
        }

        if (jTextArea1.getText().isEmpty()) {
            error = error + "Debes rellenar el campo 'Descripcion'\n";
            jTextArea1.setBorder(bordeError);
        }

        if (error.isEmpty()) {

            String consulta = "SELECT idTemporada FROM temporada"
                    + " WHERE ";
            consulta = consulta + "curso = " + "'" + temporadaComboBox.getSelectedItem().toString() + "'";

            retset = accesoBD.ejecutaConsulta(consulta);
            try {
                    if (retset.next()) {
                        idTemporada = retset.getInt("idTemporada");
                    }
            } catch (SQLException ex) {
                Logger.getLogger(AltaActividad.class.getName()).log(Level.SEVERE, null, ex);
            }

            boolean errores = GestorActividad.darAltaActividad(accesoBD, jTextArea1.getText(), Integer.parseInt(plazasTextField.getText()),
                    precioSocio, precioNoSocio, idTemporada,
                    dateFromDateChooser, dateFromDateChooser1, nombreTextField.getText());
            
            try {
                insertarInstalacion(idInstalacion, idTemporada);
            } catch (SQLException ex) {
                Logger.getLogger(AltaActividad.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (!errores) {
                JOptionPane.showMessageDialog(null, "Ha habido un error en la base de datos",
                        "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Actividad creada con exito",
                        "Confirmacion", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    error.substring(0, error.length() - 1),
                    "Errores en el formulario", JOptionPane.ERROR_MESSAGE);
        }
        try {
            pantallaPrincipal.mostrarActividades();
        } catch (SQLException ex) {
            Logger.getLogger(AltaActividad.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

		/**
		 * Metodo constructor para almacenar la instalacion donde se celebra la actividad.
		 * @param idInst int (entero) con el id de la instalacion a introducir.
		 * @param idtem int (entero) con el id de la temporada.
     * @throws SQLException algun tipo de error en la base de datos.
		 */

    private void insertarInstalacion(int idInst, int idtem) throws SQLException {
        ResultSet retset;
        String consulta = "SELECT MAX(idActividades) from actividades";
        retset = accesoBD.ejecutaConsulta(consulta);

        int idActividad = 0;
        if (retset.next()) {
            idActividad = retset.getInt(1);
        }

        String insert = "INSERT INTO actividadesInstalacion (actividades_idActividades, actividades_Temporada_idTemporada"
                + ", Instalacion_idInstalacion) VALUES (" + idActividad + ", " + idtem + ", " + idInst + ")";
        accesoBD.ejecutaActualizacion(insert);
        
        /*String pago = "INSERT INTO Cuota (fecha,pagado) VALUES "
                            + "('" + auxcurso + "-" + auxCont + "-1','0')";
                    System.out.println("insercion pago grupo" + query5);
                    res5 = accesoBD.ejecutaActualizacion(query5);

                    query5 = "SELECT DISTINCT LAST_INSERT_ID() FROM Cuota";
                    res4 = accesoBD.ejecutaConsulta(query5);
                    if (res4.next()) {
                        idCuota = res4.getInt(1);
                    }

                    query5 = "INSERT INTO PagoTemporada "
                            + "(Cuota_idCuota,AlumnoTemporada_Alumno_idAlumno,"
                            + "AlumnoTemporada_Temporada_idTemporada) VALUES "
                            + "('" + idCuota + "','" + it + "','" + idTemp + "')";
                    res5 = accesoBD.ejecutaActualizacion(query5);*/
    }
    private void temporadaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temporadaComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_temporadaComboBoxActionPerformed

    private void instalacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instalacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_instalacionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancelar;
    private javax.swing.JButton Guardar;
    private javax.swing.JLabel NuevaActividadLabel;
    private javax.swing.JLabel descripcionLabel;
    private javax.swing.JScrollPane descripcionScrollPane;
    private com.toedter.calendar.JDateChooser fechaFinDateChooser;
    private javax.swing.JLabel fechaFinLabel;
    private com.toedter.calendar.JDateChooser fechaInicioDateChooser;
    private javax.swing.JLabel fechaInicioLabel;
    private javax.swing.JComboBox instalacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel nombreLabel;
    private javax.swing.JTextField nombreTextField;
    private javax.swing.JLabel plazasLabel;
    private javax.swing.JTextField plazasTextField;
    private javax.swing.JComboBox temporadaComboBox;
    // End of variables declaration//GEN-END:variables

		/**
		 * Metodo consultor para comprobar si una cadena es un valor numerico o no.
		 * @param cadena String (cadena) con el valor a comprobar
		 * @return boolean (logico) con el atributo interno con el resultado de la comprobacion.
		 */

    private static boolean isNumeric(String cadena) {
        try {
            Integer.parseInt(cadena);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }
    
		/**
		 * Metodo consultor para consultar el id de una instalacion.
		 * @return int (entero) con el atributo interno del id de la instalacion.
	   */

    private int getIDInstalacion (){
         String instalacionConsulta = "SELECT idInstalacion FROM instalacion WHERE nombre = '" 
                    + instalacion.getSelectedItem().toString() + "'";
         ResultSet retset;
         int id = 0;
         
         retset = accesoBD.ejecutaConsulta(instalacionConsulta);
        try {
            if(retset.next()){
                id = retset.getInt(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(AltaActividad.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return id;
    }
}
